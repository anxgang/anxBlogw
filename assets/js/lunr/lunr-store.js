var store = [{
        "title": "前言",
        "excerpt":"  別人都是 Rails Complete Guide，但本篇是 Rails Compact Guide， 適合三分鐘熱度之人閱讀，每篇保證三分鐘內搞定。   目標受眾      會上網   會使用滑鼠鍵盤   準備工作      一台電腦 windows、mac、linux 皆可   指南三部分      第一部分，將基本流程跑一次（環境準備、建立專案、上線)   第二部分，各種業務流程基本寫法   第三部分，各種元件製作的方式   ","categories": [],
        "tags": [],
        "url": "/docs/rails-compact-guide/01-getting-started",
        "teaser": null
      },{
        "title": "環境安裝",
        "excerpt":"首先，選擇一個開發用的作業系統，先把 Rails 的環境安裝好。   開始安裝   個人推薦作業系統： Mac &gt; Ubuntu &gt; Windows      首推 Mac 是因為以此為開發環境的人比較多，線上討論的會比較多   Ubuntu 通常被當作正式環境的使用，當作主力開發環境當然也沒問題，線上討論也不算少   而 Windows 10 以上內建 Ubuntu 子系統(WSL2)，部分設定步驟比原生 Ubuntu 多一點，速度也稍慢，但如果手邊只有 windows，還是值得一試。   Note: 個人使用 Windows 10 WSL2 當開發機也有２年了，舉凡開發網頁、手機軟體、電腦應用程式，設定得好的話，基本上也沒什麼大問題。  ","categories": [],
        "tags": [],
        "url": "/docs/rails-compact-guide/02-installation",
        "teaser": null
      },{
        "title": "Rails 環境安裝 (on Mac)",
        "excerpt":"把 Rails on Mac 的環境安裝好。   安裝 homebrew    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"  安裝 git    brew install git    # 設定（僅一次即可）   git config --global color.ui true   git config --global user.name \"YOUR NAME\"   git config --global user.email \"YOUR@EMAIL.com\"   ssh-keygen -t rsa -C \"YOUR@EMAIL.com\"  安裝 rvm    gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB   \\curl -sSL https://get.rvm.io | bash  安裝 ruby 及 rails    rvm install ruby --stable   ruby -v    gem install bundler   bundle -v    gem install rails   rails -v  安裝 開發軟體    brew install --cask iterm2 # 安裝 iTerm2   brew install --cask visual-studio-code # 安裝 vscode  安裝 資料庫    brew install sqlite3   brew install postgresql   brew install redis   參考      GoRails - Install Ruby On Rails on MacOS Guides  ","categories": [],
        "tags": [],
        "url": "/docs/rails-compact-guide/03-install_rails_on_mac",
        "teaser": null
      },{
        "title": "Rails 環境安裝 (on Ubuntu)",
        "excerpt":"把 Rails on Ubuntu 的環境安裝好。   安裝 相關套件    sudo apt install curl   curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -   curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -   echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list   sudo apt-get update   sudo apt-get install git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn wget gpg  設定 git    # 設定（僅一次即可）   git config --global color.ui true   git config --global user.name \"YOUR NAME\"   git config --global user.email \"YOUR@EMAIL.com\"   ssh-keygen -t rsa -C \"YOUR@EMAIL.com\"  安裝 rvm    gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB   \\curl -sSL https://get.rvm.io | bash  安裝 ruby 及 rails    rvm install ruby --stable   ruby -v    gem install bundler   bundle -v    gem install rails   rails -v  安裝 vscode    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg   sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg   sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'   rm -f packages.microsoft.gpg    sudo apt install apt-transport-https   sudo apt update   sudo apt install code # 安裝 vscode  安裝 資料庫    sudo apt install postgresql libpq-dev   sudo -u postgres createuser $USER -s    sudo apt install redis-server   參考      GoRails - Install Ruby On Rails on Ubuntu Guides  ","categories": [],
        "tags": [],
        "url": "/docs/rails-compact-guide/04-install_rails_on_ubuntu",
        "teaser": null
      },{
        "title": "Rails 環境安裝 (on windows)",
        "excerpt":"  把 Rails on windows 的環境安裝好。   安裝 子系統 WSL2 Ubuntu  以最高權限開啟 Powershell 並執行    dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart   dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart  至 Microsoft Store 安裝 Ubuntu   安裝 Windows Terminal   至 Microsoft Store 安裝 Windows Terminal   安裝 相關套件    sudo apt-get update   sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev  設定 git    # 設定（僅一次即可）   git config --global color.ui true   git config --global user.name \"YOUR NAME\"   git config --global user.email \"YOUR@EMAIL.com\"   ssh-keygen -t rsa -C \"YOUR@EMAIL.com\"  安裝 rvm    gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB   \\curl -sSL https://get.rvm.io | bash  安裝 ruby 及 rails    rvm install ruby --stable   ruby -v    gem install bundler   bundle -v    gem install rails   rails -v  安裝 資料庫    sudo apt install postgresql libpq-dev   sudo -u postgres createuser $USER -s    sudo apt install redis-server   參考     GoRails - Install Ruby On Rails on Windows Guides   官方安裝 WSL2  ","categories": [],
        "tags": [],
        "url": "/docs/rails-compact-guide/05-install_rails_on_windows",
        "teaser": null
      },{
        "title": "[Links] The Reference of Rails",
        "excerpt":"Studies      Intro to Rails   Rails 101   Rails 102   Rails實戰聖經     Articles      Land Dream Rails Job   xdite Blog   Courses      Rails 即戰力   meetups      Rails Taiwan   Gems      驗證 devise   套版 bootstrap-sass   表單 simple_form   圖示 Font Awesome   傳圖 carrierwave   縮圖 mini_magick   除錯 better_errors   ERD rails-erd  ","categories": ["Links"],
        "tags": ["links","rails"],
        "url": "/links/the-reference-of-rails/",
        "teaser": null
      },{
        "title": "[Guide] Build a Test Project by Scaffold",
        "excerpt":"1. Create a Test Project   rails new test_project    2. Turn into the Project   cd test_project   3. Init a Git   git init git add . git commit -m 'init'   4. Quick Make a CRUD News Page   rails g scaffold news title:string description:text   5. Create Related Table   rake db:migrate   6. Open by Sublime/Atom   subl . atom .   7. Set the Index Page   Open include\\route.rb   Find out #root 'welcome#index' and modify it to root 'news#index'   8. Open the Index Page   rails server   Then go to http://localhost:3000/ …  ","categories": ["Rails"],
        "tags": ["guide","rails"],
        "url": "/rails/guide-build-a-test-project-by-scaffold/",
        "teaser": null
      },{
        "title": "[Guide] Guide for building a Simple Site. ",
        "excerpt":"1. check the version   ruby -v rails -v     2. create a project   gem install rails -v 4.2.0 --no-ri  # \"--no-ri\" means do not install documentations rails _4.2.0_ new rails101 -T  # \"-T\" means do not install test units   3. initialize the git   cd rails101 git init git add . git commit -m \"initial Commit\"   4. Build a group      Create controller: groups   rails g controller groups      Create model: group   rails g model group title:string description:text rake db:migrate      Add a route into route.rb   # [path] config/routes.rb  root 'groups#index' resources :groups      deal with the actions and views   start the server rails s and goto http://localhost:3000/   Unknown action “index”   # [path] app/controllers/groups_controller.rb def index end   Missing template groups/index   &lt;!-- [path]  app/views/groups/index.html.erb --&gt; &lt;h1&gt;Hello World&lt;/h1&gt;      dress up the view by bootstrap   # [path] gemfile gem 'bootstrap-sass'   bundle install   mv app/assets/stylesheets/application.css app/assets/stylesheets/application.css.scss   /* [path] app/assets/stylesheets/application.css.scss */ @import \"bootstrap-sprockets\"; @import \"bootstrap\";      Add a Navbar and a Footer   &lt;!-- [path] app/views/common/_navbar.html.erb --&gt; &lt;nav class=\"navbar navbar-default\" role=\"navigation\"&gt;   &lt;div class=\"container-fluid\"&gt;     &lt;!-- Brand and toggle get grouped for better mobile display --&gt;     &lt;div class=\"navbar-header\"&gt;       &lt;a class=\"navbar-brand\" href=\"/\"&gt;Rails 101&lt;/a&gt;     &lt;/div&gt;      &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;     &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt;       &lt;ul class=\"nav navbar-nav navbar-right\"&gt;         &lt;li&gt; &lt;%= link_to(\"登入\", '#') %&gt; &lt;/li&gt;       &lt;/ul&gt;     &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;   &lt;/div&gt;&lt;!-- /.container-fluid --&gt; &lt;/nav&gt;   &lt;!-- [path] app/views/common/_footer.html.erb --&gt; &lt;footer class=\"container\" style=\"margin-top: 100px;\"&gt;   &lt;p class=\"text-center\"&gt;Copyright ©2016 Rails101     &lt;br&gt;Design by &lt;a href=\"courses.growthschool.com/courses/rails-101/\" target=_new&gt;xdite&lt;/a&gt;   &lt;/p&gt; &lt;/footer&gt;      modify application.html.erb   &lt;!-- [path] app/views/layouts/application.html.erb  --&gt; &lt;body&gt;   &lt;div class=\"container-fluid\"&gt;     &lt;%= render \"common/navbar\" %&gt;     &lt;%= yield %&gt;   &lt;/div&gt;   &lt;%= render \"common/footer\" %&gt; &lt;/body&gt;  ","categories": ["Rails"],
        "tags": ["guide","rails"],
        "url": "/rails/guide-for-building-a-simple-site/",
        "teaser": null
      },{
        "title": "[Note] about route links and assets",
        "excerpt":"Route   # [path] config/routes.rb  root 'topics#index' #root page , go to  controllor\"topic\" and method\"welcome\" get 'welcome', to: 'topics#welcome'  # /welcome page, go to  controllor\"topic\" and method\"welcome\"   Links   redirect_to: XXX_path #like php header('[URL]')   Assets   //= require_tree .    is the last thing to be required. The reason is, //= require_tree . compiles each of the other Javascript files in the javascripts directory and any subdirectories.   keywords   belongs_to :group, counter_cache: :posts_count   build a count cache .. and need to change &lt;%= group.posts.count %&gt; to &lt;%= group.posts.size %&gt;  ","categories": ["Rails"],
        "tags": ["note","rails"],
        "url": "/rails/note-about-route-links-and-assets/",
        "teaser": null
      },{
        "title": "[Guide] Rails101 簡易建立步驟",
        "excerpt":"[ Chapter 1. 環境安裝 ]   1-1 確認ruby版本   ruby -v   1-2 安裝 gem rails 4.2.0   gem install rails -v 4.2.0 --no-ri   1-3 建立一個新 Rails 專案 ( 版本 4.2.0 )   rails _4.2.0_ new rails101 -T   1-4 進入新建好的專案, 並建立 git 做版本控制   cd rails101 git init git add . git commit -m \"Initial Commit\"   [ Chapter 2. 建立基礎網站(僅架構) ]   2-1 建立一個討論版(group)   2-1.1 建立一個 controller: groups (要加s)   rails g controller groups   2-1.2 建立一個 Model: group (不加s)   rails g model group title:string description:text   2-1.3 將資料庫建立起來   rake db:migrate   2-1.4 設定 routes 並建立 groups/index 為首頁 ( 內容是 Hello World! )   # [path] config/routes.rb + root 'groups#index' # 這行代表把 localhost:3000/groups 這個網址設成首頁 + resources :groups   這時候啟動 rails s 前往 http://localhost:3000/   2-2 建立必要頁面   2-2.1 設定 action ‘index’   # [path] app/controllers/groups_controller.rb + def index + end   2-2.2 設定 groups/index.html.erb   &lt;!-- [path] app/views/groups/index.html.erb --&gt; &lt;h1&gt;Hello World!&lt;/h1&gt;   2-3 套入前端套件 Bootstrap   2-3.1 安裝 gem ‘bootstrap-sass’     https://github.com/twbs/bootstrap-sass   # [path] Gemfile + gem 'bootstrap-sass'   執行 bundle install   2-3.2 將 Bootstrap 的 CSS 套件裝進專案裡面   mv app/assets/stylesheets/application.css app/assets/stylesheets/application.css.scss   /* app/assets/stylesheets/application.css.scss */ + @import \"bootstrap-sprockets\"; + @import \"bootstrap\";   重開 rails s   2-4 幫你的專案裝上 Navbar 跟 Footbar   2-4.1 新增兩檔案   &lt;!-- app/views/common/_navbar.html.erb --&gt; &lt;nav class=\"navbar navbar-default\" role=\"navigation\"&gt;   &lt;div class=\"container-fluid\"&gt;     &lt;!-- Brand and toggle get grouped for better mobile display --&gt;     &lt;div class=\"navbar-header\"&gt;       &lt;a class=\"navbar-brand\" href=\"/\"&gt;Rails 101&lt;/a&gt;     &lt;/div&gt;      &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;     &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt;       &lt;ul class=\"nav navbar-nav navbar-right\"&gt;         &lt;li&gt; &lt;%= link_to(\"登入\", '#') %&gt; &lt;/li&gt;       &lt;/ul&gt;     &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;   &lt;/div&gt;&lt;!-- /.container-fluid --&gt; &lt;/nav&gt;   &lt;!-- [path] app/views/common/_footer.html.erb--&gt; &lt;footer class=\"container\" style=\"margin-top: 100px;\"&gt;   &lt;p class=\"text-center\"&gt;Copyright ©2016 Rails101     &lt;br&gt;Design by &lt;a href=\"courses.growthschool.com/courses/rails-101/\" target=_new&gt;xdite&lt;/a&gt;   &lt;/p&gt; &lt;/footer&gt;   2-4.2 修改 app/views/layouts/application.html.erb   &lt;!-- [path] app/views/layouts/application.html.erb --&gt;  - &lt;%= yield %&gt; + &lt;div class=\"container-fluid\"&gt; +   &lt;%= render \"common/navbar\" %&gt; +   &lt;%= yield %&gt; + &lt;/div&gt; + &lt;%= render \"common/footer\" %&gt;   2-5 建立 notice_message   2-5.1 將 Boostrap 的 js 套件: alert 裝進專案裡面   // [path] app/assets/javascripts/application.js +//= require bootstrap/alert   2-5.2 建立 helper: notice_message   # [path] app/helpers/application_helper.rb + def notice_message +   alert_types = { notice: :success, alert: :danger } + +   close_button_options = { class: \"close\", \"data-dismiss\" =&gt; \"alert\", \"aria-hidden\" =&gt; true } +   close_button = content_tag(:button, \"×\", close_button_options) + +   alerts = flash.map do |type, message| +     alert_content = close_button + message + +     alert_type = alert_types[type.to_sym] || type +     alert_class = \"alert alert-#{alert_type} alert-dismissable\" + +     content_tag(:div, alert_content, class: alert_class) +   end + +   alerts.join(\"\\n\").html_safe + end   2-5.3 把 notice_message 放進 application.html.erb 裡面   &lt;!-- [path] app/views/layouts/application.html.erb --&gt; &lt;div class=\"container-fluid\"&gt;   &lt;%= render \"common/navbar\" %&gt; + &lt;%= notice_message %&gt;   &lt;%= yield %&gt; &lt;/div&gt;   2-5.4 如何使用 notice_message 的功能   # [path] app/controllers/groups_controller.rb class GroupsController &lt; ApplicationController   def index   +  flash[:notice] = \"早安！你好！\"  +  flash[:warning] = \"這是 warning 訊息！\"   +  flash[:alert] = \"晚安！該睡了！\"   end end   [ Chapter 3. 手動實作出討論版的 CRUD 功能 ]   3-1 安裝 gem “simple_form”   參考：SimpleForm github   3-1.1 加入gem   # [path] gemfile + gem \"simple_form\"   bundle install   3-1.2 安裝 simple_form for bootstrap 的設定   rails generate simple_form:install --bootstrap   重開 rails s   3-2 可以總覽所有討論版 ( 建立 action index )   3-2.1 建立 action index   # [path] app/controllers/groups_controller.rb   def index +   @groups = Group.all   end   3-2.2 建立 index.html.erb   &lt;!-- [path] app/views/groups/index.html.erb --&gt; &lt;div class=\"col-md-12\"&gt;   &lt;div class=\"group\"&gt;     &lt;%= link_to(\"New group\", new_group_path, class: \"btn btn-primary pull-right\") %&gt;   &lt;/div&gt;   &lt;table class=\"table table-hover\"&gt;     &lt;thead&gt;       &lt;tr&gt;         &lt;td&gt;#&lt;/td&gt;         &lt;td&gt;Title&lt;/td&gt;         &lt;td&gt;Description&lt;/td&gt;       &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;       &lt;% @groups.each do |group| %&gt;         &lt;tr&gt;           &lt;td&gt;#&lt;/td&gt;           &lt;td&gt;&lt;%= link_to(group.title, group_path(group)) %&gt;&lt;/td&gt;           &lt;td&gt;&lt;%= group.description %&gt;&lt;/td&gt;           &lt;td&gt;               &lt;%= link_to(\"Edit\", edit_group_path(group), class: \"btn btn-sm btn-default\")%&gt;               &lt;%= link_to(\"Delete\", group_path(group),    class: \"btn btn-sm btn-default\",                            method: :delete, data: { confirm: \"Are you sure?\" } )%&gt;           &lt;/td&gt;         &lt;/tr&gt;       &lt;% end %&gt;     &lt;/tbody&gt;   &lt;/table&gt; &lt;/div&gt;   3-2 可以新增討論版 ( 建立 action new, create )   3-2.1 action ‘new’   # [path] app/controllers/groups_controller.rb + def new +   @group = Group.new + end   3-2.2 erb ‘new’   &lt;!-- [path] app/views/groups/new.html.erb --&gt; &lt;div class=\"col-md-4 col-md-offset-4\"&gt;   &lt;h1&gt;新增討論版&lt;/h1&gt;    &lt;hr&gt;   &lt;%= simple_form_for @group do |f| %&gt;     &lt;div class=\"form-group\"&gt;       &lt;%= f.input :title, input_html: { class: \"form-control\"} %&gt;       &lt;%= f.input :description, input_html: { class: \"form-control\"} %&gt;     &lt;/div&gt;     &lt;%= f.submit \"Submit\", class: \"btn btn-primary\", data: { disable_with: \"Submitting...\" } %&gt;   &lt;% end %&gt; &lt;/div&gt;   3-2.3 action ‘create’   # [path] app/controllers/groups_controller.rb + def create +   @group = Group.create(group_params) + +   if @group.save +     redirect_to groups_path +   else +     render :new +   end + end    + private +  + def group_params  +   params.require(:group).permit(:title, :description) + end   3-3 可以瀏覽單一討論版 ( 建立 action show )   3-3.1 action show   # [path] app/controllers/groups_controller.rb + def show +   @group = Group.find(params[:id]) + end   &lt;!-- [path] app/views/groups/show.html.erb --&gt; &lt;div class=\"col-md-12\"&gt;   &lt;div class=\"group\"&gt;     &lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\")%&gt;   &lt;/div&gt;   &lt;h2&gt;&lt;%= @group.title %&gt;&lt;/h2&gt;   &lt;p&gt;&lt;%= @group.description %&gt;&lt;/p&gt; &lt;/div&gt;   3-4 修改討論版與儲存已改的設定 ( 建立 action edit, update )   3-4.1 action edit   # [path] app/controllers/groups_controller.rb + def edit +  @group = Group.find(params[:id]) + end   &lt;!-- [path] app/views/groups/edit.html.erb --&gt; &lt;div class=\"col-md-4 col-md-offset-4\"&gt;   &lt;h1&gt;修改討論版&lt;/h1&gt;    &lt;hr&gt;   &lt;%= simple_form_for @group do |f| %&gt;     &lt;div class=\"form-group\"&gt;       &lt;%= f.input :title %&gt;       &lt;%= f.input :description %&gt;     &lt;/div&gt;     &lt;%= f.submit \"Submit\", class: \"btn btn-primary\", data: { disable_with: \"Submitting...\" } %&gt;   &lt;% end %&gt; &lt;/div&gt;   3-4.2 action update   # [path] app/controllers/groups_controller.rb + def update +   @group = Group.find(params[:id])  +   if @group.update(group_params) +     redirect_to groups_path, notice: \"修改討論版成功\" +   else +     render :edit +   end + end    &lt;!-- [path] app/views/groups/edit.html.erb --&gt; &lt;div class=\"col-md-4 col-md-offset-4\"&gt;   &lt;h1&gt;修改討論版&lt;/h1&gt;    &lt;hr&gt;   &lt;%= simple_form_for @group do |f| %&gt;     &lt;div class=\"form-group\"&gt;       &lt;%= f.input :title %&gt;       &lt;%= f.input :description %&gt;     &lt;/div&gt;     &lt;%= f.submit \"Submit\", class: \"btn btn-primary\", data: { disable_with: \"Submitting...\" } %&gt;   &lt;% end %&gt; &lt;/div&gt;   3-5 將討論版刪除 ( action destroy )   3-5.1 建立 action destroy   # [path] app/controllers/groups_controller.rb + def destroy +   @group = Group.find(params[:id]) +   @group.destroy +   redirect_to groups_path, alert: \"討論版已刪除\" + end   3-6 資料驗證: title 不能空白   # [path] app/models/group.rb + validates :title, presence: true   [ Chapter 4. 可以在討論版裡發表文章 ]   4-1 建立 post 相關的 controller, model 關聯 與 routing 設定   4-1.1 建立 Controller: posts (要加s)   rails g controller posts   4-1.2 建立 Model: post (不加s)   rails g model post content:text group_id:integer   4-1.3 將 post 的資料庫建立起來   rake db:migrate   4-2 建立 group 與 post 之間 model 的關聯性 (relationship)   # [path] app/models/group.rb + has_many :posts   # [path] app/models/post.rb + belongs_to :group   4-3 routing 設定   # [path] config/routes.rb - resources :groups + resources :groups do +   resources :posts + end   4-4 可以在 group 的 show 頁面顯示所擁有的 post   # [path] app/controllers/groups_controller.rb  def show     @group = Group.find(params[:id]) +   @posts = @group.posts   end   &lt;!-- [path] app/views/groups/show.html.erb --&gt; &lt;div class=\"col-md-12\"&gt;   &lt;div class=\"group\"&gt; +   &lt;%= link_to(\"New Post\", new_group_post_path(@group), class: \"btn btn-warning pull-right\") %&gt;     &lt;%= link_to(\"Edit\", edit_group_path(@group), class: \"btn btn-primary pull-right\")%&gt;   &lt;/div&gt;   &lt;h2&gt;&lt;%= @group.title %&gt;&lt;/h2&gt;   &lt;p&gt;&lt;%= @group.description %&gt;&lt;/p&gt;  + &lt;table class=\"table\"&gt; +   &lt;thead&gt; +     &lt;tr&gt; +       &lt;th&gt;文章&lt;/th&gt; +       &lt;th colspan=\"2\"&gt;&lt;/th&gt; +     &lt;/tr&gt; +   &lt;/thead&gt; +   &lt;tbody&gt; +     &lt;% @posts.each do |post| %&gt; +       &lt;tr&gt; +         &lt;td&gt;&lt;%= post.content %&gt;&lt;/td&gt; +         &lt;td&gt; +           &lt;%= link_to(\"Edit\", edit_group_post_path(post.group, post), +                       class: \"btn btn-default btn-xs\")%&gt; +           &lt;%= link_to(\"Delete\", group_post_path(post.group, post), +                       class: \"btn btn-default btn-xs \", method: :delete,  +                       data: { confirm: \"Are you sure?\" } )%&gt; +         &lt;/td&gt; +       &lt;/tr&gt; +     &lt;% end %&gt; +   &lt;/tbody&gt; + &lt;/table&gt; &lt;/div&gt;   4-5 可以在討論版裡新增 post ( action new, create )   4-5.1 action ‘new’   # [path] app/controllers/posts_controller.rb + def new +   @group = Group.find(params[:group_id]) +   @post = @group.posts.new + end   # [path] app/views/posts/new.html.erb &lt;h1 class=\"text-center\"&gt;新增文章&lt;/h1&gt;  &lt;div class=\"col-md-4 col-md-offset-4\"&gt;   &lt;%= simple_form_for [@group,@post] do |f| %&gt;     &lt;div class=\"form-group\"&gt;       &lt;%= f.input :content, input_html: { class: \"form-control\"} %&gt;     &lt;/div&gt;     &lt;div class=\"form-actions\"&gt;       &lt;%= f.submit \"Submit\", disable_with: \"Submiting...\", class: \"btn btn-primary\"%&gt;     &lt;/div&gt;   &lt;% end %&gt; &lt;/div&gt;   4-5.2 action ‘create’   # [path] app/controllers/posts_controller.rb + def create +   @group = Group.find(params[:group_id]) +   @post = @group.posts.build(post_params)  +   if @post.save +     redirect_to group_path(@group), notice: \"新增文章成功！\" +   else +     render :new +   end + end  + private  + def post_params +   params.require(:post).permit(:content) + end   4-6 可以修改並更新 post ( action edit, update )   4-6.1 設定 action ‘edit’ 與 action ‘update’   # [path] app/controllers/posts_controller.rb + def edit +   @group = Group.find(params[:group_id]) +   @post = @group.posts.find(params[:id]) + end  +  def update +   @group = Group.find(params[:group_id]) +   @post = @group.posts.find(params[:id])  +   if @post.update(post_params) +     redirect_to group_path(@group), notice: \"文章修改成功！\" +   else +     render :edit +   end + end   &lt;!-- [path] app/views/posts/edit.html.erb --&gt; &lt;h1 class=\"text-center\"&gt;修改文章&lt;/h1&gt;  &lt;div class=\"col-md-4 col-md-offset-4\"&gt;   &lt;%= simple_form_for [@group,@post] do |f| %&gt;     &lt;div class=\"form-group\"&gt;       &lt;%= f.input :content, input_html: { class: \"form-control\"} %&gt;     &lt;/div&gt;     &lt;div class=\"form-actions\"&gt;       &lt;%= f.submit \"Submit\", disable_with: \"Submiting...\", class: \"btn btn-primary\"%&gt;     &lt;/div&gt;   &lt;% end %&gt; &lt;/div&gt;   4-7 可以刪除 post ( action destroy )   4-7.1 action ‘destroy’   # [path] app/controllers/posts_controller.rb + def destroy +   @group = Group.find(params[:group_id]) +   @post = @group.posts.find(params[:id]) + +   @post.destroy +   redirect_to group_path(@group), alert: \"文章已刪除\" + end   4-8 資料驗證： post 必須要有內容才能儲存 / 新增   # [path] app/models/post.rb + validates :content, presence: true   4-9 用 before_action 來整理重複的程式碼   # [path] app/controllers/posts_controller.rb + before_action :find_group    private + def find_group +   @group = Group.find(params[:group_id]) + end   將所有@group = Group.find(params[:group_id])刪掉（new edit create update destory）       before_action 可以用 only,指定某些 action 執行: before_action :find_group, only: [:edit, :update] 或者使用 except,排除某些 action 不執行:    [ Chapter 5. 第五章：(1) 建立基本使用者功能 ]   5-1 安裝 gem “devise”     https://github.com/plataformatec/devise   # [path] gemfile gem \"devise\", \"~&gt; 3.4.1\"   執行bundle install   5-2 設定 Devise   5-2.1 devise 安裝   rails g devise:install   5-2.2 建立 user 功能   rails g devise user  rake db:migrate   5-2.3 叫出(原本是隱藏的) devise views，以便未來可以客製化修改   rails g devise:views   5-2.4 重開rails server   rails s   [ Chapter 5. 第五章：(2) 客製化 devise =&gt; 新增一個 “name” 的欄位 ]   5-3 客製化欄位：name   5-3.1 客製化 devise =&gt; 新增一個 “name” 的欄位   rails g migration add_name_to_user   # [path] db/migrate/(一堆數字)_add_name_to_user.rb   def change +   add_column :users, :name, :string   end   rake db:migrate   5-4 客製化 devise 的 views =&gt; 註冊頁面新增 name 欄位   # [path] app/views/devise/registrations/new.html.erb   &lt;div class=\"form-inputs\"&gt;     &lt;%= f.input :email, required: true, autofocus: true %&gt; +   &lt;%= f.input :name,  required: true %&gt;     &lt;%= f.input :password, required: true, hint: (\"#{@minimum_password_length} characters minimum\" if @validatable) %&gt;     &lt;%= f.input :password_confirmation, required: true %&gt;   &lt;/div&gt;   5-5 加入 strong_parameters 與 devise 整合的 hack   # [path] app/controller/application_controller.rb + before_filter :configure_permitted_parameters, if: :devise_controller?  + protected  +  def configure_permitted_parameters +   devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :email, :password, :password_confirmation) } +  end   5-6  navbar 上的 hi! email 改成 hi! name   # [path] app/views/common/_navbar.html.erb -           Hi!, &lt;%= current_user.email %&gt; +           Hi!, &lt;%= current_user.name %&gt;     5-7  新增 “帳號設定” 功能，並能修改自己帳號的 name   &lt;!-- [path] app/views/common/_navbar.html.erb --&gt;             &lt;ul class=\"dropdown-menu\"&gt; +             &lt;li&gt; &lt;%= link_to(\"帳號設定\", edit_user_registration_path )%&gt;&lt;/li&gt;               &lt;li&gt; &lt;%= link_to(\"登出\", destroy_user_session_path, method: :delete) %&gt; &lt;/li&gt;             &lt;/ul&gt;   # [path] app/controller/application_controller    def configure_permitted_parameters     devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :email, :password, :password_confirmation) } +   devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:name, :email, :password, :password_confirmation, :current_password) }    end   &lt;!-- [path] app/views/devise/registrations/edit.html.erb --&gt; +   &lt;%= f.input :name %&gt;  ","categories": ["Rails"],
        "tags": ["guide","rails"],
        "url": "/rails/rails101-simple-build-steps/",
        "teaser": null
      },{
        "title": "[Tools] Atom snippets",
        "excerpt":"Atom snippets   https://gist.github.com/sdlong/e2188e26ad1a0231ae29   輸入簡碼，按下tab   &lt;!-- lt --&gt; &lt;% link_to(\"\", path) %&gt;   &lt;!-- ltd --&gt; &lt;%= link_to(\"\", path, method: :delete, data: { confirm: \"Are you sure?\" } ) %&gt;   &lt;!-- lti --&gt; &lt;% link_to(path, class: \"btn btn-primary\") do %&gt;   &lt;i class=\"icon\"&gt;&lt;/i&gt; &lt;% end %&gt;   &lt;!-- er --&gt; &lt;%  %&gt;   &lt;!-- pe --&gt; &lt;%=  %&gt;   &lt;!-- pc --&gt; &lt;%#  %&gt;   &lt;!-- form --&gt; &lt;%= simple_form_for(@things) do |f| %&gt;   block &lt;% end %&gt;   &lt;!-- each --&gt; &lt;% @things.each do |thing| %&gt;   block &lt;% end %&gt;   &lt;!-- fp --&gt; &lt;%= f.input  %&gt;   &lt;!-- st --&gt; &lt;%= f.submit \"word\", class: \"btn\", data: { disable_with: \"submiting...\" } %&gt;   &lt;!-- end --&gt; &lt;% end %&gt;   &lt;!-- else --&gt; &lt;% else %&gt;   &lt;!-- if --&gt; &lt;% if condition %&gt;   block &lt;% end %&gt;   &lt;!-- ife --&gt; &lt;% if condition %&gt;   true-block &lt;% else %&gt;   false-block &lt;% end %&gt;   &lt;!-- ntd --&gt; &lt;%# TODO : something %&gt;  ","categories": ["Editor"],
        "tags": ["editor","atom"],
        "url": "/editor/tools-rails-development-tools/",
        "teaser": null
      },{
        "title": "[Note] Rails 實戰班上課筆記",
        "excerpt":"《 一、軟體規劃 》   Computational Thinking      電腦解決問題的思維   把大問題拆解成可以時作的小問題   實作過程中找資源   User Story 實作方式      以人出發，先寫出所有角色主要項目   針對每個角色進行功能的擴寫   最後堆砌成待辦清單   《 二、網站實作(基本架構) 》   套用模板   後台   使用者功能   前台   傳至git/heroku  ","categories": ["Rails"],
        "tags": ["rails","note"],
        "url": "/rails/note-rails-practical-class-notes-first-week/",
        "teaser": null
      },{
        "title": "[Note] GIT常用指令",
        "excerpt":"查詢   git status # 查詢狀態 git log    # 查看log git branch # 查看目前branch   本地   git init  # 初始化 git add . # 新增所有 git commit -m \"[content]\" # commit目前內容 git checkout [branch]     # 切換至branch git checkout -b [branch]  # 建立並切換至branch   遠端   …   Heroku   heroku create git push heroku master # 推送到master git push heroku [branch]:master # 推送分支到master heroku logs # 查看log heroku run rake db:migrate  ","categories": ["Git"],
        "tags": ["git","note"],
        "url": "/git/note-git-commands/",
        "teaser": null
      },{
        "title": "[Guide] Rails 使用 Bootstrap 套版步驟",
        "excerpt":"選定想要的模板      先到startbootstrap.com去找免費模板 http://startbootstrap.com/   找到後下載下來解壓縮，會看到很多資料夾，請直接點開index.html   確認需要調整的地方      點開後會看到你要的套版畫面，請於畫面空白處點右鍵選擇“檢視網頁原始碼”   請看&lt;head&gt;...&lt;/head&gt;區塊中，會有很多CSS的項目   先確認哪些是可以用gem加入的，這些就不用手動加入，等等用gem加就好            css/bootstrap.min.css =&gt; gem ‘bootstrap-sass’       font-awesome/css/font-awesome.min.css =&gt; gem ‘font-awesome’           再看一下哪些是要手動加入            css/freelancer.css           接下來拉到最下方，會有很多javascript項目   同樣觀察哪些是可以用gem加入的            js/jquery =&gt; gem ‘jquery-rails’       js/bootstrap.min.js =&gt; gem ‘bootstrap-sass’           哪些是必須手動加入的            query.easing.min.js       classic.js       cbpAnimateHeader.js       jqBootstrapValidation.js       contact_me.js       freelancer.js           開始安裝      確認好需要加入的項目後，接下來就從 gem 開始裝起            gem ‘jquery-rails’  =&gt; 這個 rails 預設已經裝好了所以不用裝       gem ‘bootstrap-sass’ =&gt; https://github.com/twbs/bootstrap-sass       gem ‘font-awesome’ =&gt; https://github.com/FortAwesome/Font-Awesome           安裝好 gem 後，手動將 css 的檔案放入 app/assets/stylesheets中            freelancer.css           若匯入的項目是 scss，請到 app/assets/stylesheets/application.scss 增加下面匯入 CSS 語法            @import ‘freelancer’           手動將 javascript 檔案放入 app/assets/javascripts 中            query.easing.min.js       classic.js       cbpAnimateHeader.js       jqBootstrapValidation.js       contact_me.js       freelancer.js          ","categories": ["Rails"],
        "tags": ["rails","bootstrap","guide"],
        "url": "/rails/rails-using-the-bootstrap-registration-steps/",
        "teaser": null
      },{
        "title": "[Note] Rails method new, build, create, save的差異",
        "excerpt":"前言   練習 Rails101 時，經常有此疑惑，為何新增時用 new，但在實際建立又用 create， 而後又看到 build 的用法，所以為此應該進一步研究一下。   說明   首先這邊需要將 new, build, create, save 先區分為兩類：      類方法: new, bulid, create   實例方法： save   而以下概述了這幾個類方法的差異：      new: 僅物件的建立   create: 物件的建立 + sql 的執行   build: 僅物件的建立，但用於一對多   由於 new、build 僅建立物件，因此須再使用實例方法 save 才能存入資料庫 而使用 create，則因為包含了 sql 的執行，所以不需再使用 save 存檔   至於 new 及 build 的差異，在於有關聯的 table 是否自動建立物件。   例如：      使用 Wall.posts.new   時，Wall.posts 仍為空   但是 Wall.posts.build 時，Wall.posts 已建立一筆新的資料      參考       http://rubyer.me/blog/262/   http://stackoverflow.com/questions/403671/the-differences-between-build-create-and-create-and-when-should-they-be-us  ","categories": ["Rails"],
        "tags": ["note","rails"],
        "url": "/rails/note-rails-method-new-build-create-and-save-the-difference/",
        "teaser": null
      },{
        "title": "[Note] MacVim安裝方式",
        "excerpt":"先安裝 homebrew      http://brew.sh   使用 brew 安裝 MacVim      brew update   brew install vim 系統已經內建不需再安裝，因此我沒執行此行(避免有人系統沒內建，這邊還是加入此行)   brew install macvim   brew link macvim   開啟方式      mvim   更換主題方式      將主題檔案放入 ~/.vim/colors/目錄之下   建立一檔案~/.vimrc 並加入：colorscheme [主題名稱]即可   相關佈景主題      https://github.com/chriskempson/tomorrow-theme   https://github.com/tomasr/molokai      參考：       http://stackoverflow.com/questions/21012203/gvim-or-macvim-in-mac-os-x   http://blog.csdn.net/tianxiawuzhei/article/details/48734237   http://ibpf.github.io/blog/categories/vim/  ","categories": ["Editor"],
        "tags": ["editor","vim","note"],
        "url": "/editor/note-macvim-installation/",
        "teaser": null
      },{
        "title": "[Note] Vim 學習筆記",
        "excerpt":"前言  最近學習Rails，有感用滑鼠或觸控板仍是不夠快速，切換一直很卡， 可能也是之前習慣用notepad++的關係，改用atom後很多快捷鍵還是不太習慣， 社群中剛好有人在使用vim，讓我想起還有一個曾經想學習卻一直卡關的Editor，剛好趁此機會直接跳槽吧。   簡介  Vim是一套很古老知名免費且開源的編輯器，但至今仍受到很多大神歡迎，可謂是史詩級的Editor。 但是由於學習曲線實在太為陡峭，相較一般編輯器，他需要背誦很多指令， 並需不斷熟悉其操作方式，隨著熟悉度的提升，你才能慢慢體會出它的高效。   假設你覺得寫程式已經夠痛苦了，請不要再拿這編輯器來折磨自己 或者你覺得用滑鼠移動很方便，平常只需要ctrl+c ctrl+p就很夠用了，那你也可以左轉了 我想這個痛苦的過程，可能需要真的需要對寫程式很有愛   安裝方式  （這邊使用mac環境，若其他作業系統請參考Vim官網：http://www.vim.org/）   1.安裝vim (主程式廢話，基本上現在mac環境皆已自帶vim，就不用特別裝) 2.安裝vim_rails（讓rails程式碼有顏色，還有專用快捷鍵） https://github.com/tpope/vim-rails     問題排除： 若遇到E174: Command already exists: add ! to replace it問題 我這邊處理方式是進入~/.vimrc將 ascenator/L9這個plugin給mark起來（此行最前面加“符號）    3.設定vim環境檔~/.vimrc      佈景主題 上網找把檔案丟進~/.vim/colors/ 加入colorscheme lucid   行數顯示 加入set nu   其他plugin （晚點再寫）   操作方式  方向控制      hjkl 代表著 ←↓↑→   所有的按鍵可以在前面加個數字, 例如 3j 表示 向下移動 3 行   i 可以進入Insert模式 — 可以像一般編輯器輸入文字的模式   按下 Esc 或是 ctrl+c 進入Normal模式   u 可以復原(undo)   Ctrl+r 可以重做(redo)   dd, dw, dl 刪除(delete) 行(line), 字元(word), or 單字(letter) (輸入後，仍停留在Normal模式)   cc, cw, cl 改變(change) 行(line), 字元(word), or 單字(letter) (輸入後，直接進入Insert模式)   yy, yw, yl 複製(yank)  行(line), 字元(word), or 單字(letter)   p, P 貼上(paste) 在目前位置後方貼上, or 在目前位置前方貼上   :w  存檔(write)   :q! 離開(quit)，且不存檔   :wq , :x or ZZ 存檔並離開      參考       影片 https://www.youtube.com/playlist?list=PLuW7NCGvKlyWNdHzRbYifHp47hMk9EH7S   Vunble https://github.com/VundleVim/Vundle.vim   問題 https://github.com/VundleVim/Vundle.vim/issues/713  ","categories": ["Editor"],
        "tags": ["editor","note","vim"],
        "url": "/editor/note-vim-study-notes/",
        "teaser": null
      },{
        "title": "高雄 Rails 實戰班上課心得",
        "excerpt":"先講結論   其實語言學久了就會知道，你在乎的不是語言，而是這個生態圈。   這堂課有很多助教可以問、課後有slack可以加入、有Office Hour、meetup可以參加，其實這張票就是通往這個生態圈的門票。 你問我值不值得，我絕對推薦你來參加，因為課程不僅是表面上的4週，還是永久的學習圈。 前提是你能夠好好利用到這些資源。   假設你只是來上上課，卻從不問問題，沒時間參加meetup，這樣肯定沒有效果，就真的不推薦來了。   學習初衷   我本身在接案公司打滾了 4 年，主要使用 php 語言開發，前後端都有涉獵，基礎算是打得還不錯。   主要是今年初朋友推薦，才讓我知道有 Rails 這個快速打造又新又輕巧的玩具。   自行 google 後，就找到 xdite 的一些文章和課程，只能說 xdite 的文筆真的不錯，我馬上就被降低疑慮、增加信心的推坑了。 被推坑了之後，又聽說這個課程繁重，心想反正都花了學費，索性就辭掉工作。來看看這個看起來強大到幾近唬爛的課程，是否能讓我快速通關，進階為Rails的扛壩子。   預習階段  這個階段，其實就是去 meetup 認識朋友的時間，有了同儕，才有動力去學習。 大家會互相推薦一些他們學習的管道，分享一些實作的小技巧，所以把握一週一次的meetup來打屁聊天吧，會有意想不到的收穫。   其他時間再把 railsbridge 中文的教材和 rails101 先熟練起來放著(不懂就先背起來，沒幾個單字)，熟練到憑空打出來的程度。   然後還是建議大家直接準備一台 macbook，其實我當初猶豫很久，因為我其實滿熟悉 Linux 環境，剛開始一直拿 Ubuntu 在練習，但是有問題求助於人的時候，會發現別人不太好操作，指令也是都要自己去查。買了 mac 之後，生活實在愜意許多。   上課階段   這課程真的是精華中的精華，完全沒有廢話，時間也非常緊湊，如果不好好預習、複習，實在很容易在課堂上爆掉，這對信心無疑是一大打擊，拜託不要讓這種事情發生。我基本上都是先做完該週的課程才去上課，課堂練習時間我會再看一次code，直接問助教有疑慮的地方，或者先思考作業要怎麼寫。   第一週   UserStory，真的是滿神奇的東西，以前也寫程式規劃，但真的都不是這樣寫，有一種「原來這樣也行啊!!?」的感覺。以往還要再耗費唇舌跟客戶解釋一番，這種寫法大概不用了。然後課程內容其實就是 rails101 的進階一點，輕鬆學習就好。   第二週   之前就聽說此週很強大很恐怖，不過在有預習的狀況下，應該說已經預先把課程內容先寫完一次，我倒是還滿適應，課程練習就直接把有問題的地方拿出來問助教。我想資料庫的關聯概念是比較需要注意的地方，需要先想清楚，否則面對model根本不知道怎麼開。   第三週   這週課程就輕鬆許多，但其實我認為這部份才是最希望學到的部分，寄信，串接支付寶，進階的整理術，因為這些東西網路上有很多解法，但也沒有標準答案，很容易繞很多彎路。   第四週   本週課程可以說是含金量最高的一堂課程，一下子塞了很多東西，改善效能的方式、SEO方法、如何正確寫履歷、如何面試、接案技巧。因為之前也在接案公司碰到很多類似問題，很多東西就像是醍醐灌頂一樣，覺得之前浪費很多時間在無謂的討論上，不必要的事情直接避免就好了，不重要的客戶直接放棄就是了。   後記   上完課後實在是意猶未盡，以後上不到該怎麼辦！？   推薦大家常去 meetup，那邊有非常多的資訊交流。其實第一天參加 meetup 就有被嚇到了，在這個純軟體業幾乎是沙漠的高雄，還有這麼多學習 rails 的人。php 滿地都是人，卻沒有像樣的生態圈，學 Rails 的人少反而能凝聚不少人，來了之後真的認識不少朋友。   希望大家不要再躲起來自幹了，快出來尋找你夥伴吧！  ","categories": ["Rails"],
        "tags": ["mind","rails"],
        "url": "/rails/rails-combat-class-experience/",
        "teaser": null
      },{
        "title": "[Note] 給 Rails 新手惡補清單",
        "excerpt":"基本能力      Google - 請點滿此技能   English - 現在至少會Google找翻譯的程度(我發現很多人錯誤訊息明明寫得很清楚，ex.template missing，但還是會直接丟Slack問，可以預想絕對無法進步)   沒碰過 unix-like 環境      terminal - 至少知道/是跟目錄，~是家目錄，會切換目錄，知道–help查語法   mac - 操作方式要熟悉，找人幫忙問一下   沒碰過任何程式      ruby   沒碰過web程式      前端知識：            html - 知道head body，知道css、js怎麼插入，       css       javascript - 知道有這個東西就好，他是jQuery原生的寫法       jQuery       bootstrap - css的Framework           後端知識            rails       sql           沒碰過版本控制：            git - 至少了解分散式版本控制是什麼，哪些指令       github - 操作技巧           建議新手   我覺得網頁程式不難，主要是雜，要學的東西太多，而且很多東西要探討他的歷史，才會知道為什麼現在要使用這種做法。 這門課程教我們跳過基礎，直接學習ROR，之後再來惡補，實在算是很逆天的學法、一種快速通關的方式。 其實因為每個人的基礎狀況都不同，這種方式還是很有效果的，重點是要會發問。   學完後也奉勸大家，這門課是 ror 課程，你仍有很多東西還是非常需要惡補，否則隨便講兩句就被發現你的 bug 在哪，有機會再列我認為的惡補清單給大家。   實在不知道從何問起的話，就直接把東西帶來 meetup，邊貼 code 邊問為什麼這樣寫。   建議高手   這份課程真的算是商業應用的精華，不會吃虧的 遇到問題懶得問人，可以直接看官方的 api 吧，詳細到爆炸，我自從看了 api 之後，考試都考 100 分，剩下再來問 slack 這些課程其實真的不用做三遍，把重點整理成一份，直接理解幫助記憶吧(rails 真的只是寫法簡略到很不習慣而已)  ","categories": ["Rails"],
        "tags": ["note","rails"],
        "url": "/rails/note-give-rails-newbie-advice/",
        "teaser": null
      },{
        "title": "[Rails] Validation 相關用法",
        "excerpt":"前言   今天在使用驗證的時候覺得綁手綁腳，還是整理一些 Validation 常見使用方式來用好了。暫時先這些，之後使用到會再補充..   驗證觸發點   只有在以下method執行時，才會觸發驗證：      create   create!   save   save!   update   update!   驗證輔助範例   validates :terms, acceptance: true validates :password, confirmation: true validates :username, exclusion: { in: %w(admin superuser) } validates :email, format: { with: /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i, on: :create } validates :age, inclusion: { in: 0..9 } validates :first_name, length: { maximum: 30 } validates :age, numericality: true validates :username, presence: true validates :username, uniqueness: true   驗證輔助解說   acceptance   通常用於Checkbox(預設是1，表勾選)   validates :terms, acceptance: true   若需要指定值也可以：   validates :terms, acceptance: { accept: 'yes' }   confirmation   通常用於重複輸入驗證（ex.重複輸入一次密碼，驗證兩欄位要一樣）   validates :password, confirmation: true   對應的template長這樣：   &lt;%= text_field :person, :password %&gt; &lt;%= text_field :person, :password_confirmation %&gt;   exclusion   這個方法驗證屬性是否“不屬於”某個給定的集合（ex.不可以註冊admin或superuser當帳號）   validates :username, exclusion: { in: %w(admin superuser) }   可以補上message：   validates :subdomain, exclusion: { in: %w(admin superuser), message: \"%{value} is reserved.\" }   numericality   是否為數字：   validates :min_age, :numericality =&gt; true   其他限制條件：   # greater_than 大於 validates :min_age, :numericality =&gt; { :greater_than =&gt; 0 }  # greater_than_or_equal_to 大於等於 validates :min_age, :numericality =&gt; { :greater_than =&gt; 0 }  # less_than 小於 validates :max_age, :numericality =&gt; { :less_than =&gt; 100 }  # less_than_or_equal_to 小於等於 validates :max_age, :numericality =&gt; { :less_than_or_equal_to =&gt; 100 }  # odd 奇數 validates :max_age, :numericality =&gt; { :odd =&gt; true }  # even 偶數 validates :max_age, :numericality =&gt; { :even =&gt; true }  # other_than 不等於 validates :max_age, :numericality =&gt; { :other_than =&gt; 100 }    參考           http://api.rubyonrails.org/v3.2.13/classes/ActiveModel/Validations/NumericalityValidator.html     http://stackoverflow.com/questions/4416278/how-to-implement-min-max-validator-in-rails-3     http://rails.ruby.tw/active_record_validations.html     ","categories": ["Rails"],
        "tags": ["rails","validation","note"],
        "url": "/rails/rails-validation-related-usage/",
        "teaser": null
      },{
        "title": "[Agile] User Stroy",
        "excerpt":"User Story 是什麼?   敏捷專案常用技巧，其重點不在撰寫規格，而是改由用戶故事帶出專案架構。   為什麼我們要用 User Story?      透過不同角色，不同場景去模擬專案執行時的狀況，才能真實的呈現，甚至能抓出原本少思考到的問題。   透過簡單的功能敘述，才能使團隊成員皆能清楚了解項目實際運作方式，避免一個功能各自表述的狀況。   如何使用 User Story ？   以人為出發，先寫出所有角色主要項目，再針對每個角色進行功能的擴寫，最後堆砌成待辦清單。 實作重點：      簡單的功能敘述   以（⾓色）的觀點寫下有價值的「功能」「需求」   實作細節可以之後再討論   實作範例   66k 高薪網   Ver 1      想徵才的⼈可以在這個網站上張貼⼯作   想應徵的⼈可以在這個網站上瀏覽有哪些⼯作，並點進去瀏覽   Ver 2      想徵才的⼈，可以在在這個網站上張貼工作。            張貼時需要本次徵才的相關資訊，如標題，類型，薪水區間，工作地點，工作敘述，如何應徵等       張貼時需要填寫公司基本資訊，公司地址，電話，聯絡方式           想應徵的⼈，可以在這個網站上瀏覽有哪些⼯作，並點進去瀏覽。   想應徵的人，應該要在清單中看到最新的工作，一眼就能看到薪資區間。   Ver 3      想徵才的⼈，可以在在這個網站上張貼工作。            張貼時需要本次徵才的相關資訊，如標題，類型，薪水區間，工作地點，工作敘述，如何應徵等       張貼時需要填寫公司基本資訊，公司地址，電話，聯絡方式           想應徵的⼈，可以在這個網站上瀏覽有哪些⼯作，並點進去瀏覽。            瀏覽時可以清楚看到本次徵才資訊       瀏覽時可以清楚看到公司基本資訊       瀏覽時可以點選email投遞履歷           想應徵的人，應該要在清單中看到最新的工作，一眼就能看到薪資區間。   想應徵的人，應該要可以選擇分類查看   想應徵的人，可以透過email註冊得知最新的工作資訊。   Ver 4      想徵才的⼈，可以在在這個網站上張貼工作。            張貼時需要本次徵才的相關資訊，如標題，類型，薪水區間，工作地點，工作敘述，如何應徵等。       工作敘述需要可以上傳圖片，可以排版。       張貼時需要填寫公司基本資訊，公司地址，電話，聯絡方式。           想徵才的人，在張貼工作前，可以先預覽張貼內容。   想徵才的人，張貼工作的期限為30天，超過需要重新張貼。   想應徵的⼈，可以在這個網站上瀏覽有哪些⼯作，並點進去瀏覽。            瀏覽時可以清楚看到本次徵才資訊。       瀏覽時可以清楚看到公司基本資訊。       瀏覽時可以點選email投遞履歷。           想應徵的人，應該要在清單中看到最新的工作，一眼就能看到薪資區間。   想應徵的人，應該要可以選擇分類查看。   想應徵的人，可以透過email註冊得知最新的工作資訊。   Ver 5      想徵才的⼈，可以在在這個網站上張貼工作。            張貼時需要本次徵才的相關資訊，如標題，類型，薪水區間，工作地點，工作敘述，如何應徵等。                    類型又分為：視覺設計，程式設計，網路行銷                       工作敘述需要可以上傳圖片，可以排版。       張貼時需要填寫公司基本資訊，公司地址，電話，聯絡方式。           想徵才的人，在張貼工作前，可以先預覽張貼內容。   想徵才的人，張貼工作的期限為30天，超過需要重新張貼。   想應徵的⼈，可以在這個網站上瀏覽有哪些⼯作，並點進去瀏覽。            瀏覽時可以清楚看到本次徵才資訊。       瀏覽時可以清楚看到公司基本資訊。       瀏覽時可以點選email投遞履歷。           想應徵的人，應該要在清單中看到最新的工作，一眼就能看到薪資區間。   想應徵的人，應該要可以選擇分類查看。   想應徵的人，可以透過email註冊得知最新的工作資訊。  ","categories": ["Agile"],
        "tags": ["user story","agile"],
        "url": "/agile/note-user-stroy/",
        "teaser": null
      },{
        "title": "[Rails] Routing 的 Namespace",
        "excerpt":"namspace 是什麼?      一種特定scope應用，能夠創造出一組獨立的controller、path、url Helper等。   例如：   namespace :admin do   resources :products end      可創造path： http://localhost:3000/admin/projects/   為什麼我們要用 namespace?      希望有獨立於目前平台的子系統，例如對應前台的後台系統。   因為名稱及對應頁面命名類似，因此加入一個命名空間是較好的做法。   如何使用 namespace?      以下範例會在一個名為admin的namespace中，建立products的controller   執行指令：   rails g controller admin::products   會產生一組  \t* app/view/admin/products路徑            app/controller/products_controller.rb檔案           再至routes.rb加入:   namespace :admin do   resources :products end   補充      也可以直接設定一組首頁  http://localhost:3000/admin/ 直接導到 products#index   namespace :admin do   root \"products#index\" end      參考       領域名稱Namespace  https://ihower.tw/rails4/routing.html  ","categories": ["Rails"],
        "tags": ["rails","route"],
        "url": "/rails/rails-routing-of-the-namespace/",
        "teaser": null
      },{
        "title": "[Rails] Strong Parameter",
        "excerpt":"strong parameter 是什麼?   strong parameter是一個rails的安全機制，他是為了解決「大量賦值(Mass assignment)」因為太方便而造成的安全性議題。   為什麼我們要用 strong parameter?      簡單講就是限制可寫入的欄位，才能有效避免被Hack猜中其他欄位名稱，而造成不被預期的欄位寫入資料庫的疑慮。   如何使用 strong parameter?      在進行資料庫存取時，另外定義一個XXX_params，並限制相關permit的欄位，取代原有params[]   例如：   def update  person.update(person_params)  redirect_to :back end  private  def person_params  params.require(:person).permit(:name, :age) end   參考      https://ihower.tw/rails4/security.html   https://github.com/rails/strong_parameters  ","categories": ["Rails"],
        "tags": ["rails","route"],
        "url": "/rails/rails-strong-parameter/",
        "teaser": null
      },{
        "title": "[Rails] 12 in 12 挑戰 1 - AReddit",
        "excerpt":"專案概述   網頁連結看板，提供使用者瀏覽，並提供有登入的使用者建立/修改/刪除，有喜歡和不喜歡的功能，並可於該連結留言。   步驟   Step1. 起步走      建立新專案      rails new AReddit           初始化git       git init   git add .   git commit -m \"Initial Commit\"           先建立branch來做開發（之後確定ＯＫ再merge回master）     git checkout -b link_scaffold           打開編輯器     atom .           Step2. 打造雛形      使用scaffod建立links     rails g scaffold Link title:string url:string --no-stylesheet           建立table     rake db:migrate           執行內建的WEBrick server     rails s                查看瀏覽器 http://localhost:3000       加入首頁     # [path] route.rb root 'link#index'                先加入兩個網站 ex. http://www.google.com 、 http://www.yahoo.com       記錄支線版本     git add . git commit -m 'Add a link scaffold'           合併回主線     git checkout master git merge link_scaffold           Step3. 建立使用者      新增一個支線     git checkout -b 'add_users'           加入devise     gem 'devise', '~&gt; 4.1'           執行bundle並重啟伺服器     bundle install rails s           安裝devise     rails g devise:install rails g devise User rake db:migrate rails g devise:views          # [path] config/environments/development.rb config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }                先註冊一個帳號 http://localhost:3000/users/sign_up       存擋     git add . git commit -m 'add devise and create User model'           Step4. 加入登入介面           加入簡易登入介面        &lt;!-- [path] application.html.erb --&gt;  &lt;% if user_signed_in? %&gt;    &lt;li&gt;&lt;%= link_to('New Link', new_link_path) %&gt;&lt;/li&gt;    &lt;li&gt;&lt;%= link_to(\"Account\", edit_user_registration_path) %&gt;&lt;/li&gt;    &lt;li&gt;&lt;%= link_to(\"Sign Out\", destroy_user_session_path, method: :delete ) %&gt;&lt;/li&gt;  &lt;% else %&gt;    &lt;li&gt;&lt;%= link_to(\"Sign In\", new_user_session_path) %&gt;&lt;/li&gt;    &lt;li&gt;&lt;%= link_to(\"Sign Up\", new_user_registration_path) %&gt;&lt;/li&gt;  &lt;% end %&gt;           Step5. User只能編輯/刪除自己的連結      新增 migration links 加入 user_id     rails g migration add_user_id_to_links user_id:string rake db:migrate           加入關聯     # [path] user.rb has_many :link, dependent: :destroy          # [path] link.rb belongs_to :users           記錄支線版本     git add . git commit -m 'Add User interface'           合併回主線     git checkout master git merge add_users           Step6. 加入 boostrap 美化      新增支線版本     git checkout -b 'add_bootstrap'                安裝 bootstrap 及 simple_form_for                       bootstrap: https://github.com/twbs/bootstrap-sass             # [path] gemfile   gem 'bootstrap-sass', '~&gt; 3.3.6'                     bundle install                     mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss                   ```scss app/assets/stylesheet/application.scss   @import “bootstrap-sprockets”;   @import “bootstrap”;             ```js // [path] app/assets/javascripts/application.js   //= require bootstrap-sprockets                                simple_form_for: https://github.com/plataformatec/simple_form            # [path] gemfile  gem 'simple_form'                    bundle install  rails generate simple_form:install --bootstrap                           調整相關頁面   風格部分採用 http://startbootstrap.com/template-overviews/sb-admin-2/   ( 我只需要用到panel部分所以放 app/assets/stylesheets/sb-admin-2.css 就好 )   有調整的頁面      layouts/application.html.erb   common/_navbar.html.erb   common/_footbar.html.erb   links/_form.html.erb   links/index.html.erb   links/show.html.erb   devise/registrations/edit.html.erb   devise/registrations/new.html.erb   devise/session/new.html.erb   Step7. 加入喜歡/不喜歡功能           使用acts_as_votable        # [path] gemfile  gem 'acts_as_votable', '~&gt; 0.10.0'           bundle install                在 Link 的 model 中加入 acts_as_votable            route.rb 加入喜歡/不喜歡連結       # [path] route.rb resources :links do   member do     get 'upvote'     get 'downvote'   end end      在links_controller加入   def upvote   @link = Link.find(params[:id])   @link.liked_by(current_user)   redirect_to :back end  def downvote   @link = Link.find(params[:id])   @link.disliked_by(current_user)   redirect_to :back end   Step8. 加入留言功能   …未完待續  ","categories": ["Rails"],
        "tags": ["rails","challenge"],
        "url": "/rails/rails-12-in-12-challenge-1-areddit/",
        "teaser": null
      },{
        "title": "[Rails] each 使用 index",
        "excerpt":"使用方式   &lt;% @groups.to_enum.each.with_index(1) do |group, index| %&gt;   &lt;tr&gt;     &lt;td&gt;&lt;%= index %&gt;&lt;/td&gt;   &lt;/tr&gt; &lt;% end %&gt;      參考         http://stackoverflow.com/questions/5646390/ruby-each-with-index-offset     ","categories": ["Rails"],
        "tags": ["rails","loop"],
        "url": "/rails/rails-each-index/",
        "teaser": null
      },{
        "title": "[Rails] 實作按讚(喜歡/不喜歡)功能",
        "excerpt":"推薦 gem   acts_as_votable   使用方式           加入acts_as_votable        # [path] gemfile  gem 'acts_as_votable', '~&gt; 0.10.0'            bundle install           (記得要重開server)            在想要施作的model中加入 acts_as_votable            route.rb加入喜歡/不喜歡連結        # [path] route.rb  resources :links do    member do      get 'upvote'       get 'downvote'    end  end                在links_controller加入        def upvote    @link = Link.find(params[:id])    @link.liked_by(current_user)    redirect_to :back  end   def downvote    @link = Link.find(params[:id])    @link.disliked_by(current_user)    redirect_to :back  end                在畫面上加上這兩顆按鈕即可        &lt;% link_to 'Upvote', upvote_link_path(link) %&gt;  &lt;% link_to 'Upvote', downvote_link_path(link) %&gt;                計算數量時        @post.votes_for.size    # =&gt; 5 # 總數  @post.get_likes.size    # =&gt; 3 # 喜歡  @post.get_dislikes.size # =&gt; 2 # 不喜歡          ","categories": ["Rails"],
        "tags": ["rails","gem"],
        "url": "/rails/rails-implement-on-like-functionality/",
        "teaser": null
      },{
        "title": "[Rails] 常用 gem",
        "excerpt":"gemfile   gem 'awesome_rails_console' gem 'devise' gem 'bootstrap-sass' gem 'simple_form' #gem 'bootstrap_form'  #gem \"font-awesome-rails\" #gem 'will_paginate-bootstrap' #gem 'bootstrap-generators' group :development do   #gem 'meta_request'   #gem 'better_errors'   #gem 'quiet_assets'   #gem 'bullet'   #gem 'rails-erd'   #gem 'pry-rails'   #gem \"awesome_print\" end   類型      驗證 devise   套版 bootstrap-sass   表單 simple_form   圖示 Font Awesome   傳圖 carrierwave   縮圖 mini_magick   除錯 better_errors   除錯 pry-rails   n+1Q bullet   ERD rails-erd   分頁 will_paginate-bootstrap  ","categories": ["Rails"],
        "tags": ["rails","gem"],
        "url": "/rails/rails-gemfile/",
        "teaser": null
      },{
        "title": "[Tools] 圖片生成器",
        "excerpt":"網站   http://placehold.co/   在施作網頁畫面的時候，常需要放圖片，直接使用此方式即可：   &lt;img class=\"img-responsive\" src=\"http://placehold.co/900x300\" alt=\"\"&gt;   格式調整      長寬只填一項，就是正方形   圖片可選擇png、jpg、gif，預設是png   底色、字色可填 HEX Colors 3碼或6碼   文字空白使用”+“連接   http://placehold.co/長x寬.png/底色/字色?text=文字1+文字2+..   範例           http://placehold.co/300                   http://placehold.co/300x100                   http://placehold.co/300x100.jpg                   http://placehold.co/300x100/000000/fff                   http://placehold.co/300x100/000000/fff?text=hello+world!             ","categories": ["Tool"],
        "tags": ["tool","generator","picture"],
        "url": "/tool/tools-picture-generator/",
        "teaser": null
      },{
        "title": "[Rails] Simple form 使用方式",
        "excerpt":"網站   https://github.com/plataformatec/simple_form   安裝   gem 'simple_form'   bundle install   rails generate simple_form:install --bootstrap   基本使用方式   只要輸入 f.input，simple_form 會自動根據資料庫中該欄位的資料型態，判斷此 input 顯示的格式   &lt;%= simple_form_for @post do |f| %&gt; &lt;div class=\"form-group\"&gt;   &lt;%= f.input :username, label: 'Your username please', error: 'Username is mandatory, please specify one' %&gt;   &lt;%= f.input :password, hint: 'No special characters.' %&gt;   &lt;%= f.input :email, placeholder: 'user@domain.com' %&gt;   &lt;%= f.input :remember_me, inline_label: 'Yes, remember me' %&gt; &lt;/div&gt; &lt;%= f.submit \"Submit\", class: \"btn btn-primary\", data: { disable_with: \"Submiting...\" } %&gt; &lt;% end %&gt;   若有錯誤，也可使用 as 手動調整欄位格式   &lt;%= simple_form_for @user do |f| %&gt;   &lt;%= f.input :username %&gt;   &lt;%= f.input :password %&gt;   &lt;%= f.input :description, as: :text %&gt;   &lt;%= f.input :accepts,     as: :radio_buttons %&gt;   &lt;%= f.button :submit %&gt; &lt;% end %&gt;   排版   為了排版，平常寫在後面的參數，也可以分開填寫 例如   &lt;%= simple_form_for @user do |f| %&gt;   &lt;%= f.input :username, label: 'username', hint: 'No special characters, please!', error: 'username', id: 'user_name_error', full_error: 'token'  %&gt;   &lt;%= f.submit 'Save' %&gt; &lt;% end %&gt;   可調整為：   &lt;%= simple_form_for @user do |f| %&gt;   &lt;%= f.label :username %&gt;   &lt;%= f.input_field :username %&gt;   &lt;%= f.hint 'No special characters, please!' %&gt;   &lt;%= f.error :username, id: 'user_name_error' %&gt;   &lt;%= f.full_error :token %&gt;   &lt;%= f.submit 'Save' %&gt; &lt;% end %&gt;   疑難雜症   關閉label   label: false    備註hint   hint: '文字'   參考      https://github.com/plataformatec/simple_form   http://stackoverflow.com/questions/17479237/simple-form-blank-label  ","categories": ["Rails"],
        "tags": ["rails","view","gem"],
        "url": "/rails/rails-simple-form-used/",
        "teaser": null
      },{
        "title": "[Rails] Partial 用法",
        "excerpt":"基本用法   例如：app/view/comments/_comment.html.erb   其他 template 要引用此 partial：   &lt;%= render :partial =&gt; \"comments/comment\" %&gt;   簡略寫法：   &lt;%= render \"comments/comment\" %&gt;   帶入參數   &lt;%= render :partial =&gt; \"comments/comment\", :locals =&gt; { :a =&gt; 1, :b =&gt; 2 } %&gt;   簡略寫法：   &lt;%= render \"comments/comment\", :a =&gt; 1, :b =&gt; 2 %&gt;   Collection用法  例如：app/view/comments/_comment.html.erb   在post的template中要放入相關的comments(partial)：   原寫法：   &lt;!-- [path] app/view/posts/view.html.erb --&gt; &lt;% @comments.each do |comment| %&gt;  &lt;%= render :partial =&gt; \"comment\", :locals =&gt; { :comment =&gt; comment } %&gt; &lt;% end %&gt;   可改寫為：   &lt;!-- [path] app/view/posts/view.html.erb --&gt; &lt;%= render :partial =&gt; \"comment\", :collection =&gt; @comments, :as =&gt; :comment %&gt;   若檔案名稱剛好與model相同，更省略的寫法：   &lt;!-- [path] app/view/posts/view.html.erb --&gt; &lt;%= render @comments %&gt;   PS.在此Collection的partail內可使用xxx_counter當作此loop的counter   &lt;!-- [path] app/view/comments/_comment.html.erb --&gt; &lt;%= comment_counter %&gt; ## 0 1 2 ...  ","categories": ["Rails"],
        "tags": ["rails","view"],
        "url": "/rails/rails-partial-usage/",
        "teaser": null
      },{
        "title": "[Rails] Notice Message 建立方式",
        "excerpt":"建立方式   加入 helper   # [path] app/helpers/application_helper.rb module ApplicationHelper   def notice_message     alert_types = { notice: :success, alert: :danger }      close_button_options = { class: \"close\", \"data-dismiss\" =&gt; \"alert\", \"aria-hidden\" =&gt; true }     close_button = content_tag(:button, \"×\", close_button_options)      alerts = flash.map do |type, message|       alert_content = close_button + message        alert_type = alert_types[type.to_sym] || type       alert_class = \"alert alert-#{alert_type} alert-dismissable\"        content_tag(:div, alert_content, class: alert_class)     end      alerts.join(\"\\n\").html_safe   end end   到要放置的地方加入&lt;%= notice_message %&gt; 例如：   &lt;!-- [path] app/view/layout/application.html.erb --&gt; &lt;div class=\"container\"&gt;   &lt;%= notice_message %&gt;   &lt;%= yield %&gt; &lt;/div&gt;   參考      http://kakas-blog.logdown.com/posts/286448-rails101-chapter3-notice-message  ","categories": ["Rails"],
        "tags": ["rails","notification"],
        "url": "/rails/rails-notice-message/",
        "teaser": null
      },{
        "title": "[Rails] will_paginate 分頁使用方式",
        "excerpt":"Github   will_paginate 這是原版的，轉為 html code 時會用 div 包，需要另外自行套樣式   will_paginate-bootstrap 如果用 bootstrap 樣式，直接使用這個即可   使用方式   controller 中   原本寫法：   @posts = Post.all   改寫為：   @posts = Post.paginate(:page =&gt; params[:page])   在template中   加入： 原版：   &lt;%= will_paginate @posts %&gt;   bootstrap版：   &lt;%= will_paginate @posts, renderer: BootstrapPagination::Rails %&gt;   其他參數   手動設定一頁的顯示數量：   @posts = Post.paginate(:page =&gt; params[:page], :per_page =&gt; 30)   該model中都用同樣的顯示數量：   class Post   self.per_page = 10 end   設定全域頁數：   WillPaginate.per_page = 10   參考      https://github.com/mislav/will_paginate   https://github.com/bootstrap-ruby/will_paginate-bootstrap  ","categories": ["Rails"],
        "tags": ["rails","pagination"],
        "url": "/rails/rails-will-paginate-pagination/",
        "teaser": null
      },{
        "title": "[Rails] 加入 bootstrap tooltip 效果",
        "excerpt":"加入方式   1. 加入 js   // [path] app/assets/javascripts/application.js $(document).ready(function() {   $('.has-tooltip').tooltip(); });   此段意思是在 document (整個網頁) ready 時(就是 render 好以後)，執行匿名 function()， 此 function 內容是，若有物件的 class 名稱為 has-tooltip 時，則觸發 tooltip 這個 method   2. 在任意物件 class 加入 has-tooltip   例如：   &lt;span class=\"has-tooltip\" title=\"hello world!!!\"&gt;範例&lt;/span&gt;   參考      http://getbootstrap.com/javascript/#tooltips   https://launchschool.com/blog/integrating-rails-and-bootstrap-part-3  ","categories": ["Rails"],
        "tags": ["rails","bootstrap"],
        "url": "/rails/rails-join-bootstrap-tooltip-effect/",
        "teaser": null
      },{
        "title": "[Ruby] Bitwise Shift",
        "excerpt":"前言   剛好看到有人在詢問此問題，就打了一大篇，非本科系大概不知道， 應該每個語言都有 « 和 » 這個兩個 operator 吧。   可以拿 mac 的計算機來按， command+3 切到程式語言模式 ( command+1 切回來) 觀察二進位的變化。( 如下面範例的點法，就是5 + &lt;&lt; 和 17 + &lt;&lt; + &lt;&lt; + &lt;&lt; )   Bitwise Shift 範例   ## For integers it means bitwise left shift: 5 &lt;&lt; 1  ## gives 10  17 &lt;&lt; 3 ## gives 136   這邊需要把十進位數字先轉換成二進位，再來做bit的位移   5 « 1   5的二進位0101 10的二進位1010 &lt;&lt; 1 是表示往左位移 1 bit 的意思 因此0101往左位移 1 bit，就變成 1010 (因為往左移，最高位的位元會消失，最低位元補 0) 所以 5 « 1 會得到 10   17 « 3   17的二進位0001 0001 136的二進位1000 1000 &lt;&lt; 3 是表示往左位移3 bit的意思 因此0001 0001往左位移3 bit，就變成1000 1000(補了3個0)，也就是136 所以 17 « 3 會得到 10   為何是 2 的倍數   因為是二進位，所以每位移 1 就是 2 的幾次方倍起跳   &lt;&lt; 1 左移 1 位，就是多了 2^1 倍的意思，就是乘以 2 的意思 &lt;&lt; 2 左移 2 位，就是多了 2^2 倍的意思，就是乘以 4 的意思   …以此類推   &gt;&gt; 1右移1位，就是少了2^1倍的意思，就是除以2的意思 &gt;&gt; 2右移2位，就是少了2^2倍的意思，就是除以4的意思   …以此類推   簡單來說，可以理解成   5 &lt;&lt; 1  ## 等於 10 * 2^1 17 &lt;&lt; 3 ## 等於 17 * 2^3  5 &gt;&gt; 1  ## 等於 10 / 2^1 17 &gt;&gt; 3 ## 等於 17 / 2^3    參考      http://acm.nudt.edu.cn/~twcourse/BitwiseOperation.html  ","categories": ["Ruby"],
        "tags": ["ruby","operator"],
        "url": "/ruby/ruby-bitwise-shift/",
        "teaser": null
      },{
        "title": "[Rails] Counter Cache 用法",
        "excerpt":"前言   最近發現常常使用 conuter cache，紀錄一下增加記憶。   使用時機   當有兩個 table 為 1對多關聯，並需要統計關聯 table 的數量時。此時每次存取網頁都需要再統計一次數量，會造成效能低落。 若使用Counter Cache，則可讓每次關聯 table 數量異動時，由程式自動紀錄至主要 table 的 cache 欄位中，之後在網頁存取時就可以直接從 cache 抓取數量，讓使用者感到效能提升。   使用方式   例如：  顯示文章列表(posts)時，也要顯示每篇有多少留言回覆(comments)。   &lt;% @posts.each do |post| %&gt;   主題：&lt;%= post.subject %&gt;   回覆數：&lt;%= post.comments.size %&gt; &lt;% end %&gt;   此時在取得 post.comments.size 時，實際上存取資料庫(select)的次數會是 comments 的數量   改使用 counter cache，需在 Model 新增一個欄位叫做 comments_count：   rails g migration add_comments_count_to_post comments_count:integer   至 Migration 調整，將 default 設為 0，並把 counter cache 初始化：   class AddPostsCountToTopic &lt; ActiveRecord::Migration   def change       add_column :posts, :comments_count, :integer, :default =&gt; 0  #補上 :defalut =&gt; 0          Post.pluck(:id).each do |i| ## Post.pluck(:id)，表示從Post中取得由id組成的array如[1,2,3,..]       Post.reset_counters(i, :comments) ## 把所有counter cache重算一次     end   end end   編輯 Models，加入 counter_cache: true：   class Comment &lt; ActiveRecord::Base   belongs_to :post, counter_cache: true end class Post &lt; ActiveRecord::Base   has_many :comments end   此時再執行   rake db:migrate   這樣同樣的 @post.comments.size，程式就會自動改抓 cache，就等於自動使用 @post.comments_count。   備註      若不想使用comments_count當欄位名稱，改使用xxx當欄位名稱，可改寫為counter_cache: :xxx   pluck用法參考   reset_counters用法參考   參考      https://ihower.tw/rails4/performance.html   http://apidock.com/rails/ActiveRecord/Calculations/pluck   http://apidock.com/rails/ActiveRecord/CounterCache/reset_counters  ","categories": ["Rails"],
        "tags": ["rails","model"],
        "url": "/rails/rails-counter-cache-usage/",
        "teaser": null
      },{
        "title": "[Rails] 建立簡易 Category 方式",
        "excerpt":"說明   此範例主要建立簡易的分類與下拉選單，例如：商店有分中式、日式、韓式等類型可選擇，將建立兩table進行類別對商店的1對多關連。   建立方式   1. 先建立 Model Category 及 category_id 欄位   rails g model Category name:string content:text   rails g migration add_category_id_to_shop category_id:integer   rake db:migrate   2. 建立關聯   class Shop &lt; ActiveRecord::Base   belongs_to :category end class Category &lt; ActiveRecord::Base   has_many :shops end   3. 建立新增/編輯時的分類選項   &lt;%= f.input :category_id, collection: Category.all, label_method: :name, value_method: :id, label: \"category\", include_blank: \"請選擇...\" %&gt;   記得補上strong parameters   def shop_params   params.require(:shop).permit(:category_id) end   4. 建立分類資料   用seed或tasks或rails console建立   category = Category.create([   { name: '中式菜餚' },   { name: '日式料理' },   { name: '韓式風味' } ])   5. 首頁的分類選單   &lt;div class=\"list-group\"&gt;   &lt;% @categories.each do |category|%&gt;     &lt;%= link_to(category.name, shops_path(category: category),       class: \"list-group-item  #{\"active\" if current_page?(shops_path(category: category))}\") %&gt;   &lt;% end %&gt; &lt;/div&gt;   6. Contorller調整   def index   if params[:category].present?    @shops = Shop.where(category_id: params[:category])   else    @shops = Shop.all   end end      參考       http://stackoverflow.com/questions/17758401/how-to-create-categories-in-rails   http://railscasts.com/episodes/37-simple-search-form   http://stackoverflow.com/questions/9879169/how-to-get-twitter-bootstrap-navigation-to-show-active-link  ","categories": ["Rails"],
        "tags": ["rails","model"],
        "url": "/rails/rails-on-the-establishment-of-category/",
        "teaser": null
      },{
        "title": "[Rails] 關聯的 model 發生 nil 錯誤狀況處理方式",
        "excerpt":"前言   關聯的 model 發生 nil 錯誤狀況處理方式。 因為實作時常發生此狀況，特此紀錄   狀況   有兩個Model為1對多的關聯，如Event及Category   class Event &lt; ActiveRecord::Base     belongs_to :category end class Category &lt; ActiveRecord::Base     has_many :events end   在template輸出   &lt;%= @event.category.name %&gt;   常會發生 @event.category 可能是 nil，這會導致 nil.name 發生錯誤。   解法1   一個簡單的方式是改使用try(:xxx)   &lt;%= @event.category.try(:name) %&gt; &lt;%= @event.category.try(:name).try(:XXX) %&gt; #以此類推往下要繼續加try..   解法2   另一招則是在 Event model 加入以下程式，就會有 @event.category_name 可以使用，而且允許 @event.category 是 nil。   class Event &lt; ActiveRecord::Base  delegate :name, :to =&gt; :category, :prefix =&gt; true, :allow_nil =&gt; true end   在template裡面只要輸入如下程式，而不會跳錯誤。   &lt;%= @event.category_name %&gt; 或 &lt;%= @event.category.name %&gt;   參考      https://ihower.tw/rails4/restful-practices.html  ","categories": ["CSS"],
        "tags": ["css","scss"],
        "url": "/css/rails-associated-nil-error-model-approach/",
        "teaser": null
      },{
        "title": "[CSS] CSS 與 SASS/SCSS 轉換方式",
        "excerpt":"前言   由於 bootstrap 的套版常常都是使用 css，改成 scss 會比較好做調整，因此想到是否有工具能夠快速轉換。 確認的結果官方及有兩個指令可以互相轉換，且也有線上網站提供轉換。   指令轉換   (以下範例xxx為input，yyy為output)   SASS/SCSS 轉 CSS   sass xxx.scss yyy.css sass xxx.sass yyy.css   CSS/SASS/SCSS 轉 SASS/SCSS   sass-convert xxx.css yyy.sass sass-convert xxx.css yyy.scss sass-convert xxx.sass yyy.scss sass-convert xxx.scss yyy.sass   網站轉換   CSS轉SASS/SCSS: http://css2sass.heroku.com/   參考      https://segmentfault.com/q/1010000000173768   http://sass-lang.com/documentation/file.SASS_REFERENCE.html#syntax   http://stackoverflow.com/questions/13450355/css-to-sass-or-less-conversion  ","categories": ["CSS"],
        "tags": ["css","scss"],
        "url": "/css/css-css-and-sass-scss-conversion/",
        "teaser": null
      },{
        "title": "[Rails] 多個資料庫連結",
        "excerpt":"前言   最近可能需要串接其他系統，但該系統又沒有現成的 api，需要直接進行多個資料庫撈取與回寫時使用   方式           在 database.yml 加入其他 db 的設定        default: &amp;default    adapter: postgresql    encoding: unicode    pool: 5   development:    &lt;&lt;: *default    database: mysite_development   test:    &lt;&lt;: *default    database: mysite_test   production:    &lt;&lt;: *default    host: 10.0.1.55    database: mysite_production    username: postgres_user    password: &lt;%= ENV['DATABASE_PASSWORD'] %&gt;   db2_development:    &lt;&lt;: *default    database: db2_development   db2_test:    &lt;&lt;: *default    database: db2_test   db2_production:    &lt;&lt;: *default    host: 10.0.1.55    database: db2_production    username: postgres_user    password: &lt;%= ENV['DATABASE_PASSWORD'] %&gt;                然後在 model 指定連接的 db        class Customer &lt; ActiveRecord::Base    establish_connection \"db2_#{Rails.env}\"  end           參考      http://stackoverflow.com/questions/1825844/multiple-databases-in-rails  ","categories": ["Rails"],
        "tags": ["rails","database"],
        "url": "/rails/rails-multiple-database-links/",
        "teaser": null
      },{
        "title": "[Rails] 刪除時 confirm 跳出兩次以上的問題",
        "excerpt":"前言   最近製作專案時，常發生按下刪除鈕，彈出好幾個確認視窗 “Are you sure?”，要按很多次才會真的刪除。 查了網頁原始碼，也沒發現重複載入的 javascript，在百思不得其解之下，只好一直亂 google，終於在 stackoverflow 討論串找到解決方式。   發生原因   此問題原來是在做 SEO 時，我將 javascript 放到 body 最後方，因為 turbolink 的關係，導致所有頁面都載入一次。   解決方式   兩種方式：      把 javascript 放回 head 中   將 javascript_include_tag 的部分做調整，如下   &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;    改為   &lt;%= javascript_include_tag 'application', 'data-turbolinks-eval' =&gt; false %&gt;.      data-turbolinks-eval=false 的意思是希望這段 script 只在直接訪問的时候執行，Turbolinks.visit 訪問的時候不執行。   參考      http://stackoverflow.com/questions/16477927/ruby-on-rails-delete-confirmation-pop-up-dialog-displaying-twice   https://github.com/turbolinks/turbolinks-classic/issues/244   https://ruby-china.org/topics/12177  ","categories": ["Rails"],
        "tags": ["rails","turbolinks"],
        "url": "/rails/rails-confirm-when-delete-bounce-more-than-twice-problem/",
        "teaser": null
      },{
        "title": "[Rails] 複合搜尋",
        "excerpt":"使用方式   def index   @products = Product.all    @products = @products.where(\"name LIKE ?\", \"%#{params[:product_name]}%\") if params[:product_name].present?   @products = @products.where(\"description LIKE ?\", \"%#{params[:product_descrpition]}%\") if params[:product_descrpition].present?    @products = @products.paginate(page: params[:page], per_page: 5) end   參考      http://motion-express.com/blog/20140714-rails-basic-search  ","categories": ["Rails"],
        "tags": ["rails","search"],
        "url": "/rails/rails-compound-search/",
        "teaser": null
      },{
        "title": "[JavaScript] 轉頁 fadeIn/fadeOut 效果",
        "excerpt":"前言   此方式需使用 turbolinks 的方法   新增效果 css   這邊使用animate.css動畫效果， 下載 animate.css 放至 assets/stylesheet，確保他有被application.scss載入   加入轉頁 javascript   新增一檔案，放至 assets/javascripts，確保他有被 application.js 載入   // [path] turbolinks_transitions.js document.addEventListener('page:change', function() {   document.getElementById('primary-content').className += 'animated fadeIn'; }); document.addEventListener('page:fetch', function() {   document.getElementById('primary-content').className += 'animated fadeOut'; });      注：fadeIn及fadeOut動畫可以再自行調整喜歡的樣式(參考animate.css樣式)   標示 object   在要轉頁動畫的地方給他標註 id = \"primary-content\" 如：   &lt;body&gt; &lt;%= render 'common/navbar' %&gt; &lt;div id=\"primary-content\"&gt;   &lt;div class=\"container\"&gt;     &lt;%= yield %&gt;   &lt;/div&gt;   &lt;%= render 'common/footer' %&gt; &lt;/div&gt; &lt;/body&gt;   參考     https://coderwall.com/p/t5ghhw/animated-page-transitions-in-rails-4-apps  ","categories": ["JavaScript"],
        "tags": ["rails","search"],
        "url": "/javascript/js-jump-animation/",
        "teaser": null
      },{
        "title": "[JS] 轉頁Loading動畫",
        "excerpt":"前言  此方式需要用到turbolinks     補充： 如只需要上方progress bar，可直接使用 gem “nprogress-rails” 也很方便    選好喜歡的Loading圖  http://tobiasahlin.com/spinkit/   這邊使用其中一項當範例  加入CSS，請確保application.scss有載入 ```css assets/spinner.css .spinner {   margin: 100px auto;   width: 50px;   height: 40px;   text-align: center;   font-size: 10px;   font-weight: bold;   display:none; }   .spinner &gt; div {   background-coålor: #555;   height: 100%;   width: 6px;   display: inline-block;   -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;   animation: sk-stretchdelay 1.2s infinite ease-in-out; }   .spinner .rect2 {   -webkit-animation-delay: -1.1s;   animation-delay: -1.1s; }   .spinner .rect3 {   -webkit-animation-delay: -1.0s;   animation-delay: -1.0s; }   .spinner .rect4 {   -webkit-animation-delay: -0.9s;   animation-delay: -0.9s; }   .spinner .rect5 {   -webkit-animation-delay: -0.8s;   animation-delay: -0.8s; }   @-webkit-keyframes sk-stretchdelay {   0%, 40%, 100% { -webkit-transform: scaleY(0.4) }   20% { -webkit-transform: scaleY(1.0) } }   @keyframes sk-stretchdelay {   0%, 40%, 100% {     transform: scaleY(0.4);     -webkit-transform: scaleY(0.4);   }  20% {     transform: scaleY(1.0);     -webkit-transform: scaleY(1.0);   } }   加入Javascript，請確保application.js有載入  turbolink-class 請輸入: ```js // [path] asssets/javascripts/spinner.js $(document).on('page:fetch', function() {   $(\".spinner\").show(); });  $(document).on('page:receive', function() {   $(\".spinner\").hide(); });   turbolink 5 請輸入:  // [path] asssets/javascripts/spinner.js $(document).on('turbolinks:request-start', function() {   $(\".spinner\").show(); });  $(document).on('turbolinks:request-end', function() {   $(\".spinner\").hide(); });   再將Loading畫面放入template  &lt;!-- [path] views/layouts/application.htm.erb --&gt; &lt;div class=\"spinner\"&gt;   &lt;div class=\"rect1\"&gt;&lt;/div&gt;   &lt;div class=\"rect2\"&gt;&lt;/div&gt;   &lt;div class=\"rect3\"&gt;&lt;/div&gt;   &lt;div class=\"rect4\"&gt;&lt;/div&gt;   &lt;div class=\"rect5\"&gt;&lt;/div&gt;   LOADING.. &lt;/div&gt;   #附註 turbolinks 5和Class對應表可以參考 http://qiita.com/jkr_2255/items/fe1e69e043c94a5c0a79      參考         https://codediode.io/lessons/8736-loading-spinners-in-rails#1-spinner-css     http://tobiasahlin.com/spinkit/     http://www.ajaxload.info/     http://qiita.com/jkr_2255/items/fe1e69e043c94a5c0a79     ","categories": [],
        "tags": [],
        "url": "/js-turn-to-page-loading-animation/",
        "teaser": null
      },{
        "title": "[Rails] pagedown markdown editor使用方式",
        "excerpt":"前置  須先安裝好以下幾個gem  gem 'bootstrap-sass' gem 'font-awesome-rails' gem 'simple_form'   ##安裝方式          加入pagedown-bootstrap-rails至gemfile gem 'pagedown-bootstrap-rails' bundle install            加入application.scss scss app/assets/stylesheets/application.scss @import \"pagedown_bootstrap\";        加入application.js     // [path] app/assets/javascripts/application.js //= require pagedown_bootstrap //= require pagedown_init           再開一個input資料夾存放pagedown_input.rb   # [path] app/input/pagedown_input.rb class PagedownInput &lt; SimpleForm::Inputs::TextInput   def input     out = \"&lt;div id=\\\"wmd-button-bar-#{attribute_name}\\\"&gt;&lt;/div&gt;#{wmd_input}\"      if input_html_options[:preview]       out &lt;&lt; \"&lt;div id=\\\"wmd-preview-#{attribute_name}\\\" class=\\\"wmd-preview\\\"&gt;&lt;/div&gt;\"     end      out.html_safe   end    private    def wmd_input     @builder.text_area(       attribute_name,       input_html_options.merge(         class: 'wmd-input form-control',            id: \"wmd-input-#{attribute_name}\"       )     )   end end   使用方式   在想要加入的template放入  &lt;%= f.input :content, as: :pagedown, input_html: { preview: true, rows: 10 } %&gt;   效果如下：       參考         https://github.com/hughevans/pagedown-bootstrap-rails     http://doruby.kbmj.com/nakanishi/20150728/rails_Markdown_     ","categories": [],
        "tags": [],
        "url": "/rails-pagedown-markdown-editor/",
        "teaser": null
      },{
        "title": "[Git] Oh My Zsh Cannot pull with rebase 問題",
        "excerpt":"前言   其實是因為我的Terminal有使用Oh My Zsh，有一天他問我是否要更新，但卻怎麼也更新不了   error: Cannot pull with rebase: You have unstaged changes.   發生原因   應該是自己有調整過一些套件或是設定值，導致 git 有衝突   解決方式      cd ~/.oh-my-zsh/   git add .   git commit -m \"commit message\"   upgrade_oh_my_zsh   參考      https://github.com/robbyrussell/oh-my-zsh/issues/1991  ","categories": [],
        "tags": [],
        "url": "/git-cannot-pull-with-rebase-problems/",
        "teaser": null
      },{
        "title": "[Rails] 自動抓取 Gravatar 頭像",
        "excerpt":"Gravatar 介紹   gravatar是「Globally Recognized Avatar」的縮寫，中文翻譯就是全球認證的大頭貼，這個網站致力於提供大頭貼對應的服務。   當你在註冊一些使用此服務的網站的時候，例如GitHub、Slack、Quip等，你會發現你還沒上傳頭像，但你的頭像在註冊完成後，就自動出現在該網站中，這是因為你在gravatar註冊的頭像可以直接被存取來使用。每當你註冊帳號或登錄，只要填上Email就可以自動顯示大頭貼。   還記得當初是因為註冊了worldpress才接觸到這個網站，後來發現幾乎每個國外網站都會自動出現我的頭像，據說有50~60%的worldpress使用者擁有gravatar。   如果你的網站中，想要放上使用者頭像，就不能缺少這個功能   安裝gem   gravatar_image_tag   gem 'gravatar_image_tag'   記得重開rails s   使用方式   簡單輸出image tag   &lt;%= gravatar_image_tag('xxx@mail.com') %&gt; &lt;%= gravatar_image_tag('xxx@mail.com', :alt =&gt; 'Github Default Gravatar', :gravatar =&gt; { :size =&gt; 20, :default =&gt; 'https://assets.github.com/images/gravatars/gravatar-140.png' }) %&gt;   直接輸出url   &lt;%= gravatar_image_url('xxx@mail.com', filetype: :png, rating: 'pg', size: 15, secure:false ) %&gt;   可以調整的初始值   ## [path] config/initializers/gravatar_image_tag.rb GravatarImageTag.configure do |config|   config.default_image           = nil   ## 預設頭像，你可以自訂，否則會以此當預設值： [ 'http://example.com/images/default_gravitar.jpg', :identicon, :monsterid, :wavatar, 404 ].   config.filetype                = nil   ## 可自訂檔案的格式 ['gif', 'jpg' or 'png']. 預設是png   config.include_size_attributes = true  ## 寬高是否由gravatar定義(就是下方的size)   config.rating                  = nil   ## 設定等級['G', 'PG', 'R', 'X']. 預設是 G   config.size                    = nil   ## 圖片大小 (長寬像素：1..512). 預設是80， 就是 80px * 80px   config.secure                  = false ## Set this to true if you require secure images on your pages. end   效果   沒使用  使用（預設圖像）  使用 (依照email讀取頭像)    參考      https://github.com/mdeering/gravatar_image_tag   http://euri.ca/2013/how-many-people-use-gravatar/  ","categories": [],
        "tags": [],
        "url": "/gem-gravatar-avatar/",
        "teaser": null
      },{
        "title": "[Stock] 新上市股票?櫃買?集中?",
        "excerpt":"參考     http://www.cmoney.tw/notes/note-detail.aspx?nid=7762   https://tw.answers.yahoo.com/question/index?qid=20100129000010KK02595  ","categories": [],
        "tags": [],
        "url": "/stock-ipo-cabinet-set/",
        "teaser": null
      },{
        "title": "[Rails] 拿掉CoffeeScript改用js",
        "excerpt":"步驟      只要把 .coffee 檔改為 .js 即可   可以在 application.rb 中加入下列文字，則可在generate的時候預設產生js檔   config.generators.javascript_engine :js   參考      http://stackoverflow.com/questions/8722195/how-can-i-completely-disable-coffeescript-in-a-rails-3-1-app  ","categories": [],
        "tags": [],
        "url": "/rails-remove-coffeescript-using-js/",
        "teaser": null
      },{
        "title": "[Rails] 隨機產生字串",
        "excerpt":"使用方式   隨機產生8碼小寫a-z0-9   [*('a'..'z'),*('0'..'9')].shuffle[0,8].join   參考      http://stackoverflow.com/questions/88311/how-best-to-generate-a-random-string-in-ruby  ","categories": [],
        "tags": [],
        "url": "/rails-random-random-number/",
        "teaser": null
      },{
        "title": "[Rails] Devise i18n 方式",
        "excerpt":"方便的Gem   devise-i18n   參考      https://ruby-china.org/topics/2899   https://ihower.tw/rails4/i18n.html   https://github.com/tigrish/devise-i18n  ","categories": [],
        "tags": [],
        "url": "/rails-devise-i18n/",
        "teaser": null
      },{
        "title": "[Rails] 頁面瀏覽計次",
        "excerpt":"舉例   頁面瀏覽計次，這邊以文章(post)舉例 例如在post中加入view_count當計次的欄位   rails g migration add_view_count_to_posts view_count:integer rake db:migrate   第一種方法、簡易寫法   可以使用increment   他的原始寫法如下，第一個變數是丟入欄位名稱，第二個參數丟每次增加的值   # [path] activerecord/lib/active_record/persistence.rb, line 310 def increment(attribute, by = 1)   self[attribute] ||= 0   self[attribute] += by   self end   使用這個就可以直接增加了   def show   @post = Post.find(params[:id])   @post.increment!(:view_count) end   第二種方法、使用Gem (考量IP訪問限制等問題)   impressionist   參考      https://ruby-china.org/topics/8484   http://apidock.com/rails/ActiveRecord/Persistence/increment   https://github.com/charlotte-ruby/impressionist  ","categories": [],
        "tags": [],
        "url": "/rails-page-views-total/",
        "teaser": null
      },{
        "title": "[Rails] devise如何在create user後再做其他事情",
        "excerpt":"範例   今天有devise生成的User，如果建立user後想要自動再建立對應的payment，該怎麼施作。   shell   rails g devise:controllers users   config/routes.rb   devise_for :users, controllers: { registrations: \"users/registrations\" }   建立app/controllers/users/registrations_controller.rb   class Users::RegistrationsController &lt; Devise::RegistrationsController   after_action :create_default_payment, only: :create    private    def create_default_payment     Payment.create_default(@user) if @user.persisted?   end end   參考      http://stackoverflow.com/questions/6658351/devise-after-create-hook  ","categories": [],
        "tags": [],
        "url": "/rails-how-to-devise-after-create-callback/",
        "teaser": null
      },{
        "title": "[Ubuntu] SSH安全機制觀念",
        "excerpt":"安全機制      另建一個新帳號放入sudo群組，將root關閉   使用ssh key登入，並取消密碼登入   不使用預設的ssh port   金鑰解釋   金鑰 = 公鑰 + 私鑰 每次執行$ ssh-keygen時，會產生一組金鑰（公鑰＋私鑰） 公鑰: ~/.ssh/id_rsa.pub 私鑰: ~/.ssh/id_rsa   SSH的連線行為   伺服器有一組金鑰 使用者有一組金鑰   雙方把各自的公鑰交出來作為驗證之用   伺服器傳資料：拿使用者公鑰加密後送出。使用者接收後，用使用者的私鑰解密 使用者傳資料：拿伺服器公鑰加密後送出。伺服器接收後，用伺服器的私鑰解密   參考      Set Up Sudo and SSH Keys on Ubuntu 14.04   How to Use the Ruby on Rails One-Click Application on DigitalOcean   鳥哥ssh–不用密碼登入參考鳥哥才成功   可以建虛擬的server名稱  ","categories": [],
        "tags": [],
        "url": "/server-ssh-and-account-settings/",
        "teaser": null
      },{
        "title": "[Git] 建立 git server",
        "excerpt":"參考     https://blog.gtwang.org/linux/linux-git-server-using-ssh/   https://ihower.tw/rails4/deployment.html  ","categories": [],
        "tags": [],
        "url": "/743882/",
        "teaser": null
      },{
        "title": "[Nginx] Virtual Host 設定方式",
        "excerpt":"參考     https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts   https://blog.toright.com/posts/4355/nginx-virtual-host-%E8%A8%AD%E5%AE%9A%E6%95%99%E5%AD%B8.html  ","categories": [],
        "tags": [],
        "url": "/nginx-virtual-host-setting/",
        "teaser": null
      },{
        "title": "[Vue.js] 結合Rails建立簡易CRUD",
        "excerpt":"1. 首先先建立一個vue101的專案   rails new vue101 -T   2. 加入vue套件 (這步驟可以改用現成的gem vuejs-rails)           把vue.js、vue-resource.js放進/vendor/assets/javascript/中 (vue-resource是Vue處理JSONP web requests的plugin，這邊的範例需要用到)            把他們require進來       // [path] app/assets/javascript/application.js //= require vue //= require vue-resource   3. 拿掉turbolinks這個gem (會跟vue衝到)      其實只要從首頁拿掉他的載入參數即可   &lt;%= javascript_include_tag 'application' %&gt;      並且要把這行移至&lt;/body&gt;前 (放在head是無法work的)   4. 參考vue官網的todolist範例，這邊也使用rails scaffold建立一個todolist來對照           vue官網的Todo範例 點我看範例            建立一個Todo的scaffold，有一個text的欄位       rails g scaffold Todo text:string rake db:migrate   -方便測試，這邊把route加到首頁   # [path] route.rb   root 'todo#index'   resources :todos   5. 改用js取代coffee      因為用js比較方便，所以…就換掉吧 (可以參考這篇)   # [path] config/applicatioin.rb config.generators.javascript_engine :js   6. 把Vue範例部分放進來      把網頁部分放到post的index.html.erb下方   &lt;!-- [path] app/views/todos/index.html.erb --&gt; (...上略) &lt;hr&gt; &lt;div id=\"app\"&gt;   &lt;input v-model=\"newTodo\" v-on:keyup.enter=\"addTodo\"&gt;   &lt;ul&gt;     &lt;li v-for=\"todo in todos\"&gt;       &lt;span&gt;&lt;/span&gt;       &lt;button v-on:click=\"removeTodo($index)\"&gt;X&lt;/button&gt;     &lt;/li&gt;   &lt;/ul&gt; &lt;/div&gt;      把js部分放到對應的post.js   // [path] app/assets/javascripts/todos.js new Vue({   el: '#app',   data: {     newTodo: '',     todos: [       { text: 'Add some todos' }     ]   },   methods: {     addTodo: function () {       var text = this.newTodo.trim()       if (text) {         this.todos.push({ text: text })         this.newTodo = ''       }     },     removeTodo: function (index) {       this.todos.splice(index, 1)     }   } })      可以先確認一下Vue部分有沒有work   7.CRUD實作 - 前置      這邊需要做一個前置動作，因為rails會有csrf taken的機制，因此再送出表單時需要特別在header加入token，這邊直接統一加在application.js中，之後就不用分別在每次的request加入了   // [path] app/assets/javascripts/application.js Vue.http.headers.common['X-CSRF-TOKEN'] = $('meta[name=\"csrf-token\"]').attr('content');   8.CRUD實作 - 清單頁      先新增一個抓todo清單的method: fetchTodos（隨便命名的）   並且再插入一個created 執行fetchTodos (至於為什麼是created，可以參考官網說明instance lifecycle(https://vuejs.org/guide/instance.html#Instance-Lifecycle))   // [path] app/assets/javascripts/todos.js new Vue({ (...略)   created: function() {       this.fetchTodos();   },   methods: {     fetchTodos: function(){       this.$http.get('posts').then(function(response){         this.todos = response.data;       });     }, (...略)      可以看到$http.get('todos')，表示用get方式送至http://localhost:3000/todos/並回傳結果到response，執行function(response){}中的項目   $http用法可以參考vue-resource的說明   所以現在我們知道，要到todo#index中，寫回傳js會做的事情，這邊將@todos以json方式丟出 (其實不寫也可以他會自動腦補@todo是要回傳的值，如果今天要回傳@list就一定要寫)   # [path] app/controllers/todos_controller.rb def index  @todos = Todo.all      respond_to do |format|       format.html       format.json { render json: @todos }     end end      因此在response.data中，就可以收到   9.CRUD實作 - 新增      這邊將新增做調整，加入ajax回寫   // [path] app/assets/javascripts/todos.js (...略)     addTodo: function () {       var text = this.newTodo.trim()       if (text) {         this.$http.post('posts', {title: title}).then(function(response){           this.todos.push({ title: title, id: response.data.id })           this.newTodo = ''         });       }     }, (...略)   10.CRUD實作 - 刪除      刪除比較麻煩一點，因為後端要對應id，但是前端splice是要看index，因此我調整為兩個參數傳入   // [path] app/assets/javascripts/todos.js (...略)     removeTodo: function (index, todo) {       this.$http.delete('todos/'+todo.id).then(function(response){         this.todos.splice(index, 1)       });     } (...略)      因為改兩個參數傳入，template也要同步調整   &lt;!-- [path] app/views/todos/index.html.erb --&gt;     &lt;li v-for=\"todo in todos\"&gt;       &lt;span&gt;&lt;/span&gt;       &lt;button v-on:click=\"removeTodo($index, todo)\"&gt;X&lt;/button&gt;     &lt;/li&gt;   11.CRUD實作 - 編輯      接下來就開始亂寫了   直接看github吧 Vue101   參考      Vue Plugin說明   http://hsuancheng.net/programming/2016/05/17/vue-js-on-rails/  ","categories": ["Vue"],
        "tags": ["vue","guide"],
        "url": "/vue/vue-to-develop-a-simple-crud/",
        "teaser": null
      },{
        "title": "[Rails] Turbolinks 使用 jQuery 解法",
        "excerpt":"使用方式   var ready; ready = function() {   //裡面放jQuery觸發動作   $(\"#foo\").on(\"click\", function(event) {     console.log(\"link clicked\");   });  };  $(document).ready(ready); $(document).on(\"page:load\", ready);   參考      http://stackoverflow.com/questions/21602996/rails-jquery-onclick-event-not-attaching  ","categories": [],
        "tags": [],
        "url": "/rails-turbolinks-jquery-method/",
        "teaser": null
      },{
        "title": "[Rails] 抓文章上一筆、下一筆快速方式",
        "excerpt":"可以在model內寫   class Post   def next     self.class.where(\"id &gt; ?\", id).first   end    def prev     self.class.where(\"id &lt; ?\", id).last   end  end   controller就可以使用   @post = Post.find(params[:id])  @prev_post = @post.next @next_post = @post.prev   參考      http://stackoverflow.com/questions/25665804/rails-best-way-to-get-previous-and-next-active-record-object  ","categories": [],
        "tags": [],
        "url": "/rails-caught-the-article-one-the-next-fast-way/",
        "teaser": null
      },{
        "title": "[Rails] 使用paperclip多圖片上傳",
        "excerpt":"MODEL   # app/models/market.rb class Market &lt; ActiveRecord::Base   has_many :pictures, dependent: :destroy end  # app/models/picture.rb class Picture &lt; ActiveRecord::Base   belongs_to :market    has_attached_file :image,     path: \":rails_root/public/images/:id/:filename\",     url: \"/images/:id/:filename\"    do_not_validate_attachment_file_type :image end   VIEW   # app/views/markets/_form.html.erb &lt;%= form_for @market, html: { class: 'form-horizontal', multipart: true } do |f| %&gt;   &lt;div class=\"control-group\"&gt;     &lt;%= f.label :pictures, class: 'control-label' %&gt;     &lt;div class=\"controls\"&gt;       &lt;%= file_field_tag \"images[]\", type: :file, multiple: true %&gt;     &lt;/div&gt;   &lt;/div&gt;    &lt;div class=\"form-actions\"&gt;     &lt;%= f.submit nil, class: 'btn btn-primary' %&gt;     &lt;%= link_to t('.cancel', default: t(\"helpers.links.cancel\")),                 galleries_path, class: 'btn btn-mini' %&gt;   &lt;/div&gt; &lt;% end %&gt;   CONTROLLER   #app/controllers/markets_controller.rb def create   @market = Market.new(market_params)    respond_to do |format|     if @market.save        if params[:images]         params[:images].each { |image|           @market.pictures.create(image: image)         }       end        format.html { redirect_to @market, notice: 'Market was successfully created.' }       format.json { render json: @market, status: :created, location: @market }     else       format.html { render action: \"new\" }       format.json { render json: @market.errors, status: :unprocessable_entity }     end   end end   參考      http://stackoverflow.com/questions/34110469/how-to-upload-multiple-image-in-rails-4-using-paperclip  ","categories": [],
        "tags": [],
        "url": "/rails-using-a-paperclip-image-upload/",
        "teaser": null
      },{
        "title": "[Rails] 簡易Model年月區間篩選方法",
        "excerpt":"MODEL   scope :with_year_and_month, -&gt;(year, month) {   date = DateTime.new(year,month)   where(created_at: date...date.next_month) }  # =&gt; created_at &gt;= '2015-02-01 00:00:00' AND created_at &lt; '2015-03-01 00:00:00'   參考      http://stackoverflow.com/questions/28642796/selecting-entries-with-a-specific-year-and-month-from-a-rails-database  ","categories": [],
        "tags": [],
        "url": "/rails-get-year-month-date-range-solutions/",
        "teaser": null
      },{
        "title": "[Rails] 日期時間顯示方式",
        "excerpt":"## [path] Date db:‘%Y-%m-%d’   2008-08-20 long_ordinal:‘&amp;proc’      August 20th, 2008 long:‘%B %e, %Y’  August 20, 2008 rfc822:‘%e %b %Y’   20 Aug 2008 number:‘%Y%m%d’     20080820 short:‘%e %b’      20 Aug   ## [path] DateTime db:‘%Y-%m-%d’   2008-08-20 16:56:21 long_ordinal:‘&amp;proc’      August 20th, 2008 16:56 long:‘%B %e, %Y’  August 20, 2008 16:56 rfc822:‘%e %b %Y’   Wed, 20 Aug 2008 16:56:21 -0600 number:‘%Y%m%d’     20080820165621 short:‘%e %b’      20 Aug 16:56   ## [path] Time db:‘%Y-%m-%d %H:%M:%S’         2008-08-20 16:56:21 long_ordinal:‘&amp;proc’           August 20th, 2008 16:56 long:‘%B %d, %Y %H:%M’           August 20, 2008 16:56 rfc822:‘%a, %d %b %Y %H:%M:%S %z’  Wed, 20 Aug 2008 16:56:21 -0600 short:‘%d %b %H:%M’               20 Aug 16:56 number:‘%Y%m%d%H%M%S’              20080820165621 time:‘%H:%M’                     16:56   for example:   News.to_s(:db) News.created_at.strftime(\"%B %d, %Y %H:%M\")   參考      http://stackoverflow.com/questions/3042801/transforming-datetime-into-month-day-and-year  ","categories": [],
        "tags": [],
        "url": "/rails-date-time-display/",
        "teaser": null
      },{
        "title": "[Rails] Devise如何自訂Layout",
        "excerpt":"有三種方式      在 DeviseController 定義layout   在 ApplicationController 定義layout   在 config (config/application.rb) 定義layout (推薦此種)   第一種   需要自己寫一個User::RegistrationsController來override   class User::RegistrationsController &lt; Devise::RegistrationsController   layout 'dashboard', only: [:edit]    def edit     super   end end   第二種   用判斷的方式處理   class ApplicationController &lt; ActionController::Base   layout :layout_by_resource    protected    def layout_by_resource     if devise_controller?       \"layout_name_for_devise\"     else       \"application\"     end   end end   第三種 (個人認為這種最方便使用)   這段要放在end之後，其實原本應該放application.rb，這邊是為了把devise統一放在一起   ## [path] config/initializers/devise.rb Rails.application.config.to_prepare do   Devise::SessionsController.layout proc { |controller| user_signed_in? ? \"admin\" : \"application\" }   Devise::RegistrationsController.layout proc { |controller| user_signed_in? ? \"admin\" : \"application\" }   Devise::ConfirmationsController.layout \"admin\"   Devise::UnlocksController.layout \"admin\"   Devise::PasswordsController.layout \"admin\" end   參考      https://github.com/plataformatec/devise/wiki/How-To:-Create-custom-layouts  ","categories": [],
        "tags": [],
        "url": "/rails-devise-how-to-customize-layout/",
        "teaser": null
      },{
        "title": "[Rails] Devise 拿掉註冊方式",
        "excerpt":"方式1   # [path] route.rb   devise_for :users, :skip =&gt; [:registrations]   #拿掉registrations不只會拿掉註冊，還會拿掉編輯，所以下面要再手動加回來   as :user do     get 'users/edit' =&gt; 'devise/registrations#edit', :as =&gt; 'edit_user_registration'     put 'users' =&gt; 'devise/registrations#update', :as =&gt; 'user_registration'   end   方式２. override   # [path] app/controllers/registrations_controller.rb class RegistrationsController &lt; Devise::RegistrationsController   def new     flash[:info] = '目前不開放註冊'     redirect_to root_path   end    def create     flash[:info] = '目前不開放註冊'     redirect_to root_path   end end   # [path] route.rb   if Rails.env.production?     devise_for :users, :controllers =&gt; { :registrations =&gt; \"registrations\" }    else     devise_for :users   end   備註      registrations的hash代表我要override的controller   可以到gem裡面看哪些可以override   參考      第一種方式   第二種方式   可override的controller  ","categories": [],
        "tags": [],
        "url": "/rails-devise-off-registration/",
        "teaser": null
      },{
        "title": "[Rails] ElastichSearch全文檢索在rails中使用分析",
        "excerpt":"ElastichSearch 在 rails 中使用分析   GEM   ElastichSearch-rails   原理   ElastichSearch-rails的原理，是先把你指定的model中的資料轉成json格式，再做全文檢索(基本上就是純文字比對，所以速度比關聯式資料庫快很多)，待找到資料後，再回傳這些資料的primary key給原本的model去做where的搜尋，所以其實最後還是會用到where，只是是直接指定id去找，比用like快多了。   步驟比較   下列是步驟的簡易比較表格，可以發現 ElastichSearch 就是拉出來處理的意思。                  Step       ElastichSearch       Model.where()                       1.       將Model資料轉json檔       -                 2.       以json檔做全文檢索(純文字比對)       -                 3.       回傳給找到的id1、id2…       -                 4.       Model.where( xxx in(‘id1’, ‘id2’..))       Model.where( yyy like “關鍵字%” )           分析   看出來了嗎，看起來各有利弊，接下來就是『前置步驟時間』與『IN和LIKE搜尋差異時間』的拉鋸戰。                  #       ElastichSearch       Model.where()                       1.       有前置步驟(step.123)       無前置步驟  (((勝!)))                 2.       用 “IN” 搜尋 (((勝!)))       用 “LIKE” 搜尋           結論   因為這邊已知，關聯式資料庫，在資料量龐大時，LIKE效率極差無比，因此可以做出以下大致結論。   資料量大時，應採用: ElastichSearch  通常資料量很大的情況下，LIKE 非常沒效率，1、2、3 步驟的時間相對來說可以忽略，所以採取 ElastichSearch 方案。   資料量小時，應採用: Model.where()  通常資料量不大的情況下，LIKE 速度也不會差到哪裡去，那麼使用 ElastichSearch 無疑是脫褲子放屁，不只浪費記憶體、還增加程式維護量。   參考      gem   ElastichSearch權威指南  ","categories": [],
        "tags": [],
        "url": "/rails-analysis-of-elastichsearch-use-in-rails/",
        "teaser": null
      },{
        "title": "[Rails] 5種使用Front-End Assets的方式",
        "excerpt":"   推薦第5種(Rails-Assets.org)，很方便    1. 直接下載source   從該網頁直接下載code，並把他放置到/vendor/assets/目錄中，手動將他include進app/assets中。 這是一種最簡單直覺的方式，假設來源檔只有單檔，可以簡易的include，那麼使用這個方法其實就可以。   2. 使用gem下載   通常好用的前端套件，很容易找到方便易用的gem，只要加入gemfile，在bundle install後即可使用。   3. 使用Bower下載   Bower是一套管理前端網站套件的工具，假設找不到滿意的gem，那麼可以考慮直接由Bower去下載。 使用方式參考如下：      Guide 1   Guide 2   4. 使用gem “Bower-Rails”下載   還有直接包成gem的Bower，設定好後他可以把bower的套件放到bowerfile中，使用方式可以參考bower-rails   5. 使用Rails-Assets.org下載 （推薦！！）   這個方式很簡單又直覺，他直接把bower轉成gem讓你下載來使用 使用方式:      先上 https://rails-assets.org 找到你想要的bower套件   在gemfile中，加入gem 'rails-assets-BOWER_PACKAGE_NAME', source 'https://rails-assets.org'   bundle install   簡單的說，把bower套件轉成gem，只要用rails-assets-當前置，後面接上你的bower套件名稱就可以了(通常是啦!)   參考      https://www.codefellows.org/blog/5-ways-to-manage-front-end-assets-in-rails   https://rails-assets.org  ","categories": [],
        "tags": [],
        "url": "/rails-5-ways-to-use-front-end-assets/",
        "teaser": null
      },{
        "title": "[Ubuntu] 16.04 安裝問題",
        "excerpt":"前言   目前 Ubuntu 最新版本已經於 2016 年 04 月發表，來到了 16.04 版，而且是 LTS 版本，身為 Ubuntu 愛用者，一定要來嘗(ㄘㄞˇ)鮮(ㄌㄟˊ)一下啦！！！   1.中文輸入法問題   似乎從ibus換到fcitx，總之安裝時雖然選了中文，但一開始卻沒注音(新酷音chewing)可以用QQ 先去『系統設定值』&gt;『語言支援』點進去，它就會提示你要安裝了，登出再登入即可。       1.新酷音圖片也太醜了。 2.不過換成 fcitx 後，atom 就不會打不出中文了    2. 無法點開deb安裝第三方套件   下載下來的 deb 全都不能用，想裝個 Chrome 都不行，令人汗顏 (指令執行好像可以，直接點開不行) 後來查到有個叫做 gdebi 的套件安裝軟體可以幫你安裝第三方套件，終於得救…   使用方法，先打開 terminal 安裝 gdebi   sudo apt install gdebi   之後就用 gdebi 軟體安裝即可  ","categories": [],
        "tags": [],
        "url": "/ubuntu-1604-installation-problems/",
        "teaser": null
      },{
        "title": "[Rails] google map使用方式",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 5.0.0    前言   此專案簡易介紹google map座標及網頁顯示的產生。主要功能如下：      可以只打地址(address欄位)，存檔時會自動產生經緯度   清單上的地址，分別以marker列在地圖上   點選marker可以顯示地址   相關gem      Google-Maps-for-Rails - 快速建立gmap及產生對應json的工具   geocoder - 快速轉換地址和位置座標的工具   bootstrap-generators - 簡易美化畫面(不使用也可以)   步驟   １）把gem全部加入並bundle   gem 'bootstrap-generators', '~&gt; 3.3.4' gem 'gmaps4rails' gem 'geocoder'   ２）安裝bootstrap-generators（需要再重開rails s或執行spring stop，頁面才會生效)   rails generate bootstrap:install   ３）建立一個名為gmap的scaffold，並去route把首頁指過去   rails g scaffold gmap latitude:float longitude:float address   root 'gmap#index'   ４）安裝Google-Maps-for-Rails   gmap (注意[your API key]要到google api申請一組map用的並填上自己的API key)   &lt;!-- [path] application.html.erb --&gt; &lt;script src=\"//maps.google.com/maps/api/js?v=3.23&amp;key=[your API key]\"&gt;&lt;/script&gt; &lt;script src=\"//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js\"&gt;&lt;/script&gt; &lt;script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'&gt;&lt;/script&gt; &lt;!-- only if you need custom infoboxes --&gt;   須使用 undersore.js (可至http://underscorejs.org/ 下載) 把undersore-min放在 vendor/assets/javascripts/underscore-min.js   javascript   // [path] application.js //= require underscore //= require gmaps/google   在要顯示的網頁最下方加入   &lt;!-- [path] /app/views/gmaps/index.html.erb --&gt; &lt;div id=\"map\" style=\"width:100%;height:400px\"&gt;地圖預留&lt;/div&gt; &lt;script type=\"text/javascript\"&gt;   handler = Gmaps.build('Google');   handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){     markers = handler.addMarkers(&lt;%= raw @hash.to_json %&gt;);     handler.bounds.extendWith(markers);     handler.fitMapToBounds();   }); &lt;/script&gt;   ５）安裝geocoder   # [path] gmap.rb geocoded_by :address        #從address欄位取出地址 after_validation :geocode   #將取出的地址自動轉為經緯度分別存在 latitude、longitude 欄位   ６）設定產生的json   # [path] gmaps_controller.rb def index    @gmaps = Gmap.all    @hash = Gmaps4rails.build_markers(@gmaps) do |gmap, marker|      marker.lat gmap.latitude      marker.lng gmap.longitude      marker.infowindow gmap.address   end end   ７）打完收工，成品如下      參考      https://www.youtube.com/watch?v=oi3yxYs8Y4Q   Google MAP API   Gmap4rails  ","categories": [],
        "tags": [],
        "url": "/rails-google-map-usage/",
        "teaser": null
      },{
        "title": "[Rails] Amazon MWS API 使用方式",
        "excerpt":"參考     https://github.com/hakanensari/peddler  ","categories": [],
        "tags": [],
        "url": "/rails-amazon-mws-api-usage/",
        "teaser": null
      },{
        "title": "[Rails] eBay Trading API 使用方式",
        "excerpt":"參考     https://github.com/bjjb/ebayr  ","categories": [],
        "tags": [],
        "url": "/rails-ebay-trading-api-usage/",
        "teaser": null
      },{
        "title": "[Rails] 簡易行事曆",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 5.0.0    前言   本專案簡易建立月份行事曆，並有以下功能：      有bootstrap-datapicker可以選擇   有月份清單可瀏覽   相關gem   gem 'bootstrap-generators', '~&gt; 3.3.4' gem 'record_tag_helper', '~&gt; 1.0'    步驟      安裝gem   bundle install rails generate bootstrap:install spring stop      產生scaffold   rails g scaffold article name publilshed_on:date content:text rails db:migrate      用bootstrap-datepicker替換原本日期選項      到bootstrap-datepicker下載來將asset掛到系統   找到publilshed_on替換為以下文字   &lt;!-- [path] app/views/articles/_form.html.erb --&gt; ...   &lt;div class=\"form-group\"&gt;     &lt;%= f.label :publilshed_on, class: \"col-sm-2 control-label\" %&gt;     &lt;div class=\"col-sm-10\"&gt;       &lt;div class=\"input-group date\"&gt;         &lt;%= f.text_field :publilshed_on, class: \"form-control\" %&gt;         &lt;span class=\"input-group-addon\"&gt;&lt;i class=\"glyphicon glyphicon-th\"&gt;&lt;/i&gt;&lt;/span&gt;       &lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt;  ...      並在最下方加入js   &lt;!-- [path] app/views/articles/_form.html.erb --&gt;  &lt;script type=\"text/javascript\"&gt; $('.input-group.date').datepicker({     format: \"yyyy-mm-dd\",     language: \"zh-TW\",     autoclose: true,     todayHighlight: true,     toggleActive: true }); &lt;/script&gt;      加入首頁的行事曆畫面      加入helper   ## [path] app/helpers/calendar_helper.rb module CalendarHelper   def calendar(date = Date.today, &amp;block)     Calendar.new(self, date, block).table   end   class Calendar &lt; Struct.new(:view, :date, :callback)     HEADER = %w[Sunday Monday Tuesday Wednesday Thursday Friday Saturday]     START_DAY = :sunday     delegate :content_tag, to: :view     def table       content_tag :table, class: \"calendar\" do         header + week_rows       end     end     def header       content_tag :tr do         HEADER.map { |day| content_tag :th, day }.join.html_safe       end     end     def week_rows       weeks.map do |week|         content_tag :tr do           week.map { |day| day_cell(day) }.join.html_safe         end       end.join.html_safe     end     def day_cell(day)       content_tag :td, view.capture(day, &amp;callback), class: day_classes(day)     end     def day_classes(day)       classes = []       classes &lt;&lt; \"today\" if day == Date.today       classes &lt;&lt; \"notmonth\" if day.month != date.month       classes.empty? ? nil : classes.join(\" \")     end     def weeks       first = date.beginning_of_month.beginning_of_week(START_DAY)       last = date.end_of_month.end_of_week(START_DAY)       (first..last).to_a.in_groups_of(7)     end   end end      調整controller   ## [path] app/controllers/articles_controller.rb @articles = Article.all @articles_by_date = @articles.group_by {|i| i.publilshed_on.to_date} @date = params[:date] ? Date.parse(params[:date]) : Date.today      頁面下方加入行事曆   &lt;!-- [path] app/views/articles/index.html.erb --&gt; ... &lt;div&gt;   &lt;h1&gt;Articles&lt;/h1&gt;   &lt;div id=\"articles\"&gt;     &lt;h2 id=\"month\"&gt;       &lt;%= link_to \"&lt;\", date: @date.prev_month %&gt;       &lt;%= @date.strftime(\"%B %Y\") %&gt;       &lt;%= link_to \"&gt;\", date: @date.next_month %&gt;     &lt;/h2&gt;     &lt;%= calendar @date do |date| %&gt;       &lt;%= date.day %&gt;       &lt;% if @articles_by_date[date] %&gt;         &lt;ul&gt;           &lt;% @articles_by_date[date].each do |article| %&gt;             &lt;li&gt;&lt;%= link_to article.name, article %&gt;&lt;/li&gt;           &lt;% end %&gt;         &lt;/ul&gt;       &lt;% end %&gt;     &lt;% end %&gt;   &lt;/div&gt; &lt;/div&gt;   完成      參考      Railscasts PRO #213 Calendars   bootstrap-datepicker   solution from stackoverflow  ","categories": [],
        "tags": [],
        "url": "/rails-a-simple-calendar/",
        "teaser": null
      },{
        "title": "[Rails] Devise 改使用 username 或 email 登入",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 5.0.0    建立 Username   rails generate migration add_username_to_users username:string:uniq rails db:migrate   設定 Strong parameters   # [path] application_controller.rb class ApplicationController &lt; ActionController::Base   before_action :configure_permitted_parameters, if: :devise_controller?    protected    def configure_permitted_parameters     added_attrs = [:username, :email, :password, :password_confirmation, :remember_me]     devise_parameter_sanitizer.permit :sign_up, keys: added_attrs     devise_parameter_sanitizer.permit :account_update, keys: added_attrs   end end   在 User 裡面建立一個虛擬屬性: login   # [path] User.rb   def login=(login)     @login = login   end    def login     @login || self.username || self.email   end   告訴 Devise 要使用 :login 當作 authentication_keys   # [path] config/initializers/devise.rb config.authentication_keys = [ :login ]   Override Devise 的 find_for_database_authentication method   # [path] User.rb     def self.find_for_database_authentication(warden_conditions)       conditions = warden_conditions.dup       if login = conditions.delete(:login)         where(conditions.to_h).where([\"lower(username) = :value OR lower(email) = :value\", { :value =&gt; login.downcase }]).first       elsif conditions.has_key?(:username) || conditions.has_key?(:email)         where(conditions.to_h).first       end     end   加入驗證機制   # [path] User.rb   validates_format_of :username, with: /^[a-zA-Z0-9_\\.]*$/, :multiline =&gt; true   validates :username, :presence =&gt; true, :uniqueness =&gt; { :case_sensitive =&gt; false }   產生View畫面   第一種方式：（路徑會在/view/devise/之下)   rails g devise:views    第二種方式：（路徑會在/view/user/之下，但要去devise調整scoped_views參數才會生效)   rails g devise:views user   # [path] config/initializers/devise.rb config.scoped_views = true   調整 View 畫面   # [path] sessions/new.html.erb &lt;div class=\"form-group\"&gt;   &lt;%= f.label :login, \"Username\" %&gt;&lt;br /&gt;   &lt;%= f.text_field :login, autofocus: true, class: \"form-control\",  placeholder: \"\" %&gt; &lt;/div&gt;   # [path] registrations/new.html.erb &lt;div class=\"form-group\"&gt;   &lt;%= f.label :username %&gt;&lt;br /&gt;   &lt;%= f.text_field :username, autofocus: true  %&gt; &lt;/div&gt;   # [path] registrations/edit.html.erb &lt;div class=\"form-group\"&gt;   &lt;%= f.label :username %&gt;&lt;br /&gt;   &lt;%= f.text_field :username, autofocus: true  %&gt; &lt;/div&gt;   參考      https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address  ","categories": [],
        "tags": [],
        "url": "/rails-devise-modified-login-use-username-or-email/",
        "teaser": null
      },{
        "title": "[Rails] 用 Action Cable 製作簡易聊天室",
        "excerpt":"參考      https://www.youtube.com/watch?v=n0WUjGkDFS0   https://www.youtube.com/watch?v=uETEiQlIvMY   http://nithinbekal.com/posts/rails-action-cable/  ","categories": [],
        "tags": [],
        "url": "/rails-action-cable-making-a-simple-chat-room/",
        "teaser": null
      },{
        "title": "[Rails] 使用 Vagrant 快速 Deploy 至 Linode",
        "excerpt":"   本文使用 Mac OS X EI Capitan 10.11.6 / Ruby 2.3.1 / Rails 5.0.0    前言   本文有以下幾個重點：      安裝相關套件   Vagrant在本機使用   Vagrant發佈至Linode   其他方便工具介紹   安裝相關套件   第一步請先安裝VirtualBox及Vagrant，請參考下面網頁步驟安裝      VirtualBox   Vagrant   接下來再安裝以下兩個Vagrant Plugin   vagrant plugin install vagrant-vbguest vagrant plugin install vagrant-librarian-chef-nochef   使用Vagrant在本機開發專案   先到你的專案目錄下，開始使用vagrant，並安裝Cheffile   vagrant init touch Cheffile   現在目錄下會發現，產生了兩個新檔案：Vagrantfile、Cheffile   我們先設定Cheffile   site \"http://community.opscode.com/api/v1\"  cookbook 'apt' cookbook 'build-essential' cookbook 'mysql', '5.5.3' cookbook 'ruby_build' cookbook 'nodejs' cookbook 'rbenv', git: 'https://github.com/aminin/chef-rbenv' cookbook 'vim'   再設定Vagrantfile   VAGRANTFILE_API_VERSION = \"2\"  Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|   config.vm.box = \"ubuntu/trusty64\"   config.vm.provider :virtualbox do |vb|     vb.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]   end   config.vm.network :forwarded_port, guest: 3000, host: 3000      config.vm.provision :chef_solo do |chef|     chef.cookbooks_path = [\"cookbooks\", \"site-cookbooks\"]      chef.add_recipe \"apt\"     chef.add_recipe \"nodejs\"     chef.add_recipe \"ruby_build\"     chef.add_recipe \"rbenv::user\"     chef.add_recipe \"rbenv::vagrant\"     chef.add_recipe \"vim\"     chef.add_recipe \"mysql::server\"     chef.add_recipe \"mysql::client\"      chef.json = {       rbenv: {         user_installs: [{           user: 'vagrant',           rubies: [\"2.2.1\"],           global: \"2.2.1\",           gems: {             \"2.2.1\" =&gt; [               { name: \"bundler\" }             ]           }         }]       },       mysql: {         server_root_password: ''       }     }   end end   設定完成後即可開始使用，up的指令會把虛擬機架起來， 首次up的時候會下載iso檔，需要等久一點   vagrant up vagrant provision   ssh連至虛擬機   vagrant ssh   補安裝一些東西   rbenv install 2.3.1 rbenv global 2.3.1 gem install bundler    這時候專案目錄會在/vagrant，先到此目錄bundle安裝相關套件   cd /vagrant rbenv rehash bundle rails db:migrate rails s -b 0.0.0.0   這時候可以使用http://localhost:3000/查看   使用Vagrant發佈專案至Linode      gem Vagrant-linode   其他方便工具      rails-dev-box   railsbox   rove   參考      Using Vagrant for Rails Development   Linode Vagrant Provider   Vagrant Linode   railsbox  ","categories": [],
        "tags": [],
        "url": "/rails-use-vagrant-to-quickly-deploy/",
        "teaser": null
      },{
        "title": "[DigitalOcean] 使用 Capistrano Deploy Rails App (一)",
        "excerpt":"   本文使用 Ubuntu 14.04 LTS / Ruby 2.3.0 / Rails 5.0.0    前言   本文將使用 Capistrano Deploy Rails App 至 DigitalOcean VPS上。使用的資料庫及伺服器如下：      MySQL   Nginx   Puma      本文參考kakas的文章 簡化為一鍵安裝版本，若需要請自行察看詳細安裝步驟。    優惠碼 COUPON   (以下兩項不能重複拿，如果第一個沒資格，就用第二個）           免費拿$35鎂 點此(codeanywhere)照步驟做 ，但不保證成功，因為我的帳號已註冊不符合資格無法測試            免費拿$10鎂 點此(DigitalOcean)註冊。這個是推薦連結(你拿$10，我也拿)，請幫助老殘窮       開機器      註冊好並登入後，按 Create Droplet   選 Ubuntu 14.04 x64   選 $10/mo 的機器   地區選新加坡（Singapore）   把你本機的公鑰加到 digital ocean（不一定要做，但建議）            $ cat ~/.ssh/id_rsa.pub 即可查到本機的公鑰           選 1 個 Droplet   設定一個好記的名字   等機器開一下   開完會有機器的IP，先複製起來備用，安裝會用到   完成   安裝步驟      登入伺服器   $ ssh root@xxx.xxx.xxx.xxx # 首次登入會要求驗證加入該server公鑰，請輸入`yes`即可(如果跳出再重連一次）      一鍵安裝   sudo apt-get -y update;sudo apt-get -y upgrade;sudo apt-get -y autoremove;sudo echo \"Asia/Taipei\" &gt; /etc/timezone; sudo dpkg-reconfigure -f noninteractive tzdata;sudo locale-gen zh_TW zh_TW.UTF-8 zh_CN.UTF-8 en_US.UTF-8;sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password 1234';sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password 1234';sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev;sudo apt-get -y install build-essential git-core curl libssl-dev libreadline5 libreadline-gplv2-dev zlib1g zlib1g-dev libmysqlclient-dev libcurl4-openssl-dev libxslt-dev libxml2-dev libffi-dev git;sudo \\curl -sSL https://get.rvm.io | bash;source /etc/profile.d/rvm.sh;rvm install 2.3.0;sudo apt-get -y install imagemagick;sudo apt-get -y install curl git-core nginx;gem install rails -v '5.0.0' -V --no-ri --no-rdoc;gem install bundler -V --no-ri --no-rdoc;      安裝項目          apt-get 站台/套件更新     設定時區 “Asia/Taipei”     安裝語系 zh_TW zh_TW.UTF-8 zh_CN.UTF-8 en_US.UTF-8     安裝mysql 預設帳密root/1234     安裝常用套件(git、ssl、curl..等)     安裝rvm     安裝ruby 2.3.0     安裝rails 5.0.0     安裝 bundler     安裝nginx 最新版 (目前1.4.6)         驗證   $ date # Wed Aug  2 10:05:17 CST 2016 檢查時間(區) $ rvm list # =* ruby-2.3.0 [ x86_64 ] $ ruby -v # ruby 2.3.0p0 $ rails -v # Rails 5.0.0 $ nginx -v # nginx version: nginx/1.4.6 (Ubuntu) $ mysql -u root -p # 輸入預設密碼1234，出現`mysql&gt;`就是成功了，可以輸入`exit`跳出      若驗證有部分項目失敗     可參考kakas的文章 進行部分項目的安裝       至此環境安裝結束      接續下篇 DigitalOcean - 使用 Capistrano Deploy Rails App (二)        參考      kakas/CapistranoDeployTest   (Mini Course) Deploy Rails Project to Linux Server - Growth School   Deploying a Rails App on Ubuntu 14.04 with Capistrano, Nginx, and Puma - DigitalOcean  ","categories": [],
        "tags": [],
        "url": "/digitalocean-using-capistrano-deploy-rails-app-a/",
        "teaser": null
      },{
        "title": "[MySQL] MAC環境MySQL安裝筆記",
        "excerpt":"   本文使用 Mac OS X EI Capitan 10.11.6 / Homebrew 0.9.9    前言   此為MySQL於MAC環境的安裝筆記，本文將使用homebrew安裝MySQL，並大致紀錄如何手動/自動開啟服務   使用homebrew安裝   brew install mysql      安裝完後出現錯誤訊息    Error: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink share/man/man8/mysqld.8 /usr/local/share/man/man8 is not writable.   解決方式   #開啟權限 $ sudo chown -R $(whoami) /usr/local/ #重新link一次 $ brew link mysql   預設root帳號沒密碼，如需要請輸入下列指令   mysql_secure_installation      如出現以下錯誤訊息    Error: Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)   表示需要先把服務on起來mysql.server start再執行動作   然後會有以下囉唆的問題：           VALIDATE PASSWORD PLUGIN can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin? Press y|Y for Yes, any other key for No: Please set the password for root here. New password: Re-enter new password: 總之就是先問你要不要安裝VALIDATE PASSWORD這個套件（可以幫你有效驗證密碼的複雜度，你設定太簡單會提醒你），不想裝可以Enter跳過就好，然後輸入兩次密碼結束第一個回合(問題)            By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) : 是否移除匿名使用者?通常選y            Normally, root should only be allowed to connect from ‘localhost’. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) : 是否關閉root遠端登入？通常選y            By default, MySQL comes with a database named ‘test’ that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? (Press y|Y for Yes, any other key for No) : 是否移除測試資料庫？選y即可            Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) : 是否直接重新讀取權限？選y即可       進入sql指令模式   mysql -uroot   Service手動啟動/關閉方式   mysql.server start mysql.server stop mysql.server restart   利用homwbrew services開機自動啟動/關閉   # 沒加上sudo只是手動啟動 $ brew services start mysql $ brew services stop mysql  # 加上sudo可以在開機自動啟動 $ sudo brew services start mysql $ sudo brew services start mysql  # 查看services清單 $ brew services list      若沒有homebrew service指令，可以輸入以下指令安裝    brew tap homebrew/services   查看 mysql 相關設定值   $ mysqladmin variables -u root -p # =&gt; 可以查到socket位置： /tmp/mysql.sock   參考      brew link錯誤訊息解決方式   Starting and Stopping Background Services with Homebrew  ","categories": [],
        "tags": [],
        "url": "/mysql-mac-environment-to-install-mysql/",
        "teaser": null
      },{
        "title": "[DigitalOcean] 使用 Capistrano Deploy Rails App (二)",
        "excerpt":"   本文使用 Ubuntu 14.04 LTS / Ruby 2.3.0 / Rails 5.0.0       接續上篇 DigitalOcean - 使用 Capistrano Deploy Rails App (一)    前言   續前篇建立Droplet及環境安裝，本文將講解專案如何透過Capistrano Deploy至我們準備好的production環境。 本文重點如下：      Server部分            MySQL 設定       Nginx 設定       Server安全性調整           Host部分（本機）            Capistrano安裝及設定       deploy流程           流程講解   再設定之前，先進行流程的講解， 這邊將主機分為Host(本機)、Git主機(github或bitbucket)、Server主機(production伺服器)來講解   Deply流程      在Host主機，將完成的專案(master branch) push上git主機   使用ssh連到Server主機，將剛剛上傳的master branch從git主機clone或pull下來   再回到Host主機，將yml檔透過ssh丟給Server。(因為有安全性問題，不透過git傳)   最後如果有調整一些設定值，我們還要至server主機重啟http server。      雖然上述流程感覺不難，但是真正操作起來指令也是很繁瑣，秉持『工欲善其事，必先利其器』的原則，我們請出Capistrano這個自動化部署工具，來幫我們處理這些繁複卻一貫的作業。   Capistrano的好處就是在於你只需要一個指令，就可以完成上述deploy的動作，甚至還可以客製化自己想要的指令，並且可以同時開啟多個Deploy狀態，並且同時部署至多台機器。   Server部分設定   請先連線至 ssh root@xxx.xxx.xxx.xxx 再開始以下動作   建立專案用資料庫   $ mysql -u root -p  #=&gt; 輸入密碼1234 mysql &gt; create database YOUR_DATABASE_NAME default character set utf8; mysql &gt; show databases; #=&gt; 確認是否有建立了 mysql &gt; exit   設定 Nginx 的 config symlinks到你的專案   sudo rm /etc/nginx/sites-enabled/default sudo ln -nfs \"/home/deploy/YOUR_PROJECT_NAME/current/config/nginx.conf\" \"/etc/nginx/sites-enabled/YOUR_PROJECT_NAME\"      註：因為nginx.conf裡面有設定會include /etc/nginx/sites-enabled/中所有設定symlinks的檔案，所以我們以後每增加一個project，你都可以多設定一個symlinks來指定一個虛擬伺服器    新增deploy帳號   $ adduser deploy # =&gt;設定密碼，其他資訊都enter跳過即可 $ gpasswd -a deploy sudo # =&gt; 將deploy加入sudo群組   關閉root遠端登入   $ vim /etc/ssh/sshd_config #=&gt; 找到 PermitRootLogin 將yes 改為no  $ service ssh restart   建立server自動git pull需要的金鑰   $ ssh-keygen #=&gt; 建立金鑰 $ cat ~/.ssh/id_rsa.pub #=&gt; 複製公鑰   到 github 或 Bitbucket開一個新專案      github 到 SSH and GPG keys 新增貼上   Bitbucket 到 專案 / Settings / Deployment keys 新增貼上   host部分設定   請輸入exit跳回自己電腦   新增git origin位置，並首次push   git remote add origin git@bitbucket.org:anxgang/kixerp.git git push -u origin --all   設定deploy免輸入密碼登入   執行此指令將本機公鑰複製到伺服器   ssh deploy@xxx.xxx.xxx.xxx 'mkdir -p ~/.ssh;cat &gt;&gt; ~/.ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub   設定Capistrano自動化部署   修改 Gemfile   # [path] gemfile - gem 'sqlite3' + gem 'sqlite3', group: :development  - # gem 'therubyracer', platforms: :ruby + gem 'therubyracer', platforms: :ruby  + group :development do +   gem 'capistrano',         '~&gt; 3.6.0', require: false +   gem 'capistrano-rvm',     '~&gt; 0.1',   require: false +   gem 'capistrano-rails',   '~&gt; 1.1.7', require: false +   gem 'capistrano-bundler', '~&gt; 1.1.4', require: false +   gem 'capistrano3-puma',   '~&gt; 1.2.1', require: false + end  + group :production do +   gem \"mysql2\" + end   $ bundle install $ cap install # =&gt; 會詢問要不要安裝額外的套件，選NO   修改 Capfile   # Load DSL and set up stages require \"capistrano/setup\"  # Include default deployment tasks require \"capistrano/deploy\"  require 'capistrano/rails' require 'capistrano/rvm' require 'capistrano/bundler' require 'capistrano/rails/assets' require 'capistrano/rails/migrations' require 'capistrano/puma'  # Load custom tasks from `lib/capistrano/tasks` if you have any defined Dir.glob(\"lib/capistrano/tasks/*.rake\").each { |r| import r }   覆寫 config/deploy.rb   並設定deploy.rb   # [path] config/deploy.rb # config valid only for current version of Capistrano  set :repo_url,        'git@github.com:YOUR_USERNAME/YOUR_PROJECT_NAME.git' # 改成你的 set :application,     'YOUR_PROJECT_NAME' # 改成你的 appname set :user,            'deploy' # 這個對應到我們剛剛增加的 user: deploy set :puma_threads,    [4, 16] set :puma_workers,    0  # Don't change these unless you know what you're doing set :pty,             true set :use_sudo,        false set :stage,           :production set :deploy_via,      :remote_cache set :deploy_to,       \"/home/#{fetch(:user)}/#{fetch(:application)}\" set :puma_bind,       \"unix://#{shared_path}/tmp/sockets/#{fetch(:application)}-puma.sock\" set :puma_state,      \"#{shared_path}/tmp/pids/puma.state\" set :puma_pid,        \"#{shared_path}/tmp/pids/puma.pid\" set :puma_access_log, \"#{release_path}/log/puma.error.log\" set :puma_error_log,  \"#{release_path}/log/puma.access.log\" set :ssh_options,     { forward_agent: true, user: fetch(:user), keys: %w(~/.ssh/id_rsa.pub) } set :puma_preload_app, true set :puma_worker_timeout, nil set :puma_init_active_record, true  # Change to false when not using ActiveRecord  ## Defaults: # set :scm,           :git # set :branch,        :master # set :format,        :pretty # set :log_level,     :debug # set :keep_releases, 5  ## Linked Files &amp; Directories (Default None): set :linked_files, %w{config/database.yml config/secrets.yml} set :linked_dirs,  %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}  namespace :puma do   desc 'Create Directories for Puma Pids and Socket'   task :make_dirs do     on roles(:app) do       execute \"mkdir #{shared_path}/tmp/sockets -p\"       execute \"mkdir #{shared_path}/tmp/pids -p\"     end   end    before :start, :make_dirs end  namespace :deploy do   desc \"Make sure local git is in sync with remote.\"   task :check_revision do     on roles(:app) do       unless `git rev-parse HEAD` == `git rev-parse origin/master`         puts \"WARNING: HEAD is not the same as origin/master\"         puts \"Run `git push` to sync changes.\"         exit       end     end   end    desc 'Initial Deploy'   task :initial do     on roles(:app) do       before 'deploy:restart', 'puma:start'       invoke 'deploy'     end   end    desc 'Restart application'   task :restart do     on roles(:app), in: :sequence, wait: 5 do       invoke 'puma:restart'     end   end    desc 'Upload to shared/config'   task :upload do     on roles (:app) do       upload! \"config/database.yml\", \"#{shared_path}/config/database.yml\"       upload! \"config/secrets.yml\",  \"#{shared_path}/config/secrets.yml\"     end   end    before :starting,  :check_revision   after  :finishing, :compile_assets   after  :finishing, :cleanup   after  :finishing, :restart end  desc \"Run rake db:seed on a remote server.\" task :seed do   on roles (:app) do     within release_path do       with rails_env: fetch(:rails_env) do        execute :rake, \"db:seed\"       end     end   end end  # ps aux | grep puma    # Get puma pid # kill -s SIGUSR2 pid   # Restart puma # kill -s SIGTERM pid   # Stop puma   修改 config/deploy/production.rb   set :stage, :production set :branch, :master  role :app, %w(deploy@xxx.xxx.xxx.xxx) role :web, %w(deploy@xxx.xxx.xxx.xxx) role :db, %w(deploy@xxx.xxx.xxx.xxx)  set :rails_env, \"production\" set :puma_env, \"production\" set :puma_config_file, \"#{shared_path}/config/puma.rb\" set :puma_conf, \"#{shared_path}/config/puma.rb\"   修改 config/nginx.conf   在專案新增 config/nginx.conf   // [path] config/nginx.conf upstream puma {   server unix:///home/deploy/YOUR_PROJECT_NAME/shared/tmp/sockets/KaohsiungRubbishTruck-puma.sock; }  server {   listen 80 default_server deferred;   # server_name example.com;    root /home/deploy/YOUR_PROJECT_NAME/current/public;   access_log /home/deploy/YOUR_PROJECT_NAME/current/log/nginx.access.log;   error_log /home/deploy/YOUR_PROJECT_NAME/current/log/nginx.error.log info;    location ^~ /assets/ {     gzip_static on;     expires max;     add_header Cache-Control public;   }    try_files $uri/index.html $uri @puma;   location @puma {     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;     proxy_set_header Host $http_host;     proxy_redirect off;      proxy_pass http://puma;   }    error_page 500 502 503 504 /500.html;   client_max_body_size 10M;   keepalive_timeout 10; }   調整 .gitignore   加入以下兩行   # [path] .gitignore /config/database.yml /config/secrets.yml   複製      config/database.yml -&gt; config/database.yml.sample   config/secrets.yml -&gt; config/secrets.yml.sample   刪除      config/database.yml   config/secrets.yml   將剛剛做的修改 commit 起來，push 到遠端   git add . git commit -m \"ready to deploy\" git push origin master   修改 config/database.yml    production: -  &lt;&lt;: *default -  database: db/production.sqlite3 +  adapter: mysql2 +  encoding: utf8 +  database: YOUR_PROJECT_NAME +  pool: 5 +  username: root +  password: 1234 +  socket: /var/run/mysqld/mysqld.sock   修改 config/secrets.yml   -  secret_key_base: &lt;%= ENV[\"SECRET_KEY_BASE\"] %&gt; +  secret_key_base: e4a98dd1063a6765xxxxxxx # 這一串從上面的 test 或是 development 複製過來即可   首次 deploy   $ cap production deploy:check $ cap production deploy:upload #=&gt; 把 database.yml 跟 secrets.yml 丟到 Ubuntu（之後如果有更改也可以這樣丟） $ cap production deploy:initial #=&gt; ssh 登入，重開 nginx：$ sudo service nginx restart $ cap production seed  #=&gt; 有寫seed可以順便丟   其他指令可以這樣查   cap -T      如果用 Capistrano 的時候他還是叫你打密碼， 修正方法如下：    eval `ssh-agent -s` ssh-add ~/.ssh/id_rsa      如果你是用 zsh，請再做以下修改    vi ~/.zshrc   plugins=(git ssh-agent) # 加上這一行   Normal deploy   git commit -m \"commit message\" git push origin master cap production deploy   查看網站是否Deploy成功   http:/xxx.xxx.xxx.xxx/   若失敗的話，可以進入Server查看log   ssh deploy@xxx.xxx.xxx.xxx tail -f /home/deploy/YOUR_PROJECT_NAME/current/log/production.log   參考      kakas/CapistranoDeployTest   (Mini Course) Deploy Rails Project to Linux Server - Growth School   Deploying a Rails App on Ubuntu 14.04 with Capistrano, Nginx, and Puma - DigitalOcean  ","categories": [],
        "tags": [],
        "url": "/digitalocean-using-capistrano-deploy-rails-app-b/",
        "teaser": null
      },{
        "title": "[Rails] find 和 where 的差異",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 5.0.0    前言   今天來探討一下find及where的差異，這邊建立了一個Model Todo 來做測試   實際測試   單筆比較   Todo.find(1) #=&gt; SQL: SELECT  \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]] #=&gt; RETURN: {id: 1, title: \"first\"}   Todo.where(id: 1) #=&gt; SQL: SELECT \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" = ?  [[\"id\", 1]] #=&gt; RETURN: [{id: 1, title: \"first\"}]   Todo.where(id: 1).take #=&gt; SQL: SELECT  \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]] #=&gt; RETURN:  {id: 1, title: \"first\"}    可以看出find單筆抓出來的是object，而where是array，但是加上take也可以取出object   多筆比較   Todo.find(1,2) #=&gt; SQL: SELECT \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" IN (1, 2) #=&gt; RETURN: [{id: 1, title: \"first\"}, {id: 2, title: \"second\"}]  Todo.where(id: [1,2]) #=&gt; SQL: SELECT \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" IN (1, 2) #=&gt; RETURN: [{id: 1, title: \"first\"}, {id: 2, title: \"second\"}]    可以看出多筆都會取得array   無資料比較   Todo.find(3) #=&gt; SQL: SELECT  \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" = ? LIMIT ?  [[\"id\", 3], [\"LIMIT\", 1]] #=&gt; RETURN: ActiveRecord::RecordNotFound: Couldn't find Todo with 'id'=3  Todo.where(id: 3) #=&gt; SQL: SELECT \"todos\".* FROM \"todos\" WHERE \"todos\".\"id\" = ?  [[\"id\", 3]] #=&gt; RETURN:  []    可以看出若find找不到，就會直接報錯，而where是回傳空array   結論      find            依照你輸入的是單筆還是多筆，決定回傳值為單一object或array       查不到資料會報錯           where            不管在任何情況下，皆是以array方式回傳       查不到資料，回傳空array           使用上建議   當你確定只找一筆資料時，使用find，可以比where少打一些字 當不確定是單筆或多筆時，使用where，可以確保取出來都是array，後續資料才好處理   備註   實際上where回傳不是array，而是使用ActiveRecord::Relation建立的object，但它類似array，可以以array來理解   參考      http://stackoverflow.com/questions/9574659/rails-where-vs-find  ","categories": [],
        "tags": [],
        "url": "/rails-find-and-where-differences/",
        "teaser": null
      },{
        "title": "[Rails] 關於 link_to 及 button_to 指定 method 的探討",
        "excerpt":"前言   會有這樣的主題，是因為在寫Rails專案時，通常都是link_to到底，很少用到button_to，因為link_to加上btn的class就長得跟button一模一樣了。   但最近常常遇到一些光怪陸離的事情，例如:      在link_to下了method: :post卻一直用 get送   明明下了method: :delete，偏偏跑去:show   明明在development可以用，到production又不行。   像這些鳥事，絕對不能只有我遇到。   原因確認   爬文的結果發現，遇到link_to指定method的問題要考慮的是：      先檢查在application.js裡面jquery_ujs是否有正常載入   因為這些data-method都是需要靠jquery_ujs去產生，要考慮javascript是否在某個地方有先掛掉   另外，還發現了一件事情，使用button_to就沒問題，只好來驗證一下發生什麼事情   驗證   例如：單純的link_to   &lt;%= link_to(\"home\", root_path) %&gt; &lt;!--  &lt;a href=\"/\"&gt;home&lt;/a&gt; --&gt;   加入 method: :post後   &lt;%= link_to(\"home\", root_path, method: :post) %&gt; &lt;!--  &lt;a rel=\"nofollow\" data-method=\"post\" href=\"/\"&gt;home&lt;/a&gt; --&gt;   link_to：會用data-method也就是javascript( jquery_ujs )方式去post   改用 button_to 後   &lt;%= button_to(\"home\", root_path, method: :post) %&gt; &lt;!-- &lt;form class=\"button_to\" method=\"post\" action=\"/\"&gt;   &lt;input type=\"hidden\" name=\"_method\" value=\"delete\"&gt;   &lt;input type=\"submit\" value=\"home\"&gt;   &lt;input type=\"hidden\" name=\"authenticity_token\" value=\"LXXB5ZeAj7h5Sh3wGhScRplUP3aDc9xI3Czuoyntmx9srorYsoZ6QQdn6jQWIiyS6ZPR+VohNHb9O8z7xsks1g==\"&gt; &lt;/form&gt; --&gt;    button_to：他會產生form搭配hidden欄位用原生方式去post   結論   原生寫法時，我們就儘量不使用javascript寫法， 所以以後遇到單行的post，   就直接把link_to改成button_to吧！   參考      http://stackoverflow.com/questions/4799541/rails-3-method-post-doesnt-work-seems-to-be-get-when-it-should-po   http://stackoverflow.com/questions/18154916/rails-4-link-to-destroy-not-working-in-getting-started-tutorial  ","categories": [],
        "tags": [],
        "url": "/rails-link-to-and-button-to-discussion/",
        "teaser": null
      },{
        "title": "[Linode] Deploy Rails app to Linode by Capistrano ( Ubuntu 16.04/nginx/puma/MySQL/rvm )",
        "excerpt":"   Ubuntu 16.04 / Ruby 2.3.1 / Rails 5.0.0    Create a Linode     plan:   Ubuntu 16.04 LTS Disk        256MB Swap Image       login user:   root 123456   ssh to remote side and build environment   $ ssh root@xxx.xxx.xxx.xxx #=&gt;  Linode &gt; dashboard &gt; remote access   1) update all packages   $ sudo apt-get -y update;sudo apt-get -y upgrade;sudo apt-get -y autoremove;   2) setup time zone   $ sudo dpkg-reconfigure or  $ sudo timedatectl set-timezone Asia/Taipei   3) Generate locales   $ sudo locale-gen zh_TW zh_TW.UTF-8 zh_CN.UTF-8 en_US.UTF-8;   4) install MySQL   setup root pw: 1234     $ sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password 1234';sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password 1234';sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev;   5) install necessary packages   \t$ sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3  autoconf libc6-dev libpcre3-dev curl libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev   6) install rvm &amp; ruby 2.3.1   $ sudo \\curl -sSL https://get.rvm.io | bash;source ~/.rvm/scripts/rvm;rvm install 2.3.1;      if Mac $ sudo \\curl -sSL https://get.rvm.io | bash;source /etc/profile.d/rvm.sh;rvm install 2.3.1;    7) install nginx   $ sudo apt-get -y install nginx;   8) install Rails &amp; bundler   $ gem install rails -v '5.0.0' -V --no-ri --no-rdoc;gem install bundler -V --no-ri --no-rdoc;   check your settings   $ date # Wed Aug  6 10:05:17 CST 2016  $ rvm list # =* ruby-2.3.1  $ ruby -v # ruby 2.3.1  $ rails -v # Rails 5.0.0  $ nginx -v # nginx version: nginx/1.4.6 (Ubuntu)  $ mysql -u root -p # enter pw 1234， there will goes `mysql&gt;`， and you can type `exit` to leave   Create database   1) login   $ mysql -u root -p   2) create database  ( replace YOUR_DATABASE_NAME  )   mysql&gt; create database YOUR_DATABASE_NAME default character set utf8mb4;   3) make a check   mysql&gt; show databases;   setup Nginx symlinks (linked to your project)   1) delete default setting   $ sudo rm /etc/nginx/sites-enabled/default   2) add our symlink  ( replace YOUR_PEOJECT_NAME  )   $ sudo ln -nfs \"/home/deploy/YOUR_PROJECT_NAME/current/config/nginx.conf\" \"/etc/nginx/sites-enabled/YOUR_PROJECT_NAME\"   3) make a check   $ ls -la /etc/nginx/sites-enabled/ # =&gt;lrwxrwxrwx 1 root root 45 Aug  5 12:06 kixERP -&gt; /home/deploy/YOUR_PROJECT_NAME/current/config/nginx.conf    add a deploy user   1) setup your password (other information you can just enter to pass )   $ adduser deploy   2) Add user deploy to group sudo   $ gpasswd -a deploy sudo   close root login   1) find “PremitRootLogin” , change from yes to no   $ vim /etc/ssh/sshd_config   2) restart ssh service   $ service ssh restart   login by user deploy   1) setup ssh-key login   ssh deploy@xxx.xxx.xxx.xxx 'mkdir -p ~/.ssh;cat &gt;&gt; ~/.ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub      If not work..  Maybe you should login first (ssh deploy@xxx.xxx.xxx.xxx) And answer ‘yes’ to add the host fingerprint to the ~/.ssh/known_hosts Then try again..    2) login   ssh deploy@xxx.xxx.xxx.xxx   ssh-key generate   1) generate ssh-key   $ ssh-keygen   2) copy the public key   $ cat ~/.ssh/id_rsa.pub   3) paste the key into your github or bitbucket      github            SSH and GPG keys           Bitbucket  \t - YOUR_PROJECT_NAME / Settings / Deployment keys   Setup Capistrano   1) setup Gemfile     - gem 'sqlite3'   + gem 'sqlite3', group: :development      - # gem 'therubyracer', platforms: :ruby      + gem 'therubyracer', platforms: :ruby      + group :development do   +   gem 'capistrano',         '~&gt; 3.6.0', require: false   +   gem 'capistrano-rvm',     '~&gt; 0.1',   require: false   +   gem 'capistrano-rails',   '~&gt; 1.1.7', require: false   +   gem 'capistrano-bundler', '~&gt; 1.1.4', require: false   +   gem 'capistrano3-puma',   '~&gt; 1.2.1', require: false   + end      + group :production do   +   gem \"mysql2\"   + end   $ bundle install $ cap install   # =&gt; ask for installing other package? no   2) \tmodify Capfile   # Load DSL and set up stages require \"capistrano/setup\" # Include default deployment tasks require \"capistrano/deploy\"  require 'capistrano/rails' require 'capistrano/rvm' require 'capistrano/bundler' require 'capistrano/rails/assets' require 'capistrano/rails/migrations' require 'capistrano/puma'  # Load custom tasks from `lib/capistrano/tasks` if you have any defined Dir.glob(\"lib/capistrano/tasks/*.rake\").each { |r| import r }   3) replace config/deploy.rb   # config valid only for current version of Capistrano  set :repo_url,        'git@github.com: YOUR_GIT_ACCOUNT/YOUR_PROJECT_NAME' set :application,     'YOUR_PROJECT_NAME' set :user,            'deploy' set :puma_threads,    [4, 16] set :puma_workers,    0  # Don't change these unless you know what you're doing set :pty,             true set :use_sudo,        false set :stage,           :production set :deploy_via,      :remote_cache set :deploy_to,       \"/home/#{fetch(:user)}/#{fetch(:application)}\" set :puma_bind,       \"unix://#{shared_path}/tmp/sockets/#{fetch(:application)}-puma.sock\" set :puma_state,      \"#{shared_path}/tmp/pids/puma.state\" set :puma_pid,        \"#{shared_path}/tmp/pids/puma.pid\" set :puma_access_log, \"#{release_path}/log/puma.error.log\" set :puma_error_log,  \"#{release_path}/log/puma.access.log\" set :ssh_options,     { forward_agent: true, user: fetch(:user), keys: %w(~/.ssh/id_rsa.pub) } set :puma_preload_app, true set :puma_worker_timeout, nil set :puma_init_active_record, true  # Change to false when not using ActiveRecord   ## Defaults:  # set :scm,           :git # set :branch,        :master # set :format,        :pretty # set :log_level,     :debug # set :keep_releases, 5  ## Linked Files &amp; Directories (Default None): set :linked_files, %w{config/database.yml config/secrets.yml} set :linked_dirs,  %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}  namespace :puma do   desc 'Create Directories for Puma Pids and Socket'   task :make_dirs do     on roles(:app) do       execute \"mkdir #{shared_path}/tmp/sockets -p\"       execute \"mkdir #{shared_path}/tmp/pids -p\"     end   end  \tbefore :start, :make_dirs end  namespace :deploy do   desc \"Make sure local git is in sync with remote.\"   task :check_revision do     on roles(:app) do       unless `git rev-parse HEAD` == `git rev-parse origin/master`         puts \"WARNING: HEAD is not the same as origin/master\"         puts \"Run `git push` to sync changes.\"       exit     end   end end  desc 'Initial Deploy'   task :initial do   on roles(:app) do     before 'deploy:restart', 'puma:start'     invoke 'deploy'   end end  desc 'Restart application'   task :restart do     on roles(:app), in: :sequence, wait: 5 do     invoke 'puma:restart'   end end  desc 'Upload to shared/config'   task :upload do   on roles (:app) do     upload! \"config/database.yml\", \"#{shared_path}/config/database.yml\"     upload! \"config/secrets.yml\",  \"#{shared_path}/config/secrets.yml\"   end end  before :starting,  :check_revision after  :finishing, :compile_assets after  :finishing, :cleanup after  :finishing, :restart end  desc \"Run rake db:seed on a remote server.\" task :seed do   on roles (:app) do     within release_path do       with rails_env: fetch(:rails_env) do       \texecute :rake, \"db:seed\"       end     end   end end  # ps aux | grep puma    # Get puma pid # kill -s SIGUSR2 pid   # Restart puma # kill -s SIGTERM pid   # Stop puma   4) modify config/deploy/production.rb   set :stage, :production set :branch, :master  role :app, %w(deploy@xxx.xxx.xxx.xxx) role :web, %w(deploy@xxx.xxx.xxx.xxx) role :db, %w(deploy@xxx.xxx.xxx.xxx)  set :rails_env, \"production\" set :puma_env, \"production\" set :puma_config_file, \"#{shared_path}/config/puma.rb\" set :puma_conf, \"#{shared_path}/config/puma.rb\"   5) create config/nignx.conf   \tupstream puma-YOUR_PROJECT_NAME { \t  server unix:///home/deploy/YOUR_PROJECT_NAME/shared/tmp/sockets/YOUR_PROJECT_NAME-puma.sock; \t \t} \t \tserver { \t  listen 80 default_server deferred; \t  # server_name example.com; \t \t  root /home/deploy/YOUR_PROJECT_NAME/current/public; \t  access_log /home/deploy/YOUR_PROJECT_NAME/current/log/nginx.access.log; \t  error_log /home/deploy/YOUR_PROJECT_NAME/current/log/nginx.error.log info; \t \t  location ^~ /assets/ { \t    gzip_static on; \t    expires max; \t    add_header Cache-Control public; \t  } \t \t  try_files $uri/index.html $uri @puma; \t  location @puma { \t    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \t    proxy_set_header Host $http_host; \t    proxy_redirect off; \t \t    proxy_pass http://puma-YOUR_PROJECT_NAME; \t \t  } \t \t  error_page 500 502 503 504 /500.html; \t  client_max_body_size 10M; \t  keepalive_timeout 10; \t}   6) modify .gitignore   + /config/database.yml + /config/secrets.yml      copy to *.sample            config/database.yml -&gt; config/database.yml.sample       config/secrets.yml -&gt; config/secrets.yml.sample           delete            config/database.yml       config/secrets.yml           7) first commit   $ git add . $ git commit -m \"ready to deploy\" $ git push origin master   8) add ymls back and modify   * copy   - config/database.yml.sample -&gt; config/database.yml   - config/secrets.yml.sample -&gt; config/secrets.yml   config/database.yml     production:   -  &lt;&lt;: *default   -  database: db/production.sqlite3   +  adapter: mysql2   +  encoding: utf8mb4   +  database: YOUR_PROJECT_NAME   +  pool: 5   +  username: root   +  password:   +  socket: /var/run/mysqld/mysqld.sock   config/secrets.yml   -  secret_key_base: &lt;%= ENV[\"SECRET_KEY_BASE\"] %&gt; +  secret_key_base: e4a98dd1063a6765xxxxxxx # copy from development or test secret_key_base   First Deploy   1) check deploy   $ cap production deploy:check   if it shows database.yml does not exist, don't worry about that. just go next step to copy yml.   2) upload database.yml and secrets.yml from ssh( not git )   $ cap production deploy:upload   3) initial deploy   $ cap production deploy:initial   4) rake db:seed   $ cap production seed      Normal deploy        $ git add . $ git commit -m \"commit message\" $ git push origin master $ cap production deploy\t      Open your website   open your site by ip   http://xxx.xxx.xxx.xxx   if failure, just ssh to Server for log   $ ssh deploy@xxx.xxx.xxx.xxx $ tail -f /home/deploy/YOUR_PROJECT_NAME/current/log/production.log      參考         kakas/CapistranoDeployTest                                             [(Mini Course) Deploy Rails Project to Linux Server             Growth School](http://courses.growthschool.com/courses/deploy-rails-project-to-linux-server)                                                                             [Deploying a Rails App on Ubuntu 14.04 with Capistrano, Nginx, and Puma             DigitalOcean](https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma)                                     ","categories": [],
        "tags": [],
        "url": "/linode-deploy-to-linode-by-capistrano-ubuntu-1604-nginx-puma-mysql-rvm/",
        "teaser": null
      },{
        "title": "[MSSQL] Rails MSSQL連線筆記 ",
        "excerpt":"   本文使用 Mac OS X EI Capitan 10.11.6  or Ubuntu 16.04 / MSSQL 2008 R2    前言  因為有遠端存取MSSQL資料的需求，這邊紀錄一下連線相關工具、問題等。      本文重點如下：   連線工具：FreeTDS介紹   相關gem:   \t- activerecord-sqlserver-adapter            tiny_tds           FreeTDS   1) 首先必須安裝 FreeTDS          FreeTDS： 是一個 Linux 函式庫，他重新實作了 TDS(Tabular Data Stream) 協定，讓在 Linux平台運行的程式，也可以透過此函式庫存取支援 TDS 的 Sybase SQL 或是 MS SQL Server 資料庫。      Ubuntu:  $ sudo apt-get install freetds-dev freetds-bin   mac:  $ brew install freetds   2) 連線至 MSSQL Server DB   $ tsql -S &lt;DB_IP or name&gt; -U &lt;userName&gt; -P &lt;password&gt;  # 進入後若出現1&gt;就是成功了，輸入下列指令可以選擇資料庫: # 1&gt; USE &lt;YourDBName&gt; # 1&gt; GO   相關gem      參考         http://crabonature.pl/posts/29-ms-sql-server-database-with-ruby-on-rails     http://felix-lin.com/linux/%E4%BD%BF%E7%94%A8-freetds-%E5%AD%98%E5%8F%96-sql-server/     https://github.com/rails-sqlserver/activerecord-sqlserver-adapter     ","categories": [],
        "tags": [],
        "url": "/mssql-mac-environment-mssql-online-notes/",
        "teaser": null
      },{
        "title": "[Rails]使用vagrant模擬production環境",
        "excerpt":"前言   #   ","categories": [],
        "tags": [],
        "url": "/rails-use-of-vagrant-simulating-production-environment/",
        "teaser": null
      },{
        "title": "[Rails] 快速查看gem安裝位置",
        "excerpt":"前言  目前有些需求想要直接查看gem原始的寫法自己來override，因此常常需要快速打開gem   安裝gem-path   $ gem install gem-path   使用方式   $ gem path [GEM_NAME]  #例如： $ gem path devise #=&gt; /USERS/YOUR_USERNAME/.rvm/gems/ruby-2.3.1/gems/devise-4.2.0   接下來只要把他複製下來用編輯器開   $ atom /USERS/YOUR_USERNAME/.rvm/gems/ruby-2.3.1/gems/devise-4.2.0  ","categories": [],
        "tags": [],
        "url": "/rails-quick-look-at-gem-install-location/",
        "teaser": null
      },{
        "title": "[MSSQL] 資料庫記錄檔ldf過大處理方式",
        "excerpt":"先轉為簡易模式，縮小後，再改回完整模式   USE YOUR_DB; GO -- Truncate the log by changing the database recovery model to SIMPLE. ALTER DATABASE YOUR_DB SET RECOVERY SIMPLE; GO -- Shrink the truncated log file to 1 MB. DBCC SHRINKFILE (YOUR_DB_Log, 1); GO -- Reset the database recovery model. ALTER DATABASE YOUR_DB SET RECOVERY FULL; GO      參考:         https://dotblogs.com.tw/chou/archive/2011/01/09/20693.aspx     ","categories": [],
        "tags": [],
        "url": "/mssql-database-log-how-ldf-handled/",
        "teaser": null
      },{
        "title": "[Note] Rails近日專案實作筆記",
        "excerpt":"統一使用simple_form  原本使用很混亂，有時候在post表單中會用simple_form，而在搜尋的欄位卻用form_tag，後來發現其實simple_form也可以不用對應controller直接送網址，例如：   &lt;%= simple_form_for \"\" ,url: whatever_path , :method =&gt; :get do |f| %&gt;    &lt;div class=\"col-md-10\"&gt;      &lt;%= f.input :address, label: false, placeholder: '地址' ,:autofocus =&gt; true, input_html:{ value: params[:address]} %&gt;    &lt;/div&gt;    &lt;div class=\"col-md-2\"&gt;      &lt;%= f.submit \"搜尋\", class: \"btn btn-primary\" ,data:{ disable_with: \"搜尋中\" }, name: nil %&gt;    &lt;/div&gt; &lt;% end %&gt;   取得目前網址   會想要用到目前網址主要是因為各個頁面內部的查詢條件及表單，每次送出其實是原本的頁面，但卻要在明確指出一次path，覺得很煩，所以找到以下取代方式   # 絕對URL: request.original_url  # 相對URL: request.fullpath   因為這寫法實在太不rails了，所以把它寫成helper   def current_path \trequest.fullpath end   controller名稱 與 model名稱 的轉換   #####tableize   'fancyCategory'.tableize # =&gt; \"fancy_categories\"  #####classify  'fancy_categories'.classify # =&gt; \"fancyCategory\"   圖片從img改用css3的background url  因為常常會有圖片失效的狀況，這邊直接用css3避免掉叉燒包的狀況   &lt;div style=\" background: url(xxx.png) no-repeat; background-size: 50px Auto;  height: 50px; width: 50px\" &gt; &lt;/div&gt;  這邊用style舉例，通常是寫class   動態顯示404、500頁面   ###1) 建立controller   $ rails generate controller errors not_found internal_server_error   ###2) 調整controller   class ErrorsController &lt; ApplicationController   def not_found     render(:status =&gt; 404)   end    def internal_server_error     render(:status =&gt; 500)   end end   ###3) 設定route   match \"/404\", :to =&gt; \"errors#not_found\", :via =&gt; :all match \"/500\", :to =&gt; \"errors#internal_server_error\", :via =&gt; :all   ###4) 告訴rails我們要自己處理錯誤頁面   # [path] config/application.rb config.exceptions_app = self.routes   ###5) 刪除原本的public下的404及500網頁   rm public/{404,500}.html   ###6) 調整你的View      not_found.html.erb   internal_server_error.html.erb   一般來說他們會被render在layout/application.html.erb之中 照慣例，你也可以自行建立一個專用的layout/error.html.erb來統一錯誤訊息的版型   ###7) 進行測試 你可以使用 http://localhost:3000/404 或 http://localhost:3000/500 來測試   其它頁面若也想測試的話，可以在developmant.rb把錯誤訊息先暫時關閉   # [path] config/environments/development.rb config.consider_all_requests_local = false   判斷layout方式  有時候需要依據條件來判斷layout  class UsersController &lt; ApplicationController   layout :choose_layout    def choose_layout     if action_name == \"edit\"       \"application\"     else       \"login\"     end   end end   array to hash        參考         設定動態404、500頁面     取得目前Path     tableize     classify     css3 background-img     array to hash     ","categories": [],
        "tags": [],
        "url": "/note-rails-recently-project-implementation-notes/",
        "teaser": null
      },{
        "title": "[MSSQL] 取得DB Schema",
        "excerpt":"##取得DB Schema方式 本想找個軟體來匯出，沒想到有人已經寫好現成的SQL，把Demo替換成自己的DB即可   USE Demo; SELECT a.Table_schema +'.'+a.Table_name   as 表格名稱           ,b.COLUMN_NAME                     as 欄位名稱           ,b.DATA_TYPE                       as 資料型別           ,isnull(b.CHARACTER_MAXIMUM_LENGTH,'') as 長度           ,isnull(b.COLUMN_DEFAULT,'')           as 預設值           ,b.IS_NULLABLE                         as 是否允許空值           ,( SELECT value              FROM fn_listextendedproperty (NULL, 'schema', a.Table_schema, 'table', a.TABLE_NAME, 'column', default)              WHERE name='MS_Description' and objtype='COLUMN'               and objname Collate Chinese_Taiwan_Stroke_CI_AS = b.COLUMN_NAME            ) as 欄位描述    FROM INFORMATION_SCHEMA.TABLES  a     LEFT JOIN INFORMATION_SCHEMA.COLUMNS b ON a.TABLE_NAME = b.TABLE_NAME    WHERE TABLE_TYPE='BASE TABLE' ORDER BY a.TABLE_NAME , b.ORDINAL_POSITION       參考         http://alvisprogramming.blogspot.tw/2014/12/t-sql-db-schema.html     ","categories": [],
        "tags": [],
        "url": "/mssql-access-db-schema/",
        "teaser": null
      },{
        "title": "[Rails] 製作動態404、500錯誤頁面",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 5.0.0    前言  通常我們會使用預設放在public裡面的404及500頁面來建立，但其風格跟自己網頁差太多，不好跟自己現有載入的css同步 因此本文將介紹該如何拉出來自己定義，並可以直接套layout的風格。 本文重點:     建立errors專用的controller   設定route   告訴rails我們要自定義頁面   測試的方式   ##動態顯示404、500頁面   ###1) 建立controller   $ rails generate controller errors not_found internal_server_error   ###2) 調整controller   class ErrorsController &lt; ApplicationController   def not_found     render(:status =&gt; 404)   end    def internal_server_error     render(:status =&gt; 500)   end end   ###3) 設定route   match \"/404\", :to =&gt; \"errors#not_found\", :via =&gt; :all match \"/500\", :to =&gt; \"errors#internal_server_error\", :via =&gt; :all   ###4) 告訴rails我們要自己處理錯誤頁面   # [path] config/application.rb config.exceptions_app = self.routes   ###5) 刪除原本的public下的404及500網頁   rm public/{404,500}.html   ###6) 調整你的View      not_found.html.erb   internal_server_error.html.erb   一般來說他們會被render在layout/application.html.erb之中 照慣例，你也可以自行建立一個專用的layout/error.html.erb來統一錯誤訊息的版型   ###7) 進行測試 你可以使用 http://localhost:3000/404 或 http://localhost:3000/500 來測試   其它頁面若也想測試的話，可以在developmant.rb把錯誤訊息先暫時關閉   # [path] config/environments/development.rb config.consider_all_requests_local = false  ","categories": [],
        "tags": [],
        "url": "/rails-create-a-dynamic-404-and-500-pages/",
        "teaser": null
      },{
        "title": "[Rails] SEO 設定方式",
        "excerpt":"   本文使用 Ruby 2.3.1 / Rails 4.2.0    前言  本文將介紹如何在Rails中動態的配置head中的Title、Description及keywords。   設定方式  ###1) 安裝 gem seo_helper   gem ‘seo_helper’, ‘~&gt; 1.0’   ###2) 在 config/initializers 加入 seo_helper.rb  SeoHelper.configure do |config|   config.site_name = \"XXX網站\" end   ###3)   ","categories": [],
        "tags": [],
        "url": "/rails-seo-set/",
        "teaser": null
      },{
        "title": "[Laravel] PHP Laravel 環境安裝(使用Homestead)",
        "excerpt":"   本文使用 Mac OS X EI Capitan 10.11.6    前言  好久沒有寫PHP了，最近發現laravel竟然內建Vuejs，因此手癢想來看看laravel搭配Vue的架構是怎麼設計的。   安裝項目  首先，講一下安裝的順序 因為不想干擾到我目前系統的環境，我這邊選擇使用Homestead來安裝。 但是基本的指令如PHP、Composer、Laravel是在本機操作的，還是會安裝。      指令好朋友   PHP - 這不用多說了   Composer - php套件及相依性工具，相當於node的npm、ruby的bundler   Laravel - php Framework 這也不用多說   虛擬機   VirtualBox - 虛擬機   Vagrant - 使用指令執行虛擬機的工具，搭配box可以簡易的建立一個虛擬環境   Homestead - 為了laravel環境特別建立的vagrant box   開始安裝      php   先查看目前php版本  $ php -v  注意版本要安裝至少5.6以上，否則會無法 composer install   如果要安裝，可以直接使用homebrew來安裝(這邊使用php7.0版)  $ brew install homebrew/php/php70  預設ini位置  /usr/local/etc/php/7.0/php.ini     Composer   只要把以下四行剪下來執行  php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" php -r \"if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\" php composer-setup.php php -r \"unlink('composer-setup.php');\"   執行後會發現多了一個composer.phar檔案，再執行以下指令，就可以在全域使用composer指令了 (注意：此指令資料夾可能需要最高權限，必要時請使用sudo來執行)  mv composer.phar /usr/local/bin/composer      Laravel   執行以下指令安裝  composer global require \"laravel/installer\"  安裝完成後會在~/.composer/vendor/bin中多了laravel的指令 這時候需要把這個資料夾加入預設的path中，才能讓laravel變成全域指令   因為我有安裝oh-my-zsh所以我打開~/.zshrc來編輯 (如果你是原始的可能要開~/.bashrc)  - export PATH=$HOME/bin:/usr/local/bin:$PATH + export PATH=$HOME/bin:$HOME/.composer/vendor/bin:/usr/local/bin:$PATH  加完重開console就可以預設載入laravel 這時候在任何資料夾輸入  $ laravel new YOUR_PROJECT_NAME   就可以新增一個laravel專案了   不過這邊先不新增，我們還要繼續安裝vagrant           VirtaulBox  https://www.virtualbox.org/wiki/Downloads 下載dmg來安裝即可            Vagrant https://www.vagrantup.com/downloads.html 下載dmg來安裝即可            Homestead 先新增homestead box到vagrant box list中 (就是下載映像檔到電腦)       $ vagrant box add laravel/homestead   然後直接clone homestead到 ~/Homestead  $ cd ~ $ git clone https://github.com/laravel/homestead.git Homestead  這時候先到 ~/Homestead 目錄，執行 init.sh  $ cd ~/Homestead $ bash init.sh   他會產生 ~/.homestead/homestead.yaml 這個設定檔 如有需要可以自行設定   這邊使用預設值，所以需要在家目錄多建立一個Code的資料夾（之後的專案都放在這） 並建立一個測試用的專案”Laravel”  $ mkdir ~/Code $ laravel new Laravel   每次要開啟Homestead時，先到homestead目錄執行vagrant up  $ cd ~/Homestead  $ vagrant up   首次開啟需要把專案目錄中的 .env.example 改為 ‘.env’ 並至專案目錄輸入以下指令產生APP_KEY  $ cd ~/Code/Laravel $ php artisan key:generate   另外在homestead.yaml設定檔裡面，其實有設定vm的對外IP是192.168.10.10 並且對應到專案的public目錄 因此可以直接透過 http://192.168.10.10/ 開啟網頁（如有顯示Laravel就算成功了）   如果不想使用app連，可以設定 /etc/hosts 加入  192.168.10.10 homestead.app  就可以透過 http://homestead.app 開啟網頁      參考         PHP Install     Composer Install     Laravel Install     VirtualBox Install     Vagrant Install     Laravel Install     點燈坊安裝說明(有滿詳細的圖文)      ","categories": [],
        "tags": [],
        "url": "/966978/",
        "teaser": null
      },{
        "title": "[Rails] Hash 筆記",
        "excerpt":"1. 資料庫轉Hash   2. Hash篩選   slice   12   except   5   select   5  ","categories": [],
        "tags": [],
        "url": "/rails-hash-notes/",
        "teaser": null
      },{
        "title": "[Rails] 錯誤 無法開啟 rails console",
        "excerpt":"前言  昨天更新了homebrew後，今天就發現rails console無法使用了 錯誤碼如下：  Library not loaded: /usr/local/opt/readline/lib/libreadline.6.dylib (LoadError)   解決方式   爬了幾篇文，發現應該是因為homebrew把readline更新到7.0版了，所以也許把舊的移除，再重新link就可以了吧！ 因此我嘗試執行以下指令  $ brew rm -f readline $ brew install readline $ brew link readline --force  但是發現錯誤仍在，我再執行  $ brew link readline #-&gt; Warning: Already linked: /usr/local/Cellar/readline/7.0 #-&gt; To relink: brew unlink readline &amp;&amp; brew link readline  發現他已經連結到7.0，但是錯誤訊息仍是說他讀取不到6 在不想重裝ruby的狀況下( rvm reinstall 2.3.1 )，想了半天   好吧，懶得管了，就給莊家開個6吧，因此直接強制把 7.0 symbolic link 到 6  $ ln -s /usr/local/opt/readline/lib/libreadline.7.0.dylib /usr/local/opt/readline/lib/libreadline.6.dylib   就解決了      參考         http://stackoverflow.com/questions/25591527/rails-console-doesnt-load-due-to-libreadline     https://github.com/rails/rails/issues/26658     ","categories": [],
        "tags": [],
        "url": "/979550/",
        "teaser": null
      },{
        "title": "[Rails] 字串中，取得兩字串間的文字",
        "excerpt":"方式一   str = “your +example string@ here”   # Between 1st + and 1st @: str[/\\+(.*?)@/,1]  # Between 1st + and last @: str[/\\+(.*)@/,1]  # Between last + and last @: str[/.*\\+(.*)@/,1]  # Between last + and 1st @: str[/.*\\+(.*?)@/,1]   方式二   i = to.index(\"+\") j = to.index(\"@\") to[i+1..j-1]      參考         http://stackoverflow.com/questions/4218986/ruby-using-regex-to-find-something-in-between-two-strings     ","categories": [],
        "tags": [],
        "url": "/1037715/",
        "teaser": null
      },{
        "title": "[Rails]驗證網址是否存在",
        "excerpt":"#加入function   def remote_file_exists?(url)     url = URI.parse(url)     Net::HTTP.start(url.host, url.port) do |http|       return http.head(url.request_uri).code == \"200\"     end   end    測試  puts remote_file_exists? 'http://www.www.www'     # =&gt; false   puts remote_file_exists? 'http://www.google.com/'  # =&gt; true     ","categories": [],
        "tags": [],
        "url": "/rails-verify-that-the-web-site-exists/",
        "teaser": null
      },{
        "title": "[MSSQL] 查詢Query的紀錄",
        "excerpt":"利用關鍵字查詢Query的紀錄  因為舊系統不是我寫的，又想知道前人的查詢條件，只好使用這個方式來查   請把YOUR_KEYWORDS置換成你想查詢的關鍵字   SELECT top 100 t.text FROM sys.dm_exec_cached_plans AS p CROSS APPLY sys.dm_exec_sql_text(p.plan_handle) AS t WHERE t.[text] LIKE N'%YOUR_KEYWORDS%';      Reference         http://stackoverflow.com/questions/5299669/how-to-see-query-history-in-sql-server-management-studio     ","categories": [],
        "tags": [],
        "url": "/1070270/",
        "teaser": null
      },{
        "title": "[Ruby] 匯出XLS、CSV轉存編碼問題 ",
        "excerpt":"前言  前陣子遇到需要匯出CSV問題，想想很簡單嘛，ruby內建的CSV應該手抖一下就寫完了。 後來發現事情不像我想得這麼簡單，照理說只要照預設輸出成UTF-8就萬事OK， 但是在window開起來卻是亂碼，在開頭加了BOM後原以為事情完美落幕， 偏偏廠商就是不吃UTF-8格式，研究半天，轉成Big5還是有問題，後來才發現是ISO-8859-1，接下來就來聽我抱怨。   讓我們研究一下在Windows之下Excel編碼格式  一般中文的話，會是以下兩種編碼     ANSI(ISO-8859-1) - 實際上中文是從Big5轉過去ISO-8859-1   UTF-8(含BOM)   實際Rails Console測試狀況   這邊拿了一個中文字”類”來測試 (沒什麼特別原因，就當初文件的第一個字) 可以看到用big5轉碼後   2.3.1 :001 &gt; str_utf8 = \"類\"  =&gt; \"類\"   2.3.1 :003 &gt; str_utf8.encode('big5')  =&gt; \"\\x{C3FE}\"   2.3.1 :004 &gt; str_utf8.encode('big5').force_encoding('ISO-8859-1')  =&gt; \"\\xC3\\xFE\"    實際寫法      ANSI(ISO-8859-1) - 這寫法中文是big5，在window的excel開起來正常，在linux openoffice開起來要特別選   YOUR_TITLES = ['標題1','標題2',....] YOUR_CONTENTS = [{ 標題1: xxx1, 標題2: yyy1,... },{ 標題1: xxx2, 標題2: yyy2,... },....]  csv_data = CSV.generate do |csv| \tcsv &lt;&lt; YOUR_TITLES   csv &lt;&lt; YOUR_CONTENTS end  #轉成Big5再用ISO-8859-1來顯示 csv_data = csv_data.encode('Big5').force_encoding('ISO-8859-1')  #直接存檔(存ISO-8859-1) File.open(\"#{Rails.root}/public/xxx.csv\", 'wb:ISO-8859-1') { |file| file.write(csv_data) }  #直接下載 respond_to do |format|    format.csv { send_data csv_data, filename: 'xxx.csv' } end      UTF-8(BOM) - 開起來Window及Linux都正常顯示，但是有些廠商excel只吃ANSI格式   YOUR_TITLES = ['標題1','標題2',....] YOUR_CONTENTS = [{ 標題1: xxx1, 標題2: yyy1,... },{ 標題1: xxx2, 標題2: yyy2,... },....]  head = 'EF BB BF'.split(' ').map{|a|a.hex.chr}.join() # 加入BOM，解決excel中文亂碼 csv_data = CSV.generate(csv = head) do |csv| \tcsv &lt;&lt; YOUR_TITLES   csv &lt;&lt; YOUR_CONTENTS end  #直接存檔 File.open(\"#{Rails.root}/public/xxx.csv\", 'wb') { |file| file.write(csv_data) }  #直接下載 respond_to do |format|    format.csv { send_data csv_data, filename: 'xxx.csv' } end      Reference              ","categories": [],
        "tags": [],
        "url": "/ruby-export-xls-csv-dump-code-problem/",
        "teaser": null
      },{
        "title": "[VisualRuby] Ruby GUI 軟體安裝",
        "excerpt":"前言  最近網頁寫膩了，萌生想寫應用程式的念頭， 原本想開xcode swift3開幹，但是公司的人又都是windows寫完不能分享很不爽 後來想說用C#，不過自己平常很少開window也很不爽。   以前曾經寫過QT不過還是換換口味吧，找找ruby， 讓我找的一個看起來算滿意的VisualRuby，畢竟有UI介面可以直接拉   後來看了一下VisualRuby也是base on Ruby-GNOME2來寫的，看起來應該可以不要用visual  只用atom + glade來跑   安裝方式           先決定你要在哪個環境跑，可按照官方網站的說明來裝(mac請直接往下看，因為我踩雷完了)       MAC安裝方式     brew install gtk+3 brew install gtksourceview3 gem install visualruby brew install gnome-icon-theme brew install glade           結束。接下來只要在command line輸入 vr 就可以開啟virtualruby   安裝(踩雷)的心路歷程  根據官方網站的說明，   Mac的環境只要安裝以下指令，就大功告成  brew install gtk+ brew install gtksourceview gem install visualruby   執行vr後，馬上跳錯誤訊息給你看   (vr:16685): Gdk-WARNING **: GdkQuartzDisplay does not implement the monitor vfuncs Typelib file for namespace 'GtkSource' (any version) not found(GLib::Error)   後來爬文結果，似乎是因為GTK版本更新後Class不同 原來Homeblue預設的GTK版本都是2.X 我看了一下其他環境他們都是裝GTK3，所以我就順便把GTK3的都裝一裝  brew install gtk+3 brew install gtksourceview3  在執行一次vr，OK終於開起來了   但是又跳錯誤訊息  (vr:17159): Gtk-WARNING **: Error loading theme icon 'edit-copy' for stock: 圖示「edit-copy」不存在於佈景主題 Adwaita 中   補上這個  brew install gnome-icon-theme   試著編輯sample的項目，發現glade打不開啊，安裝again  brew install glade   大功告成!!      Reference         https://www.ruby-forum.com/topic/6878685     https://github.com/Homebrew/legacy-homebrew/issues/34337     ","categories": [],
        "tags": [],
        "url": "/visualruby-ruby-gui-software-installation/",
        "teaser": null
      },{
        "title": "[Rails] 取得YML資訊方式",
        "excerpt":"database.yml 取得方式   config   = Rails.configuration.database_configuration host     = config[Rails.env][\"host\"] database = config[Rails.env][\"database\"] username = config[Rails.env][\"username\"] password = config[Rails.env][\"password\"]  詳細可查看Configuration   手動指定yml 取得方式   require 'YAML' info = YAML::load(IO.read(\"database.yml\")) print info[\"production\"][\"host\"] print info[\"production\"][\"database\"]   詳細可查看YAML::LOAD   Reference     http://stackoverflow.com/questions/399396/can-you-get-db-username-pw-database-name-in-rails  ","categories": [],
        "tags": [],
        "url": "/1081696/",
        "teaser": null
      },{
        "title": "[Crontab] 排程使用方式",
        "excerpt":"Cron 指令  crontab -e 編輯排程 (edit cron) crontab -r 移除排程 (remove cron) crontab -l 顯示目前排程 (list cron) crontab -u 改變排程的執行身分: crontab -u user filename   Cron 語法                  分       時       日       月       週       使用者       指令                       0~59       0~23       1~31 (29,30)       1~12       0~6       root       /usr/bin/xxxx           Cron 範例   #####每5小時執行一次  * */5 * * * root /usr/libexec/atrun  #####1至20號每天執行一次  0 1 1-20 * * root /usr/libexec/atrun  #####當分針移到第5分時，執行此 cron  5 * * * * root /usr/libexec/atrun   #####當時針移到1點 1 分時，執行此 cron  1 1 * * * root /usr/libexec/atrun   #####每週一的1點1分，執行  1 1 * * 1 root /usr/libexec/atrun   #####2月29日時針到1點1分，執行  1 1 29 2 * root /usr/libexec/atrun   #####8點到16點每5分鐘執行一次 cron  */5 8-16 * * * root /usr/libexec/atrun      Reference         https://www.puritys.me/docs-blog/article-20-cron-jobs-crontab-%E6%8E%92%E7%A8%8B%E6%95%99%E5%AD%B8.html     ","categories": [],
        "tags": [],
        "url": "/1089723/",
        "teaser": null
      },{
        "title": "[Rails] 排程使用 ActiveJob + Sidekiq + Sidekiq-cron",
        "excerpt":"前言  Active Job 是rails官方內建的背景執行程序，有adapter可用來連接外部的Sidekiq、resque、delay job等 我個人認為語法滿簡潔的，而且如果以後想改resque或其他也滿好處理 這邊使用sidekiq來執行，並搭配Sidekiq-cron這個plugin來設定排程 並且會安裝Web UI來快速查看執行狀況   說明  sidekiq其實是一個服務，他還搭配了redis這個資料庫   當我們使用sidekiq建立一個排程，其實是建立在redis資料庫中， 如果有安裝sidekiq-corn的話，運作的排程也放在redis   這和我們一般使用whenever建立cron不一樣 whenever建立的cron是放在作業系統(Linux或mac)內建的crontab中，就不用另外啟動其他服務   但使用sidekiq，則一定要確保sidekiq及redis都有運作   前置作業   #####安裝Redis Redis官方網站   安裝 redis 資料庫 $ brew install redis 啟動 redis 資料庫 $ brew services start redis   若需要其他資訊可以輸入 $ brew info redis   #####安裝Sidekiq Sidekiq官方網站   gem 'sidekiq' gem \"sidekiq-cron\", \"~&gt; 0.4.0\"   $ bundle install   第一個Job   1. 新增一個 Active Job   $ rails generate job guests_cleanup   可以發現在 /job 中多了一個 guests_cleanup_job.rb 調整一下perform中輸出的文字   class GuestsCleanupJob &lt; ActiveJob::Base   queue_as :default     def perform(*args)     puts 'hello Job!!!'   end end   這樣我們就建好一個job了 可以在rails c 中  輸入 GuestsCleanupJob.perform_later 測試，他會把上執行 輸入 GuestsCleanupJob.set(wait_until: Date.tomorrow.noon).perform_later(record) 測試，他會等到明天中午執行 輸入 GuestsCleanupJob.set(wait: 1.week).perform_later(record) 測試，他會等一週後才執行   2. sidekiq  只要加入adapter是sidekiq即可  # [path] application.rb class Application &lt; Rails::Application \tconfig.active_job.queue_adapter = :sidekiq end   加入此行後，之後的原本執行job的指令(如： GuestsCleanupJob.perform_later )，就會丟給sidekiq去執行 記得sidekiq服務要啟動，需要執行 sidekiq   3. sidekiq web UI  加上即可  # [path] route.rb require 'sidekiq/web' mount Sidekiq::Web =&gt; '/sidekiq'  之後就可以在 http://xxxx/sidekiq 中看到所有job執行狀況   4. sidekiq-cron  sidekiq-cron官方   sidekiq-corn web UI介面 加入 require 'sidekiq/cron/web' 即可 (要在sidekiq/web之後)  # [path] route.rb require 'sidekiq/web' require 'sidekiq/cron/web' mount Sidekiq::Web =&gt; '/sidekiq'   官方提供好幾種設定排程方式，這邊介紹兩種：   (1) 直接新增 Sidekiq::Cron::Job.create( \tname: ‘Hard worker - every 5min’,   cron: ‘*/5 * * * *’,   class: ‘HardWorker’,   active_job: true  )   (2) YML ```yml config/schedule.yml my_first_job:   cron: “*/5 * * * *”   class: “HardWorker”   queue: hard_worker   active_job: true   second_job:   cron: “*/30 * * * *” # 分 時 日 月 週    class: “HardWorker” # 需對應你的Job   queue: hard_worker_long # 優先權設定，詳細請看官網說明   active_job: true # 因為我們使用active_job建立，請設為true   args:     hard: “stuff”  ```rb # [path] config/initializers/sidekiq.rb schedule_file = \"config/schedule.yml\"  if File.exists?(schedule_file) &amp;&amp; Sidekiq.server?   Sidekiq::Cron::Job.load_from_hash YAML.load_file(schedule_file) end   另外如果要跑ActionMail的話，因為預設的queue是mailer 記得要加上sidekiq.yml設定mailers的queue (否則他只會跑default，你的mail就會被一直晾在queue中) ```yml sidekiq.yml — :concurrency: 1 :queues:     default   mailers ```   記得sidekiq要run      Reference         http://rails.ruby.tw/active_job_basics.html     https://github.com/kakas/Kaohsiung_Rails_Sidekiq_demo     ","categories": [],
        "tags": [],
        "url": "/rails-activejob-sidekiq-sidekiq-cron/",
        "teaser": null
      },{
        "title": "[Rails] bundle錯誤 - unf_ext-0.0.7.2",
        "excerpt":"錯誤訊息   xxx&gt; gem install rest-client  Building native extensions.  This could take a while... ERROR:  Error installing rest-client: \tERROR: Failed to build gem native extension.      current directory: /Users/xxx/.rvm/gems/ruby-2.3.1/gems/unf_ext-0.0.7.2/ext/unf_ext /Users/XinYing/.rvm/rubies/ruby-2.3.1/bin/ruby -r ./siteconf20161114-2590-1md66fr.rb extconf.rb checking for main() in -lstdc++... *** extconf.rb failed *** Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.  Check the mkmf.log file for more details.  You may need configuration options.   解決過程  爬文 有人說是因為缺gcc Linux: yum install gcc-c++ 有人說需要安裝這個 macOS：brew install coreutils   我嘗試執行brew install coreutils，結果出現：   Error: You have not agreed to the Xcode license. Please resolve this by running:   sudo xcodebuild -license accept   讓我想起最近好像有更新Xcode，想是license有更新又要重新同意了，我馬上執行了   sudo xcodebuild -license accept   就不裝coreutils，直接測試 gem install rest-client 結果就成功了   解決方式  只要把xcode license同意即可  sudo xcodebuild -license accept   ","categories": [],
        "tags": [],
        "url": "/1104287/",
        "teaser": null
      },{
        "title": "[MAIL] 如何處理e-mail寄信會漏信？(設定DKIM及SPF)",
        "excerpt":"設定DKIM及SPF  ##DKIM \t#####1: 產生DKIM的網站：   \thttp://dkimcore.org/tools/keys.html   #####2: 貼在dns txt紀錄中   \t例如：     1479549806.xxx._domainkey.mail.xxx.com.tw. IN TXT (         “v=DKIM1;t=s;p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSUdYZESeB5lowMAQL/nEOpwC7”         “982dsTUekdbGHudfkoYBdkITYUYdk0KJ:LKd978s1ROiIKmux8Ekm8sR31vyH8P”         “KIQ_EkdahbdneieKSHdkdiuendHnfdpreKSSJa+AHNIJGhsIgh0LLn5xMqAdTYI”         “ufp5+DxXJJNs0cczSwIDAQAB”)   請貼 \tdefault._domainkey.mail   txt紀錄   v=DKIM1;t=s;p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDSUdYZESeB5lowMAQL/nEOpwC7982dsTUekdbGHudfkoYBdkITYUYdk0KJ:LKd978s1ROiIKmux8Ekm8sR31vyH8PKIQ_EkdahbdneieKSHdkdiuendHnfdpreKSSJa+AHNIJGhsIgh0LLn5xMqAdTYIufp5+DxXJJNs0cczSwIDAQAB   ##SPF \t######1: 產生SPF的網站：   \thttp://www.spfwizard.net/   ######2: 照推薦的選即可：     mx 打你的網域名稱     最後產生 \t\t\tv=spf1 a mx ptr mx:mx.mail.xxx.com.tw. ~all   驗證DKIM及SPF   ##DKIM   #####1: 驗證DKIM的網站：   \thttp://dkimcore.org/tools/keycheck.html   #####2: Selector   \t請輸入 default ， Domain name 則是填入域名，填入後點下check   ##SPF   #####1:驗證 SPF 的網站：   \thttp://www.kitterman.com/spf/validate.html   #####2: Domain name \t  請填入網域名稱，在點下Get SPF Record (if any)  ","categories": [],
        "tags": [],
        "url": "/1120891/",
        "teaser": null
      },{
        "title": "[Redis] 管理工具推薦及遇到的問題",
        "excerpt":"##推薦   keylord   解決因快照功能失敗 導致排程無法繼續問題   MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.   $ redis-cli   redis&gt; config set stop-writes-on-bgsave-error no   解決無原因queue被killed的問題   Yes, you need more RAM. Try using -c 5 to shrink Sidekiq’s memory usage a bit.      Reference         http://stackoverflow.com/questions/19581059/misconf-redis-is-configured-to-save-rdb-snapshots     http://blog.kankanan.com/posts/2012/12/16_89e351b34fdd5b585feb716759318d25540eredis65e06cd551995165768495ee9898.html     http://stackoverflow.com/questions/23801259/sidekiq-got-killed-for-no-reason     https://github.com/mperham/sidekiq/issues/672     ","categories": [],
        "tags": [],
        "url": "/1139742/",
        "teaser": null
      },{
        "title": "[Gem] 紀錄欄位異動的好幫手 audited",
        "excerpt":"非常棒的gem   audited https://github.com/collectiveidea/audited   安裝方式   gem \"audited\", \"~&gt; 4.3\"   rails 5.0 要加上   gem \"rails-observers\", github: 'rails/rails-observers'   產生table   $ rails generate audited:install $ rake db:migrate   更新方式   如果官方有出新版本，有異動欄位，你想更新的話   $ rails generate audited:upgrade $ rake db:migrate   使用方式   只需在您的model上 audited ：   class User &lt; ActiveRecord::Base   audited end   預設情況下，無論何時創建，更新或刪除用戶，都會建立新的紀錄。   user = User.create!(name: \"Steve\") user.audits.count # =&gt; 1 user.update_attributes!(name: \"Ryan\") user.audits.count # =&gt; 2 user.destroy user.audits.count # =&gt; 3   紀錄包含對model採取了什麼行動，以及做出了哪些修改。   user.update_attributes!(name: \"Ryan\") audit = user.audits.last audit.action # =&gt; \"update\" audit.audited_changes # =&gt; {\"name\"=&gt;[\"Steve\", \"Ryan\"]}   可以通過索引或日期取得該次版本紀錄，或列出所有修訂版本。   user.revisions user.revision(1) user.revision_at(Date.parse(\"2016-01-01\"))   限制記錄欄位  預設情況下，任何屬性更改都會建立新的紀錄。但仍可以手動指定需要紀錄的欄位。   class User &lt; ActiveRecord::Base   # 預設，全部欄位皆紀錄   audited    # 單一欄位   audited only: :name    # 複數欄位   audited only: [:name, :address]    # 排除欄位   audited except: :password end   特殊callback  預設情況下，可以進行新增、更新或刪除紀錄。但仍可以限定操作。   class User &lt; ActiveRecord::Base   # 預設，全部動作皆可   audited    # 限制name只紀錄更新和刪除   audited only: :name, on: [:update, :destroy] end   加入備註  可以在model上使用 audit_comment 屬性為每筆紀錄加入註解   user.update_attributes!(name: \"Ryan\", audit_comment: \"Changing name, just because\") user.audits.last.comment # =&gt; \"Changing name, just because\"   可以選擇加入：comment_required選項，以便對所有紀錄都要求註解。   class User &lt; ActiveRecord::Base   audited :comment_required =&gt; true end   追蹤使用者   如果您在Rails中，則請求中進行的所有紀錄更改將自動被列為目前使用者。預設情況下，Audited使用controller中的current_user方法。   class PostsController &lt; ApplicationController   def create     current_user # =&gt; #&lt;User name: \"Steve\"&gt;     @post = Post.create(params[:post])     @post.audits.last.user # =&gt; #&lt;User name: \"Steve\"&gt;   end end   要使用除current_user之外的方法，請在初始化的程式碼中放入以下內容：  Audited.current_user_method = :authenticated_user   除此之外，審核也可以使用as_user方法直接指定記錄的使用者：  Audited::Audit.as_user(User.find(1)) do   post.update_attribute!(title: \"Hello, world!\") end post.audits.last.user # =&gt; #&lt;User id: 1&gt;   自定義的Auditor  您可能需要不時使用自定義審核程序。它可以通過簡單的傳遞一個字符串：  class ApplicationController &lt; ActionController::Base   def authenticated_user     if current_user       current_user     else       'Elon Musk'     end   end end   關聯的應用  有時，model相關聯很有用。例如，給定以下model：   class User &lt; ActiveRecord::Base   belongs_to :company   audited end  class Company &lt; ActiveRecord::Base   has_many :users end   對使用者的每個更改都進行紀錄，但如果您想要取得屬於特定公司使用者的所有紀錄該怎麼辦？您可以使用：associated_with選項：  class User &lt; ActiveRecord::Base   belongs_to :company   audited associated_with: :company end  class Company &lt; ActiveRecord::Base   has_many :users   has_associated_audits end   現在，當使用者建立紀錄時，該用戶的公司也會一起保存。讓間接相關的公司紀錄變得更容易（也更快）。  company = Company.create!(name: \"Collective Idea\") user = company.users.create!(name: \"Steve\") user.update_attribute!(name: \"Steve Richert\") user.audits.last.associated # =&gt; #&lt;Company name: \"Collective Idea\"&gt; company.associated_audits.last.auditable # =&gt; #&lt;User name: \"Steve Richert\"&gt;   暫時禁用  如果要暫時的禁用記錄某些紀錄，有幾種方法可使用：  @user.save_without_auditing  或  @user.without_auditing do   @user.save end   指定欄位禁用  User.non_audited_columns = [:first_name, :last_name]   整個model禁用  User.auditing_enabled = false  ","categories": [],
        "tags": [],
        "url": "/gem-record-field-changes-a-good-helper-audited/",
        "teaser": null
      },{
        "title": "[Ruby] Include vs Extend",
        "excerpt":"首先，我們先宣告module Foo當範例  module Foo   def foo     puts 'Hello!'   end end   接下來看看Include Foo及Extend Foo的差異  Include  include提供實例方法(instance method)。   例如：  class Bar   include Foo end  Bar.new.foo # Hello! Bar.foo # NoMethodError: undefined method ‘foo’ for Bar:Class   Extend  extend提供類方法(class method)。   例如：  class Baz   extend Foo end  Baz.foo # Hello! Baz.new.foo # NoMethodError: undefined method ‘foo’ for #&lt;Baz:0x1e708&gt;      Reference         http://stackoverflow.com/questions/15097929/ruby-module-require-and-include     http://www.railstips.org/blog/archives/2009/05/15/include-vs-extend-in-ruby/     ","categories": [],
        "tags": [],
        "url": "/ruby-differences-include-vs-extend/",
        "teaser": null
      },{
        "title": "[Linux] 背景處理相關指令",
        "excerpt":"前言  指令將使用 sleep 300 當範例   指令背景處理  指令最後輸入&amp;就是放到背景處理的意思，  $ sleep 300 &amp; [1] 26469 $ sleep 300 &amp; [2] 26496   查看目前已經建立的指令 jobs   $ jobs [1]  - running    sleep 300 [2]  + running    sleep 300 $ jobs -l [1]  - 26469 running    sleep 300 [2]  + 26496 running    sleep 300   切換到前景執行   %1 是指第[1]個工作   $ fg %1    再切換回背景執行   這時要按下 ctrl+z 讓指令先暫停到背景   ^Z [1]  + 26469 suspended  sleep 300   再輸入 bg 讓他到背景繼續執行   $ bg %1 [1]  + 26469 continued  sleep 300   使用jobs就可以看到他已經在執行了   $ jobs [1]  + 26469 running  sleep 300   nohup不要掛斷指令   適用於遠端ssh時，若不希望關閉terminal指令就關閉的話，可使用nohup指令  $ nohup sleep 500 &amp; [1] 26945 appending output to nohup.out $ ps -fC sleep (用 ps 查詢正在用 sleep 命令執行的行程) UID PID PPID C STIME TTY TIME CMD root 8544 8014 0 16:41 pts/1 00:00:00 sleep 500      Reference         http://linuxdiary.blogspot.tw/2007/10/blog-post_30.html     ","categories": [],
        "tags": [],
        "url": "/linux-background-processing-directives/",
        "teaser": null
      },{
        "title": "[Router] Fortigate 60D 忘記密碼處理",
        "excerpt":"前言  Fortigate 60D 忘記密碼處理方式有二     重置密碼            用console連接電腦的com port，再用terminal連       - 用usb連接電腦，再用fortiExplorer連           Reset全部(當然是下下策啦，但平常備份有做好做滿的話，也還ＯＫ)   重置密碼方式   ##1. 預備工作     安裝fortiExplorer並開啟程式   接上 usb ( Router後方mini usb接電腦usb)   這時候可以看到連接上裝置(當然Router要通電）   點開CLI介面可以看到裝置的SN，先複製下來備用   ##2. 心理準備     登入時必須打上帳號及密碼            帳號: maintainer       密碼: bcpbXXXXXXXXXXXXX   (XXXXXXXXXXXXX是剛剛複製的SN)           登入的時間必須要在15秒內完成   請先把帳號密碼放在一旁準備複製貼上   ##3. 開始登入     把插頭拔掉，再插上   在等他開機的時間，請先把fortiExplorer開好   等到偵測到裝置，馬上切到CLI頁面   看到login:出現就表示可以開始登入了   登入 (請在15秒內完成，失敗需重新再來)            成功會出現 success       失敗會出現 Login incorrect           ##4. 修改密碼     請按照下方指令輸入，並把 YOUR_NEW_PASSWORD 改成你要的密碼     #config system admin #edit admin #set password YOUR_NEW_PASSWORD #end           ##5. 登入測試     這時候可以用fortiExplorer內附的登入頁測試   或直接連ip測試   小小的心路歷程  網路上大部分解法都是”console連com port“，都什麼年代手邊筆電哪有這種port，居然google到的都是這種文章 看著官方的pdf檔，原來用後面的usb連也可以，不一定要用console 另外還有一個fortiExplorer可以用，就不用開其他termainal 但是官方pdf卻沒有寫怎麼登入，還是參考前人的文章，混搭著成功了      Reference         官方pdf     實際步驟      ","categories": [],
        "tags": [],
        "url": "/router-fortigate-60d-forgot-password/",
        "teaser": null
      },{
        "title": "[MSSQL] 交易記錄檔 LDF 太大處理方式",
        "excerpt":"前言  SQL Server 資料庫使用久了，交易記錄檔 LDF 會越來越大，該如何處理   我們可以透過 DBCC SHRINKFILE 壓縮目前資料庫之指定資料或記錄檔的大小   建議  建議復原模式使用簡單即可，因此使用方法一就好   方法一、把還原模式變成簡單模式，log壓縮成1mb  USE YOUR_DB; DBCC SHRINKFILE (YOUR_DB_log, 1);   方法二、把還原模式變成簡單模式，log壓縮成1mb，再還原成複雜模式  USE MESWIPDB; GO -- Truncate the log by changing the database recovery model to SIMPLE. ALTER DATABASE MESWIPDB SET RECOVERY SIMPLE; GO -- Shrink the truncated log file to 1 MB. DBCC SHRINKFILE (MESWIPDB_Log, 1); GO -- Reset the database recovery model. ALTER DATABASE MESWIPDB SET RECOVERY FULL; GO      Reference         https://dotblogs.com.tw/chou/2011/01/09/20693     http://ithelp.ithome.com.tw/questions/10028911     ","categories": [],
        "tags": [],
        "url": "/mssql-history-of-the-long-approach-and-recommendations/",
        "teaser": null
      },{
        "title": "[Ruby] 檢查URL存在與否",
        "excerpt":"  require \"net/http\"   def remote_file_exists?(url)     url = URI.parse(url)     Net::HTTP.start(url.host, url.port) do |http|       puts http.head(url.request_uri).code == \"200\"       return http.head(url.request_uri).code == \"200\"     end   end  或   ```rb   require \"net/http\"   def url_exist?(url_string) url = URI.parse(url_string) req = Net::HTTP.new(url.host, url.port) req.use_ssl = (url.scheme == 'https') path = url.path if url.path.present? res = req.request_head(path || '/') puts res.code != \"404\" # false if returns 404 - not found   rescue Errno::ENOENT puts false # false if can't find the server   end   ```   ","categories": [],
        "tags": [],
        "url": "/1234232/",
        "teaser": null
      },{
        "title": "[MYSQL] 無法寫入中文問題 ",
        "excerpt":"先登入mysql命令列   $ mysql -u root -p #=&gt; 輸入密碼   mysql&gt; SHOW VARIABLES LIKE ‘character%’; +--------------------------+----------------------------+ | Variable_name            | Value                      | +--------------------------+----------------------------+ | character_set_client     | utf8                       | | character_set_connection | utf8                       | | character_set_database   | latin1                     | | character_set_filesystem | binary                     | | character_set_results    | utf8                       | | character_set_server     | latin1                     | | character_set_system     | utf8                       | | character_sets_dir       | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec)   ","categories": [],
        "tags": [],
        "url": "/1237634/",
        "teaser": null
      },{
        "title": "[Ruby] hash複製",
        "excerpt":"一般變數指定   a = 10 b = a b += 10 #=&gt; a = 10 #=&gt; b = 20   hash複製   #失敗範例 a = { name: 'ivan', age: 18  } b = a b[:age] = 30 #=&gt; a = { name: 'ivan', age: 30  } #=&gt; b = { name: 'ivan', age: 30  }  #成功範例 a = { name: 'ivan', age: 18  } b = a.clone b[:age] = 30 #=&gt; a = { name: 'ivan', age: 18  } #=&gt; b = { name: 'ivan', age: 30  }       Reference         http://stackoverflow.com/questions/4157399/how-do-i-copy-a-hash-in-ruby     http://motion-express.com/blog/ruby-same-object-or-duplicate     ","categories": [],
        "tags": [],
        "url": "/ruby-copy-the-hash/",
        "teaser": null
      },{
        "title": "[Redis] Redis-Commander",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/1304926/",
        "teaser": null
      },{
        "title": "[Gem] 安裝local端的gem",
        "excerpt":"安裝local端的gem   安裝  只要輸入 gem install 你的專案名.gem 即可，他會連相依的gem一起安裝   $ gem intall YOUR_GEM_NAME.gem # Fetching: gyoku-1.3.1.gem (100%) # Successfully installed DEPENDENCE_GEM_NAME-1.3.1 # Successfully installed YOUR_GEM_NAME-0.1.0 # Parsing documentation for DEPENDENCE_GEM_NAME-1.3.1 # Installing ri documentation for DEPENDENCE_GEM_NAME-1.3.1 # Parsing documentation for YOUR_GEM_NAME-0.1.0 # Installing ri documentation for YOUR_GEM_NAME-0.1.0 # Done installing documentation for DEPENDENCE_GEM_NAME, YOUR_GEM_NAME #after 0 seconds # 2 gems installed      Reference         http://stackoverflow.com/questions/220176/how-can-i-install-a-local-gem      ","categories": [],
        "tags": [],
        "url": "/gem-install-the-local-end-of-the-gem/",
        "teaser": null
      },{
        "title": "[Rails] 判斷字串是否為數字",
        "excerpt":"可以直接寫在 initializers 裡面   # [path] string.rb class String   def is_number?     true if Float(self) rescue false   end end      Reference         http://stackoverflow.com/questions/5654517/in-ruby-on-rails-to-extend-the-string-class-where-should-the-code-be-put-in     ","categories": [],
        "tags": [],
        "url": "/rails-replace-the-ruby-class/",
        "teaser": null
      },{
        "title": "[Rails] MySQL Migration with longtext",
        "excerpt":"參考範例   change_column :articles, :body, :text, :limit =&gt; 4294967295   rails 預設是TEXT(65535)   1 to 255 bytes: TINYTEXT 256 to 65535 bytes: TEXT 65536 to 16777215 bytes: MEDIUMTEXT 16777216 to 4294967295 bytes: LONGTEXT      參考         http://stackoverflow.com/questions/4443477/rails-3-migration-with-longtext/4443512#4443512     ","categories": [],
        "tags": [],
        "url": "/rails-mysql-migration-with-longtext/",
        "teaser": null
      },{
        "title": "[VM] vmware ubuntu 16.04加入shared folder",
        "excerpt":"##使用vmhgfs-fuse指令mount到資料夾   例如:  $ mkdir ~/vmshare $ vmhgfs-fuse ~/vmshare   這樣所有分享資料夾都會在~/vmshare之下了      參考         https://superuser.com/questions/1072317/vmware-tools-for-ubuntu-16-04-lts-xenial     ","categories": [],
        "tags": [],
        "url": "/1415762/",
        "teaser": null
      },{
        "title": "[Rails] Devise + OmniAuth-facebook(未完)",
        "excerpt":"整合 Devise 實作 Facebook 登入機制  前言  本次製作的登入機制，是保留原始的登入及註冊方式，並可另外使用facebook做登入。   首次使用facebook登入時，不需要輸入密碼，直到後台有設定密碼之後，始可使用帳號密碼登入。   首次使用帳號密碼登入時，可於後台再設定綁定facebook帳號。   合併帳號機制，若擁有一般帳號、及使用facebook帳號註冊，需要可以設定合併。   準備工作   ####(1) 安裝相關gem   # gemfile gem 'devise' gem 'omniauth-facebook' gem 'figaro'   $ bundle install   ####(2) Devise安裝   $ rails g devise:install $ rails g devise User   調整migration將User加入name及image   # db/migrate/20170115001000_devise_create_users.rb t.string :name,               null: false, default: \"\" t.string :image,              null: false, default: \"\"   $ rake db:migrate $ rails g devise:views   # development.rb  config.action_mailer.default_url  _options = { host: 'localhost', port: 3000 }   # application_controller.rb before_action :authenticate_user!   ####(3) 至 facebook developer 建立 app           註冊好帳號       建立一個專用的app            登入後，點選網頁右上頭像，點選 “Add a new app”       建立好後會直接進入該app的 control panel       在Facebook Login點選Get Started         然後請輸入允許使用的網站，這邊使用測試用的http://localhost:3000/，記得按下Save Changes             回到 dashboard 找到 app id 及 secret備用    ####(4) figaro 安裝   $ figaro install   將上個步驟建立的 app id 及 secret 填寫如下   # config/application.yml facebook_app_id: \"*********\" facebook_app_secret: \"abcdefg3b896a0ffb85d3738c01f7000\"   ####(5) OmniAuth-facebook 安裝   設定帳號認證連結資訊   # config/initializers/devise.rb config.mailer_sender = 'mailer@example.com' config.omniauth :facebook, ENV['facebook_app_id'], ENV['facebook_app_secret'], scope: 'email', info_fields: 'email, name'   加入兩個欄位到User供辨識用   $ rails g migration AddOmniauthToUsers provider:string uid:string $ rake db:migrate   須在devise.rb設定開啟omniauthable模組， 並設定provider是facebook   devise :database_authenticatable, :registerable,          :recoverable, :rememberable, :trackable, :validatable,          :omniauthable, :omniauth_providers =&gt; [:facebook]   加入omniauth的callback controller   # app/controllers/users/omniauth_callbacks_controller.rb class Users::OmniauthCallbacksController &lt; Devise::OmniauthCallbacksController   def facebook     # You need to implement the method below in your model (e.g. app/models/user.rb)     @user = User.from_omniauth(request.env[\"omniauth.auth\"])      if @user.persisted?       sign_in_and_redirect @user, :event =&gt; :authentication #this will throw if @user is not activated       set_flash_message(:notice, :success, :kind =&gt; \"Facebook\") if is_navigational_format?     else       session[\"devise.facebook_data\"] = request.env[\"omniauth.auth\"]       redirect_to new_user_registration_url     end   end    def failure     redirect_to root_path   end end   再加入一個從facebook註冊或登入用的function   # user.rb def self.from_omniauth(auth)   where(provider: auth.provider, uid: auth.uid).first_or_create do |user|     user.email = auth.info.email     user.password = Devise.friendly_token[0,20]     user.name = auth.info.name   # assuming the user model has a name     user.image = auth.info.image # assuming the user model has an image     # If you are using confirmable and the provider(s) you use validate emails,      # uncomment the line below to skip the confirmation emails.     # user.skip_confirmation!   end end   頁面實作     …未完待續      相關網站         devise https://github.com/plataformatec/devise     omniauth-facebook https://github.com/mkdynamic/omniauth-facebook     devise整合omniauth說明   https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview      ","categories": [],
        "tags": [],
        "url": "/1419840/",
        "teaser": null
      },{
        "title": "[Win10] 安裝Ubuntu Bash嘗鮮",
        "excerpt":"介紹  自從Win8.1之後，因為投入Rails之列，就幾乎很少使用windows了。 以致到現在弄了台新電腦，才有機會嘗鮮。   聽說Win10不只把APP整合到視窗程式中，就連開發環境都想整合，硬是把Linux環境給搬上來，而且是相當於原生環境(類似Linux的wine)，而不像vargant或docker是虛擬環境。   也許這功能早一點出來，就不會買貴桑桑的mac了。   安裝步驟     首先你要到設定中，「更新與安全性」裡頭的「開發人員專用」下面，打開「開發人員模式。」    再到「控制台」中的「程式和功能」，點選「開啟或關閉Windows功能」，裡頭有一個「適用於Linux的Windows子系統」項目將它打勾。    啟動之後要等一下安裝必要的工具，裝好後需要重新啟動。   打開Windows命令列， 輸入bash，再輸入Y，等待安裝完成即可。    安裝完成即可看到bash程式    調整顏色字型  因為原生有夠醜的，如果想要調得稍微好看一點，有以下方式可以調整     可以在標題按右鍵，選預設值來設定。   另一個是直接下載別人調整好的色票 https://github.com/neilpa/cmd-colors-solarized (下載solarized-dark.reg來執行就好，想還原就下載windows-defaults.reg來執行) 娤完長這樣…    目錄位置   他不是虛擬環境，也就是說它有個實體位置放在  C:\\Users\\USERNAME\\AppData\\Local\\lxss   但仔細一看好像怪怪的，其實真正的Linux系統目錄是在  C:\\Users\\USERNAME\\AppData\\Local\\Lxss\\rootfs   root的home root  C:\\Users\\USERNAME\\AppData\\Local\\Lxss\\root   user的home root  C:\\Users\\USERNAME\\AppData\\Local\\Lxss\\home\\USERNAME      參考         http://www.techbang.com/posts/42943     http://superuser.com/questions/1114549/how-do-you-change-the-color-scheme-in-bash-on-ubuntu-for-windows     https://github.com/neilpa/cmd-colors-solarized     https://www.howtogeek.com/261383/how-to-access-your-ubuntu-bash-files-in-windows-and-your-windows-system-drive-in-bash/     ","categories": [],
        "tags": [],
        "url": "/1473129/",
        "teaser": null
      },{
        "title": "[HTML] 圖片讀取失敗的置換方式",
        "excerpt":"方法一 加入onerror     &lt;img onerror=\"this.src='noImg.gif'\" src=\"test.jpg\" /&gt;     方法二 用object     &lt;object data=\"test.jpg\" type=\"image/jpg\"&gt;    &lt;img src=\"noImg.gif\" /&gt; &lt;/object&gt;        參考         http://demo.tc/post/285     ","categories": [],
        "tags": [],
        "url": "/1519918/",
        "teaser": null
      },{
        "title": "[MariaDB/mysql] (Windows)忘記root密碼調整 ",
        "excerpt":"windows mariaDB 忘記root密碼修改     先停止 mariaDB (mysqld)服務   進入cmd，到你的mariaDB/bin目錄中，輸入以下指令(啟動不需權限的服務)     mysqld.exe -u root --skip-grant-tables           另開cmd，同樣進入mariaDB/bin目錄中，輸入以下指令(進入db console)     mysql.exe -u root -p           使用db: mysql     use mysql;           更新密碼     UPDATE user SET Password = PASSWORD('your_new_passowrd') WHERE User = 'root';           把剛剛不需權限的服務關掉，重啟正常的服務   測試一下新密碼吧      參考         https://jovicailic.org/2012/04/reset-forgotten-mysql-root-password-under-windows/      ","categories": [],
        "tags": [],
        "url": "/1523034/",
        "teaser": null
      },{
        "title": "[Capistrano] 常用指令",
        "excerpt":"Deploy  cap production deploy deploy上去 cap deploy:rollback 還原到上次點 cap deploy:rollback:[xxxxx] 還原到某個點  ","categories": [],
        "tags": [],
        "url": "/1621673/",
        "teaser": null
      },{
        "title": "[Git] 常用指令",
        "excerpt":"正常更新  git add . #加入所有變動項目 git commit -m '&lt;some commit&gt;' #建立異動版本 git push orginal master # 推到預設的master分支  合併分支  branch&gt; git merge master  # 把master合併到branch來（master不變) master&gt; git merge branch  # 把branch合併到master來 (branch不變)   爆炸了要還原  git reset --hard &lt;tag/branch/commit id&gt;  #將branch復原到某個時間點 git push -f orginal master # 強制推送到線上      參考         Git教學-ihower     Gitbook-zlargon     ","categories": [],
        "tags": [],
        "url": "/git-common-instructions/",
        "teaser": null
      },{
        "title": "[Rails] Port佔用問題 - Address already in use - bind(2) (Errno::EADDRINUSE)",
        "excerpt":"錯誤訊息   開啟的時候發現port被佔用  $ rails s =&gt; Booting Puma =&gt; Rails 5.1.0.rc1 application starting in development on http://localhost:3000 =&gt; Run `rails server -h` for more startup options Puma starting in single mode... * Version 3.8.2 (ruby 2.3.1-p112), codename: Sassy Salamander * Min threads: 5, max threads: 5 * Environment: development * Listening on tcp://0.0.0.0:3000 Exiting /Users/XinYing/.rvm/gems/ruby-2.3.1/gems/puma-3.8.2/lib/puma/binder.rb:269:in `initialize': Address already in use - bind(2) for \"0.0.0.0\" port 3000 (Errno::EADDRINUSE)   處理方式   先查佔用該port的PID  這邊舉例port3000   $ lsof -i tcp:3000  #OMMAND   PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME #ruby    28143 ANXGANG   19u  IPv4 0xaacecc8b906857cf      0t0  TCP *:hbci (LISTEN)   根據PID強制刪除   $ kill -9 28143   備註   雖然是月經文，但因為指令實在太難記，特別紀錄下：     lsof：  list open files   -i: select IPv[46] files      參考         http://stackoverflow.com/questions/31039998/address-already-in-use-bind2-errnoeaddrinuse     ","categories": [],
        "tags": [],
        "url": "/rails-address-already-in-use-bind2-errnoeaddrinuse/",
        "teaser": null
      },{
        "title": "[Capistrano] 建立遠端 rails:console ",
        "excerpt":"github   https://github.com/ydkn/capistrano-rails-console   設定   1. gemfile  group :development do   gem 'capistrano',         '~&gt; 3.6.0', require: false   gem 'capistrano-rvm',     '~&gt; 0.1',   require: false   gem 'capistrano-rails',   '~&gt; 1.1.7', require: false   gem 'capistrano-bundler', '~&gt; 1.1.4', require: false   gem 'capistrano3-puma',   '~&gt; 1.2.1', require: false + gem 'capistrano-rails-console', require: false end   2. capfile   require 'capistrano/rails' require 'capistrano/rvm' require 'capistrano/bundler' require 'capistrano/rails/assets' require 'capistrano/rails/migrations' + require 'capistrano/rails/console' require 'capistrano/puma'   使用方式   $ cap production rails:console $ cap production rails:dbconsole   故障排除  若遇到不理你的狀況，如下   $ cap production rails:console Usage:   rails new APP_PATH [options]  Options:   -r, [--ruby=PATH]                                    # Path to the Ruby binary of your choice    bala bala bala....   應該是因為capistraon3的問題 請至deploy.rb，將bin從linked_dirs清單中移除，再重新deploy一次即可  set :linked_dirs,  %w{log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}       參考         https://github.com/rbenv/rbenv/issues/718     ","categories": [],
        "tags": [],
        "url": "/capistrano-establish-a-remote-railsconsole/",
        "teaser": null
      },{
        "title": "[Capistrano] 建立查看log指令",
        "excerpt":"建立logs指令   deploy.rb  namespace :logs do   desc \"tail rails logs\"   task :rails do     on roles(:app) do       execute \"tail -f #{shared_path}/log/#{fetch(:rails_env)}.log\"     end   end      desc \"tail sidekiq logs\"   task :sidekiq do     on roles(:app) do       execute \"tail -f #{shared_path}/log/sidekiq.log\"     end   end      #[想要其他的log就自行再增加]...    end   使用說明   $ cap production logs:rails $ cap production logs:sidekiq   註: tail -f &lt;your_log_path&gt; 會即時顯示最新的log      參考         http://www.talkingquickly.co.uk/2013/12/tailing-log-files-with-capistrano-3/     ","categories": [],
        "tags": [],
        "url": "/capistrano-set-up-viewing-log-instructions/",
        "teaser": null
      },{
        "title": "[Win10] 打造你的Rails on Win10開發環境",
        "excerpt":"       安裝 Ubuntu on Windows  ***注意: 微軟已調整安裝方式，目前請由 windwos store 搜尋 ubuntu 安裝     首先你要到設定中，「更新與安全性」裡頭的「開發人員專用」下面，打開「開發人員模式。」    再到「控制台」中的「程式和功能」，點選「開啟或關閉Windows功能」，裡頭有一個「適用於Linux的Windows子系統」項目將它打勾。    啟動之後要等一下安裝必要的工具，裝好後需要重新啟動。   打開Windows命令列， 輸入bash，再輸入Y，等待安裝完成即可。(最後要輸入使用者帳戶及密碼)    安裝完成後，即可看到bash程式    安裝 oh-my-zsh     直接按【開始】&gt;【Windows 上 ubuntu 的 bash】 來安裝   輸入安裝指令     $ sudo apt-get install zsh -y           進行初次設定，請輸入zsh再按”2”來建立預設的環境     $ zsh           設定預設啟動zsh     $ nano .bashrc          於最上方加入這幾行程式碼      # Launch Zsh if [ -t 1 ]; then exec zsh fi          加完後按下 Ctrl+O 並enter存檔，再按下 Ctrl+X 離開 如此一來當你再次開啟ubuntu bash就會預設使用zsh了 但此時請先把目前的視窗縮小備用，另外開啟來測試 (避免設定失敗打不開新視窗，保留一個可以使用的視窗)       安裝 oh-my-zsh  $ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh $ cp ~/.zshrc ~/.zshrc.orig $ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  設定顯示名稱及修改主題  $ nano  ~/.zshrc  # [path] ~/.zshrc DEFAULT_USER=\"ANX\"  #最上方輸入自定義的顯示名稱(請將ANX改成你的名字) ZSH_THEME=\"agnoster\" #找到ZSH_THEME把佈景改為agnoster   調整佈景的顯示(顯示自定義名稱、Rails版本號、特殊符號等)顯示  $ vim  ~/.zshrc  在命令模式下，移至首行按dG刪除全文 再將以下內容複製，於插入模式貼上 agnoster.zsh-theme 最後於命令模式按下 :wq 存檔並離開   安裝 cmder  因為原生的cmd實在很醜，這邊使用cmder來作為我們開發用的console，調整後的cmder幾乎和我mac的iterm2長得一樣      至 http://cmder.net/  下載最新版本cmder (簡單版即可)   直接解壓縮至D:\\cmder，並執行cmder.exe   建立開啟bash的路徑 須設定預設使用bash程式，才會在ubuntu環境中 因此我們建立一個bash::ubuntu(名稱可以自己取)，並輸入他的開啟位置及參數     %windir%\\system32\\bash.exe ~ -c zsh -cur_console:p                      設定預設以bash::ubuntu開啟        另外需要再安裝powerline專用字型，才能正確顯示一些圖示  PowerLine Fonts  挑一個下載並安裝字型(在window安裝)  並在設定中指定此字型     成品長這樣     安裝 rails 相關套件  $ sudo apt-get install -y build-essential git-core bison openssl libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3  autoconf libc6-dev libpcre3-dev curl libcurl4-nss-dev libxml2-dev libxslt-dev imagemagick nodejs libffi-dev   $ sudo \\curl -sSL https://get.rvm.io | bash;source ~/.rvm/scripts/rvm;rvm install 2.4.1;   $ gem install rails -v '5.1.1' -V --no-ri --no-rdoc;gem install bundler -V --no-ri --no-rdoc;   安裝 mysql  請將123456替換為自己的密碼(有兩個123456)  $ sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password 123456';sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password 123456';sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev;   安裝 nginx  $ sudo apt-get -y install nginx;  安裝 git  剛剛在安裝rails已經將git一併安裝進ubuntu中囉 如果你需要使用圖形化的git軟體如SourceTree，則需要在windows再裝一次git git下載 SourceTree下載   安裝編輯器  請選擇一款喜歡的安裝，推薦使用vscode   https://code.visualstudio.com/ 目前討論度最高的編輯器，由微軟開發的免費開源軟體，整合git、console，外掛安裝方便，開啟速度也算快。   使用方式  因為 windows bash 的目錄平常在 windows 中是看不到的 因此另外建立一個 D:/projects/ 資料夾，把專案都建在這裡 不過這樣每次開啟console都要再輸入cd  /mnt/d/projects/才能進到專案目錄很麻煩 於是進到zshrc設定檔  nano ~/.zshrc   在最後補上預設路徑  cd  /mnt/d/projects/  開發時只要開啟cmder就可以進入工作目錄   另外如果希望從 console 呼叫 windows 的檔案 如平常習慣打 code . 使用 vscode 開啟專案的話 可以再補上 alias  alias code=\"/mnt/c/Windows/System32/cmd.exe /C code\"   補充 1  在 D槽建立 /home/YOUR_USERNAME 的軟連結 就可以開啟home目錄下文件例如code ~/xxx   步驟 先在 D 槽開一個 home 的目錄，然後開啟 cmd 輸入  mklink /d D:\\home\\YOUR_USERNAME C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindo ws_79rhkp1fndgsc\\LocalState\\rootfs   補充 2  可以建立一個 虛擬磁碟(L) 來快速的存取 Linux 上的東西  subst L: C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rh kp1fndgsc\\LocalState\\rootfs      參考         Running windows ubuntu bash in cmder      Rails Install     Rails Install     Zsh Install     Uninstall Ubuntu Bash     Oh-my-Zsh     PowerLine Fonts     How to Run Windows Exe From Win10 Bash     windows symlink     ","categories": [],
        "tags": [],
        "url": "/win10-create-your-rails-development-environment-on-win10/",
        "teaser": null
      },{
        "title": "[Rails] 練習: Dynamic Select Menus",
        "excerpt":"版本  Ruby 2.3.1 / Rails 5.0.1   說明  本次實作動態下拉選單。   步驟   1. 建立model   $ rails g model country name $ rails g model state name country:belongs_to $ rails g scaffold person name country:belongs_to state:belongs_to   $ rails db:migrate   2. 建立資料(seed)  (預先準備了兩個csv在根目錄)   # [path] seed.rb require 'csv'  puts \"Importing countries...\" CSV.foreach(Rails.root.join(\"countries.csv\"), headers: true) do |row|   Country.create! do |country|     country.id = row[0]     country.name = row[1]   end end  puts \"Importing states...\" CSV.foreach(Rails.root.join(\"states.csv\"), headers: true) do |row|   State.create! do |state|     state.name = row[0]     state.country_id = row[2]   end end   執行  $ rails db:seed   3. 調整 model   # [path] conutry.rb class Country &lt; ApplicationRecord   has_many :state   has_many :people end   # [path] state.rb class State &lt; ApplicationRecord   belongs_to :country   has_many :people end   4. 加入route   # [path] route.rb Rails.application.routes.draw do   resources :people   root 'people#index' end   可以開啟server來看  $ rails s   5. 調整 people/_form.html.erb     &lt;div class=\"field\"&gt;     &lt;%= f.label :country_id %&gt;     &lt;%= f.collection_select :country_id, Country.order(:name), :id, :name, include_blank: true %&gt;   &lt;/div&gt;   &lt;div class=\"field\"&gt;     &lt;%= f.label :state_id, \"State or Province\" %&gt;     &lt;%= f.grouped_collection_select :state_id, Country.order(:name), :states, :name, :id, :name, include_blank: true %&gt;   &lt;/div&gt;    6. 調整people.js  // [path] people.js jQuery(function() {   var states;   $('#person_state_id').parent().hide();   states = $('#person_state_id').html();   return $('#person_country_id').change(function() {     var country, escaped_country, options;     country = $('#person_country_id :selected').text();     escaped_country = country.replace(/([ #;&amp;,.+*~\\':\"!^$[\\]()=&gt;|\\/@])/g, '\\\\$1');     options = $(states).filter(\"optgroup[label='\" + escaped_country + \"']\").html();     if (options) {       $('#person_state_id').html(options);       return $('#person_state_id').parent().show();     } else {       $('#person_state_id').empty();       return $('#person_state_id').parent().hide();     }   }); });      參考         https://github.com/railscasts/088-dynamic-select-menus-revised     http://railscasts.com/episodes/88-dynamic-select-menus-revised      ","categories": [],
        "tags": [],
        "url": "/rails-practice-dynamic-select-menus/",
        "teaser": null
      },{
        "title": "[Redis] Web Client工具 Redis-commander ",
        "excerpt":"前言   之前一直找不到好用的Redis Client端介面，最近剛好找到這個還不錯，web介面想開再開起來，紀錄一下。   Github   https://github.com/joeferner/redis-commander   安裝方式   $ npm install -g redis-commander   使用方式   $ redis-commander   他預設會使用 http://localhost:8081 開啟 關閉 ctrl+c 即可   其他指令  $ redis-commander --help Options:   --redis-port                    The port to find redis on.         [string]   --redis-host                    The host to find redis on.         [string]   --redis-socket                  The unix-socket to find redis on.  [string]   --redis-password                The redis password.                [string]   --redis-db                      The redis database.                [string]   --http-auth-username, --http-u  The http authorisation username.   [string]   --http-auth-password, --http-p  The http authorisation password.   [string]   --port, -p                      The port to run the server on.     [string]  [default: 8081]   --address, -a                   The address to run the server on   [string]  [default: 0.0.0.0]   故障排除   如遇到下列錯誤訊息(權限問題)  npm ERR! Please include the following file with any support request: npm ERR!     /home/deploy/npm-debug.log   這邊使用sudo安裝，加上nodejs-legancy解決  $ sudo npm install -g redis-commander $ sudo apt-get install nodejs-legacy      參考         https://github.com/joeferner/redis-commander     https://github.com/nodejs/node-v0.x-archive/issues/3911     ","categories": [],
        "tags": [],
        "url": "/redis-web-client-tools-redis-commander/",
        "teaser": null
      },{
        "title": "[Rails] Sidekiq同一Redis server兩個project衝突處理",
        "excerpt":"前言  當兩個project共用一個redis時，會發現sidekiq work有時候會被吃掉。   處理方式1 - 直接指定切不同db  這時候簡單的處理方式就是加上”/X”數字去區分不同的project 只要到 config/initializers/sidekiq.rb 加入以下行數即可      在project1中，使用0號db ```rb     [path] config/initializers/sidekiq.rb      Sidekiq.configure_server do |config|   config.redis = { url: ‘redis://localhost:6379/0’ } end       Sidekiq.configure_client do |config|   config.redis = { url: ‘redis://localhost:6379/0’ } end   2. 在project2中，使用1號db ```rb # [path] config/initializers/sidekiq.rb Sidekiq.configure_server do |config|   config.redis = { url: 'redis://localhost:6379/1' } end  Sidekiq.configure_client do |config|   config.redis = { url: 'redis://localhost:6379/1' } end   以此類推 請自行確定好db不會重複   處理方式2 - 使用namespace自動切分不同db  另外的處理方式就是加上namespace區分不同的project 只要到 config/initializers/sidekiq.rb 加入以下行數即可   # [path] config/initializers/sidekiq.rb Sidekiq.configure_server do |config|   config.redis = { url: 'redis://localhost:6379', namespace: 'YOUR_PROJECT_NAME' } end  Sidekiq.configure_client do |config|   config.redis = { url: 'redis://localhost:6379', namespace: 'YOUR_PROJECT_NAME'  } end  他就能夠自動切換db     某版本後可能要補安裝 gem 'redis-namespace'    補充  使用redis-client去查看實際資料庫，會發現設定了namespace後 他會自動幫你把兩個project切到不同的db來防止衝突發生      參考         https://codedecoder.wordpress.com/2014/02/27/multiple-project-single-sidekiq-daemon-instance-one-machine/     https://ruby-china.org/topics/27890     ","categories": [],
        "tags": [],
        "url": "/1718080/",
        "teaser": null
      },{
        "title": "[Rails] facebook-omniauth 登入問題 (Invalid credentials)",
        "excerpt":"問題   最近facebook都無法登入，原本以為是我不小心動到什麼， 後來才發現我所有的project都不能登入了。 出現的錯誤訊息如下   Authentication failure! invalid_credentials: OAuth2::Error, : {\"error\":{\"message\":\"This authorization code has been used.\",\"type\":\"OAuthException\",\"code\":100}}   解法   爬文才知道原來facebook API在2.4之後的版本都需要補上json解析   # [path] devise.rb config.omniauth :facebook,     APP_ID,     APP_SECRET,     token_params: { parse: :json } #補上此行   補上後馬上就可以登入了      參考         http://stackoverflow.com/questions/16176208/rails-could-not-authenticate-you-from-facebook-because-invalid-credentials     ","categories": [],
        "tags": [],
        "url": "/1722224/",
        "teaser": null
      },{
        "title": "[Rails] hash相加方式",
        "excerpt":"加入  class Hash     def +(hash)       temp = Hash.new       self.each do |key, |         temp[key] = self[key] + hash[key] unless hash[key].nil?       end       hash.update(temp)       self.update(hash)     end   end     結果  hash = {\"a\" =&gt; 1, \"b\" =&gt; 1, \"c\" =&gt; 1, \"d\" =&gt; 1 }   hash2 = {\"a\" =&gt; 2, \"b\" =&gt; 3, \"d\" =&gt; 4 }   hash3 = hash + hash2   puts hash3  # =&gt; {\"a\"=&gt;3, \"b\"=&gt;4, \"c\"=&gt;1, \"d\"=&gt;5}        參考         http://eric-gao.iteye.com/blog/558935     ","categories": [],
        "tags": [],
        "url": "/rails-hash-sum/",
        "teaser": null
      },{
        "title": "[心得] 炫耀學習法",
        "excerpt":"訣竅      不懂裝懂 - 雖然不懂，但是要讓人以為你很懂   被動找解 - 當有人覺得你很猛，問你的時候，再去找解答，並回答他   繼續炫耀 - 當你被動地找到解答後，想必你也懂了，可以更大肆地宣傳   持續不懈 - 當你的不懂與解答日月累積後，就變實力和成就感   .# 分享你才剛弄懂的東西 .# 分享你還不懂的東西 .# 分享就對了，不然別人還以為我不懂  ","categories": [],
        "tags": [],
        "url": "/experience-showing-off-learning-method/",
        "teaser": null
      },{
        "title": "[English] AEE 729: How to Enter a Conversation in English with Guns Blazing",
        "excerpt":"廣播    筆記   sleepy       參考         https://www.allearsenglish.com/aee-729-enter-conversation-english-guns-blazing/     ","categories": [],
        "tags": [],
        "url": "/1765097/",
        "teaser": null
      },{
        "title": "[Redis] 問題 MISCONF Redis is configured to save RDB snapshots",
        "excerpt":"問題  用sidekiq跑排程，在Redis使用了一段時間後，突然出現以下問題，導致所有排程都暫停      MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error. Redis被配置為保存數據快照，但它目前不能持久化到硬碟。用來修改集合數據的命令不能使用。請查看Redis紀錄的詳細錯誤訊息。    總而言之就是因為要存快照，但是又因為不明原因存不起來的問題。   解決方式   因為我的Redis只是拿來做排程，資料庫本身並沒有什麼重要資料，乾脆直接取消快照以免再發生此問題   先進入redis-cli命令列，輸入下列設定  $ redis-cli 127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no OK   最後再重啟一下sidekiq，就大功告成      參考         http://stackoverflow.com/questions/19581059/misconf-redis-is-configured-to-save-rdb-snapshots     http://www.jianshu.com/p/3aaf21dd34d6     ","categories": [],
        "tags": [],
        "url": "/redis-problem-misconf-redis-is-configured-to-save-rdb-snapshots/",
        "teaser": null
      },{
        "title": "[Rails] 每個月份的loop",
        "excerpt":"不錯的做法   start_date = 1.week.ago.to_date end_date = Date.today months = (start_date..end_date).select{|date| date.day==1}.map{|date| [date.beginning_of_month, date.end_of_month]}       參考         http://stackoverflow.com/questions/13898795/how-to-loop-through-months-in-ruby-on-rails     ","categories": [],
        "tags": [],
        "url": "/rails-each-month-of-loop/",
        "teaser": null
      },{
        "title": "[Capstrano] Server管理方案 Tasks+Recipes+Monit from Railscasts ",
        "excerpt":"介紹   參考Railscasts的capstrano系列文章，讓我們使用完整的Server管理及監控方案，所有項目都可以快速建立完成，並自動後續監控及重啟Service的動作，讓我們可以安心地喝杯咖啡，不用手忙腳亂。   Capstrano Tasks  基本的Capstrano介紹使用   Railscasts PRO #133 Capistrano Tasks (revised)    github   Capstrano Recipes  這邊使用Capstrano Recipes來建立一些如nginx、puma、mysql等Service的基本設定值 若建立新Server時就不需要再大費周章重新設定。   Railscasts PRO #337 Capistrano Recipes (pro)    github   Monit with Capstrano  Monit是一個監控系統的套件，他可以偵測系統一些服務是否正確啟動，設定條件讓他自動重啟，並可以設定mail自動通知 但一般來說這些設定方式需要遠端登入至/etc/monit/conf.d來進行調整。   Railscasts PRO #375 Monit (pro)    github      參考         https://ihower.tw/rails/background-process.html     http://ccaloha.cc/blog/2015/05/18/monitoring-your-ubuntu-machine-for-dummies/      ","categories": [],
        "tags": [],
        "url": "/capstrano-server-management-tasks-recipes-monit-from-railscasts/",
        "teaser": null
      },{
        "title": "[jQuery] Tab Active開啟或關閉",
        "excerpt":"不錯的方式   $(this).addClass('active').siblings().removeClass('active');      參考         http://stackoverflow.com/questions/12687085/jquery-remove-class-if-other-element-is-clicked     ","categories": [],
        "tags": [],
        "url": "/1790136/",
        "teaser": null
      },{
        "title": "[Rails] 關於TimeZone的設定",
        "excerpt":"顯示Timezone  從資料庫取出來後才轉換為該時區的時間  config.time_zone = 'Taipei'   DB Timezone  model的Timezone，也就是資料庫裡面的datetime存法 Rails預設是使用UTC，但是對於常常在直接使用資料庫查詢資料的人實在是很痛苦， 可以改為以local時區預設存入資料庫  config.active_record.default_timezone = :local      參考         http://stackoverflow.com/questions/32185941/how-set-my-timezone-correctly-to-save-a-record-correctly     ","categories": [],
        "tags": [],
        "url": "/rails-on-timezone-setting/",
        "teaser": null
      },{
        "title": "[Devise] 使用omniAuth註冊後，轉至使用者編輯頁面補填其他資訊",
        "excerpt":"前言   本次需求，在facebook登入後，仍希望轉至使用者編輯頁面，讓使用者補填電話及密碼等資訊，否則該帳號不予以啟動。   override after_sign_in_path_for  class ApplicationController &lt; ActionController::Base   protect_from_forgery with: :exception   def after_sign_in_path_for(resource)     if resource.phone.nil?       edit_user_path     else       super     end   end end      參考         http://stackoverflow.com/questions/32471885/how-does-sign-in-and-redirect-in-devise-work     https://github.com/plataformatec/devise/wiki/How-To:-redirect-to-a-specific-page-on-successful-sign-in     ","categories": [],
        "tags": [],
        "url": "/devise-use-omniauth-after-registering-goto-users-from-editing-pages-to-make-up-for-other-information/",
        "teaser": null
      },{
        "title": "[Rails] 自訂sanitize",
        "excerpt":"基本使用方式  &lt;%= sanitize @comment.body %&gt;   自定義允許的tags及attributes  &lt;%= sanitize @comment.body, tags: %w(strong em a), attributes: %w(href) %&gt;   全域自定義允許的tags及attributes   # [path] application.rb config.action_view.sanitized_allowed_tags = %w(strong em b i p code pre tt samp kbd var sub sup dfn cite big small address hr br div span h1 h2 h3 h4 h5 h6 ul ol li dl dt dd abbr acronym a img blockquote del ins) config.action_view.sanitized_allowed_attributes = %w(href src style width height alt cite datetime title class name xml:lang abbr)  &lt;%= sanitize @comment.body %&gt;   自定義一個module來使用  class CommentScrubber &lt; Rails::Html::PermitScrubber   def initialize     super     self.tags = %w( form script comment blockquote )     self.attributes = %w( style )   end    def skip_node?(node)     node.text?   end end  &lt;%= sanitize @comment.body, scrubber: CommentScrubber.new %&gt;      參考         http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html     https://ihower.tw/rails/actionview-helpers.html     ","categories": [],
        "tags": [],
        "url": "/1839320/",
        "teaser": null
      },{
        "title": "[Rails] paperclip圖片是否存在判斷",
        "excerpt":"原本使用   &lt;% if user.photo.present? %&gt; # 總是ture   &lt;%= image_tag(user.photo.url) %&gt; &lt;% end %&gt;   改使用exists判斷   &lt;% if user.photo.exists? %&gt;    &lt;%= image_tag(user.photo.url) %&gt; &lt;% end %&gt;      參考         https://makandracards.com/makandra/1419-check-whether-a-paperclip-attachment-exists     ","categories": [],
        "tags": [],
        "url": "/1839447/",
        "teaser": null
      },{
        "title": "[Rails] Using VueJS for Nested Forms with Rails",
        "excerpt":"介紹  本文為 GoRails 的 Using VueJS for Nested Forms with Rails 練習 有興趣可以參考影片及git Video Part1 Video Part2 Git   準備工作     更新到 Rails 5.1   先安裝好npm   安裝新專案   $ rails new gorails --webpack=vue   $ git add . $ git commit -m \"initial commit\" $ git checkout -b 'episode-184'  #開個新branch做此專案  補上jQuery  因為rails 5 取消了原本預設的jQuery 這邊建議還是先補上來，因為很多舊gem還沒把底層改為javascript   # [path] gemfile gem 'jquery-rails'   // [path] application.js //= require rails-ujs //= require turbolinks //= require jquery   $ bundle install   建立model  此範例使用team及player來做nested from  $ rails g model team name  $ rails g model player name position team:belongs_to   $ rake db:migrate   補上關聯及接受nested form  # [path] team.rb class Team &lt; ApplicationRecord   has_many :players, dependent: :destroy   accepts_nested_attributes_for :players, allow_destroy: true end   建立Controller及View  這邊使用scaffold_controller快速搭建一個基本的team的CRUD (在已存在model時建立scaffold)   $ rails g scaffold_controller team name   補上player_attributes的params  # [path] team_controller.rb def team_params   params.require(:team).permit(:name, players_attributes: [:id, :name, :position, :_destroy]) end   建立route   # [path] routes.rb resources :teams root \"teams#index\"   調整vue進入點   // [path] hello_vue.js import Vue from 'vue/dist/vue.esm' import TurbolinksAdapter from 'vue-turbolinks' import VueResource from 'vue-resource'  Vue.use(VueResource)  document.addEventListener('turbolinks:load', () =&gt; {   Vue.http.headers.common['X-CSRF-Token'] = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')   var element = document.getElementById('team-form')   if (element != null){     var team = JSON.parse(element.dataset.team)     var players_attributes = JSON.parse(element.dataset.playersAttributes)     players_attributes.forEach(function(player){ player._destroy = null})     team.players_attribute = players_attributes      var app = new Vue({       el: element,       mixins: [TurbolinksAdapter],       data: function(){         return { team: team }       }     })      console.log(app);   } })   &lt;!-- [path] app.vue --&gt; &lt;%= content_tag :div,   id: 'team-form',   data: {     team: team.to_json(except: [:created_at, :updated_at]),     players_attributes: team.players.to_json(except: [:team_id, :created_at, :updated_at]),   } do %&gt;  &lt;label for=\"\"&gt;Team name&lt;/label&gt; &lt;input type=\"text\" v-model=\"team.name\" &gt;  &lt;% end %&gt;   $ yarn add vue-resource $ yarn add vue-turbolinks $ rails webpacker:compile   $ ./bin/webpack-dev-server $ rails s       參考         Video Part1     Video Part2     Git     https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b     ","categories": [],
        "tags": [],
        "url": "/1845114/",
        "teaser": null
      },{
        "title": "[Git] 修改最後一次提交方式",
        "excerpt":"方法一：直接使用–amend調整  #先修改需要修改的地方。 $ git add . $ git commit –amend #會跳出vim畫面，調整好後輸入:wq離開即可   方法二: 先reset，再調整   $ git reset HEAD^ #重新修改 $ git add . $ git commit -m “MSG”   方法三: 使用rebase調整   1. 查看修改  $ git rebase -i master~1 //最後一次 $ git rebase -i master~5 //最後五次   2. 顯示結果如下，修改 pick 為 edit ，並 :wq 存檔離開   pick 92b495b 2009-08-08: ×××××××  # Rebase 9ef2b1f..92b495b onto 9ef2b1f # # Commands: #  pick = use commit #  edit = use commit, but stop for amending #  squash = use commit, but meld into previous commit # # If you remove a line here THAT COMMIT WILL BE LOST. # However, if you remove everything, the rebase will be aborted. #   3. 命令列顯示   Rebasing (1/1) You can amend the commit now, with  git commit --amend  4. 使用 git commit –amend 进行修改，完成后 :wq 退出   $ git commit --amend   5. 使用 git rebase –continue 完成操作   $ git rebase --continue      參考         http://blog.csdn.net/tangkegagalikaiwu/article/details/8542827     ","categories": [],
        "tags": [],
        "url": "/1846057/",
        "teaser": null
      },{
        "title": "[預計] 一天一專案",
        "excerpt":"域名商  匿名     可搜尋域名   可註冊/登入 使用者   可購買域名   顯示已購買域名   可自訂DNS   可自動續約   待辦事項  匿名     介紹頁面   可註冊/登入   可建立暫時專案   可建立暫時待辦事項   使用者     可建立專案   可建立待辦事項   團體訂便當  匿名     使用方式   可註冊/登入 使用者  -可建立公司、組織 -可邀請其他使用者 - email  -可建立訂單   電商  ","categories": [],
        "tags": [],
        "url": "/expected-wants-to-do-in-the-near-future-project/",
        "teaser": null
      },{
        "title": "[Vue] Learn Vue 2 (1) - Basic Data Binding",
        "excerpt":"   前言   本教學整理自laracasts中的Learn Vue 2: Step By Step，如有興趣或是有任何問題也可以自行參考影片教學。   載入Vue.js   首先，我們必須載入Vue.js才能使用，請直接至Vue.js官網，找到install CDN的頁面，至我們的網頁中加入   &lt;script src=\"https://unpkg.com/vue@2.3.3\"&gt;&lt;/script&gt;   使用Vue做簡易的 Data Binding   以下舉了一個簡單的例子做說明   &lt;div id=\"root\"&gt;   &lt;input type=\"text\" id=\"input\" v-model=\"message\"&gt; &lt;/div&gt;  &lt;script&gt;   new Vue({     el: '#root',     data: {       message: 'Hello World'     }   }) &lt;/script&gt;      使用 new Vue() 建立一個新的Vue物件   此Vue物件中，有一些特定參數   – el: 表示該Vue物件render的範圍，對應到頁面指定的元素(可以用CSS選擇方式指定，例如本範例的#root表示此Vue運作範圍是id為root的這個div)   – data: 表示宣告的變數(可以透過json格式宣告多個變數或array)   所以我們需要把input放在root這個div中，才能使用到Vue   v-model則是讓我們進行資料綁定的方式，如此範例input的v-model為message，表示此input的值就綁定在Vue物件中message的變數，改變message的值，此input也會隨之改變，反之亦然。   小提示  寫CSS的時候，習慣的selector是class，而寫javascript時，就習慣用id去控制， 那麼Vue則是直接用v-model去綁定。習慣後就會發現，其實沒有這麼難理解，      CSS 之於 class   相當於 javascript 之於 id   相當於 Vue 之於 v-model  ","categories": [],
        "tags": [],
        "url": "/1902310/",
        "teaser": null
      },{
        "title": "[Rails] method的params",
        "excerpt":"Receive as array:   def some_func(*args)   puts args.count end   some_func(\"x\", nil) # 2   Send and receive as hash:   def some_func(**args)   puts args.count end   some_func(a: \"x\", b: nil) # 2  ","categories": [],
        "tags": [],
        "url": "/rails-method-params/",
        "teaser": null
      },{
        "title": "[Rails] Nested Form by simple_form",
        "excerpt":"範例  # 站點分類 class Market &lt; ActiveRecord::Base   acts_as_nested_set counter_cache: :children_count end  # 商品 class Product &lt; ApplicationRecord   has_many :publishes, class_name: \"ProductPublish\"   accepts_nested_attributes_for :publishes, allow_destroy: true end  # 商品上架站點 class ProductMarket &lt; ApplicationRecord   belongs_to :product, dependent: :delete end   第一種方式：在新增的時候建立完整項目  在新增的時候就一次把所有項目新增到資料庫 編輯時只顯示已經新增的項目  # [path] controllers/products_controller.rb def new   @Product = Product.new   Market.all.each do |market|     @Product.publishes.build(market_id: market.id)   end end   &lt;!-- [path] views/products/_form.html.erb --&gt; &lt;%= simple_form_for @Product do |f| %&gt;   &lt;%= f.input :name %&gt;   &lt;%= f.simple_fields_for :markets do |ff| %&gt;   \t&lt;%= ff.label :title, \"Title\" %&gt;   &lt;% end %&gt;   &lt;p&gt;&lt;%= f.submit \"Submit\" %&gt;&lt;/p&gt; &lt;% end %&gt;   第二種方式：新增/編輯皆顯示所有項目  所有項目都顯示，沒填寫的留空 手動指定哪些要新增，哪些項目要更新 這樣在新增/編輯都適用   &lt;!-- [path] views/products/_form.html.erb --&gt; &lt;%= simple_form_for @Product do |f| %&gt;   &lt;%= f.input :name %&gt; \t&lt;%  Market.all.each do |market| %&gt;     &lt;% market_model = @product.markets.find_by_market_id(market.id) || @product.markets.new %&gt;     &lt;%= f.simple_fields_for :markets, market_model do |ff| %&gt;       &lt;%= ff.label :title, \"Title\" %&gt;     &lt;% end %&gt;   &lt;% end\t%&gt;   &lt;p&gt;&lt;%= f.submit \"Submit\" %&gt;&lt;/p&gt; &lt;% end %&gt;      參考         http://railscasts.com/episodes/196-nested-model-form-part-1     ","categories": [],
        "tags": [],
        "url": "/2072586/",
        "teaser": null
      },{
        "title": "[MAC] 在PC上安裝MacOS的方式",
        "excerpt":"方法  有以下兩種方式     黑蘋果 -  類似原生硬體配合要求較高   VM - 基本上都沒問題，但速度較慢   1. 黑蘋果   安裝方式   2. VM  建議裝10.11    有加速的程式，執行後可以接近原生速度   只下載就好其它不用看   載點位置   可以裝VM player就好   安裝方式   載入ISO解開zip放到根目錄執行   加速方式  ","categories": [],
        "tags": [],
        "url": "/mac-install-macos-on-pc/",
        "teaser": null
      },{
        "title": "[Rails] Sidekiq API",
        "excerpt":"取得 Queue  Sidekiq::Queue.all \t# 所有的Queue Sidekiq::Queue.new \t# \"default\" Queue Sidekiq::Queue.new(\"mailer\") # \"mailer\" Queue   查詢xx Queue裡面的Job  Sidekiq::Queue.new(\"mailer\").find_all #所有\"mailer\" Queue 裡面的Jobs Sidekiq::Queue.new(\"mailer\").find(jid) #取得\"mailer\" Queue 特定 jid 的Job   其他  Sidekiq::Queue.new.size # 取得Job數量 =&gt; 4 Sidekiq::Queue.new.clear # 清除所有Job   Job操作  queue = Sidekiq::Queue.new(\"mailer\") queue.each do |job|   job.klass # =&gt; 'MyWorker'   job.args # =&gt; [1, 2, 3]   job.jid # 'abcdef1234567890'   job.delete #刪除 end      參考         Sidekiq API     ","categories": [],
        "tags": [],
        "url": "/2088452/",
        "teaser": null
      },{
        "title": "[Rails] 自訂 Sidekiq web 介面",
        "excerpt":"首先   加入這行  # [path] route.rb require 'sidekiq/web' Sidekiq::Web.set 'views', File.join(Rails.root, 'app', 'views', 'sidekiq')  然後去sidekiq github把web/views裡面所有文件，複製到app/views/sidekiq/   功能  如要使用sidekiq功能，可以在自行加入sidekiq的class   class Sidekiq::Web   post \"/queues/:name/pause\" do     Sidekiq::Queue[params[:name]].pause     redirect_with_query(\"#{root_path}queues\")   end   post \"/queues/:name/unpause\" do     Sidekiq::Queue[params[:name]].unpause     redirect_with_query(\"#{root_path}queues\")   end end      參考         http://tech.verbinnen.org/ruby/customizing-sidekiq-web-interface/     ","categories": [],
        "tags": [],
        "url": "/2088649/",
        "teaser": null
      },{
        "title": "[MSSQL] SQL語法筆記",
        "excerpt":"字串  分隔字串擷取(類似split)   SELECT PARSENAME(REPLACE('Hello John Smith', ' ', '.'), 2)  -- =&gt; Hello  SELECT PARSENAME(REPLACE('Hello John Smith', ' ', '.'), 0)  -- =&gt; Smith   時間   時間差  SELECT DATEDIFF(DAY,GETDATE(),'2017-08-01') -- =&gt; 4  DATEDIFF(day, DATEADD(day, -365, GETDATE()), a.PaidDate) &gt; 0 -- =&gt; 5   ","categories": [],
        "tags": [],
        "url": "/2090199/",
        "teaser": null
      },{
        "title": "[Windows] 不想買水銀電池，時間同步修改",
        "excerpt":"修改同步頻率  regedit 找到 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpClient      找到 SpecialPollInterval 從 604800(7天) 改為 86400(1天)   新增 DWORD值，名稱為“SpecialInterval”，值為1   修改開機同步  服務 找到windows time服務 改成”自動”或”自動(延遲啟用)”   其他指令備用  net start w32time net stop w32time w32tm /unregister w32tm /register net start w32time      參考         https://wenku.baidu.com/view/3224b4b5770bf78a6529544a.html     https://www.mobile01.com/topicdetail.php?f=300&amp;t=1214190     ","categories": [],
        "tags": [],
        "url": "/2090252/",
        "teaser": null
      },{
        "title": "[Vue] Nuxt.js + Element.js 快速建立專案",
        "excerpt":"知識      Vue - 前端框架   Nuxt - Vue通用應用框架(快速架構網站)   Element - Vue的元件框架(快速layout)   安裝          nodejs 網站            npm 網站            vue-cli 網站            nuxt 網站            element 網站       教學   Nuxt  線上讀書會-nuxt入門   Element     Nuxt  ","categories": [],
        "tags": [],
        "url": "/vue-nuxt-js-element-js-quickly-build-projects/",
        "teaser": null
      },{
        "title": "[Liunx] 透過windows的印表機列印",
        "excerpt":"參考網站  http://www.printmanager.com/cms.php?aid=82&amp;fullpage=1&amp;support=8   兩種方式     透過LPD指令列印   透過smb分享印表機列印   安裝CUPS  方便新增/刪除印表機，有webUI可以操作  https://www.cups.org/   Linux列印通過Windows印表機伺服器 簡介 有許多方法允許Linux客戶端通過印表機進行列印，但是有時候最好和最可行的方法是不清楚的。本文旨在概述從Windows上通過分享印表機從Linux列印時可用的選項。   什麼是CUPS？ CUPS原來是Common Unix列印系統的縮寫，多年來已經正式成為簡單的 CUPS。它是Linux和Unix系統上用於Internet列印協議的列印後台列印平台。它還包括通過線路列印機後台程式（LPD）和伺服器消息塊（SMB通過SAMBA）協議進行列印的支持。運行這個強大的常駐程式為Linux上的各種列印選項打開了大門。      常駐程式是最初為Unix系統命名的計算機，它指的是運行後台程序以提供服務。   可用的方法 有幾種方法允許使用Windows Server共享列印機到您的Linux客戶端。以下是本文中介紹的兩種方法的結論。   通過LPD列印（行式列印機常駐程式） 這通常是最簡單，最典型的選項。   主要優點/缺點：   以用戶登錄和列印的形式提交列印作業 列印作業提交包括文檔標題 簡單的安裝和安裝列印機 缺少嘗試使用SAMBA時可能會發生的常見身份驗證問題   通過Windows列印共享（SMB）列印： 此列印允許直接連接到Windows共享，並與Active Directory最佳集成，但在某些情況下可能難以支持。它使用SAMBA實現與Windows文件和列印共享的連接。   主要優點/缺點：   所有列印作業都將以最初安裝列印機的用戶身份提交，而不是用戶實際列印 稍微複雜的安裝 列印作業提交不包括文檔標題 Windows憑據作為設備URI的一部分以明文形式存儲（本指南的後面部分定義）   獲取和安裝CUPS 通常有幾種方法可用於在Linux系統上獲取和安裝CUPS。以下是每個的結論。   示例： 通過 在Fedora15內置的軟件包集合中加入列印支持來安裝CUPS   下載和安裝RPM： 如果不包括CUPS，並且不能通過內置軟件包輕鬆安裝，則通常可以從您的發行版的支持站點以及可能的其他第三方站點下載並安裝CUPS的RPM文件。定位和下載很重要，考慮兩件事情：   我是否已經下載並安裝了所有必需的軟件包？（常見的前提條件包括：gcc，libjpeg，libjpeg-devel，libpng等等。有關完整的先決條件列表，請參見www.cups.org ） 我正在為我的版本和架構下載正確的軟件包（即0x86或0x64？Linux內核版本？） 下載和編譯源碼： 最後一個選項是下載，編譯和安裝從www.cups.org直接下載的源代碼。此選項需要更高級的Linux和開發知識，超出了本指南的範圍。   CUPS管理員簡介： 現代CUPS管理員使用Web UI，使用起來變得越來越簡單直觀。以下簡要介紹了本指南中登錄並提及我們將要使用的領域。   CUPS Web UI： 通過使用以下網址的互聯網瀏覽器訪問杯子的用戶界面。您可能需要在訪問之前提供root訪問權限，或進行任何敏感的更改。   http://127.0.0.1:631   輸入地址後，應加載一個網頁，方便管理。該部分將專注於僅限於列印機。   該伺服器部分不應該與通過使用Windows伺服器列印任何東西，被混淆，這是用來設定該Linux機器作為列印伺服器。   CUPS設定文件： 您的CUPS設定，設定和驅動程式都位於/ etc / cups目錄中。主設定文件名為cupsd.conf。手動編輯這些文件超出了本指南的範圍，但很高興知道他們在那裡。   通過LPD列印（行式列印機常駐程式） - 第一部分： 第一部分專門介紹如何在Windows中啟用LPD服務。這在操作系統之間略有不同。以下步驟具體適用於各種伺服器操作系統。   設定Windows Server以提供LPD列印（Windows 2000/2003 / XP）：   1.在新增/刪除程式中打開新增/刪除Windows組件。在此位置其他網絡文件和列印服務   2.單擊[詳細信息]按鈕，並在詳細信息中檢查Unix的列印服務，然後單擊確定，然後單擊[下一步]安裝這些組件。   3.之後Windows將安裝此服務。可能會提示您安裝Windows安裝介質。   設定Windows Server以提供LPD列印服務（Windows 2008/2008 R2）：   1.運行伺服器管理器，並在“角色”中找到“列印和文檔服務”角色。   2.在該角色中，單擊新增角色服務。在這裡您可以新增LPD服務。   3.安裝角色後，即可將列印機安裝到工作站上。   設定Windows Server以提供LPD列印服務（Windows Vista / 7）：   1.打開控制面板&gt;程式和功能。在此對話框中，單擊左側的[打開或關閉Windows功能]。      將打開Windows功能對話框。找到列印和文檔服務並啟用名為LPD列印伺服器的項目，然後單擊[確定]   通過LPD列印（行式列印機常駐程式） - 第二部分： 這包括在Linux上實際安裝設備。在安裝列印機之前，您將需要以下信息。   您共享列印機的Windows伺服器的主機名或IP地址，並已安裝了用於Unix的LPD列印伺服器/列印服務。 要安裝的列印機的共享名稱。建議列印機在其共享名稱中不包含任何空格。 使用CUPS Web UI新增LPD列印機：   1.打開CUPS管理站點，然後選擇ADD Printer   接下來，將提示您選擇列印類型。在這裡，您將要選擇LPD / LPR主機或列印機。在某些情況下，您可能需要直接輸入設備URI。在這種情況下，請跳到步驟3。   3.現在，您需要輸入正確格式的*設備URI以連接到共享列印機。以下說明LPD列印機的各部分。   *設備IRL： 這是一個ü niversal ř esource 我 dentifier即用於指示協議，設備和使用CUPS當與列印機連接相關聯的其他設定一個字符串。   最終字符串輸入到CUPS新增列印機嚮導：   4.指定設備URI後，您需要為列印機命名。這是最終用戶如何在其列印機列表中看到此設備。   選擇驅動程式將是您的下一步。大多數列印機已經出了一段時間，提供了非常好的驅動程式選擇。如果您的Linux發行版似乎不包含您需要的設備的驅動程式，請查看標有“ 獲取Linux驅動程式”的部分，以訪問適當的PPD（Postscript Printer Description）文件。   6.新增列印機後，應在應用程式中進行選擇。當在Windows中查看隊列時，作業的所有者將在用戶當時登錄到Linux或列印時列出，並與源IP組合。   通過SMB列印（Windows文件和列印共享） 這包括使用簡單的共享在Linux上實際安裝設備。它不需要在Windows Server上安裝用於Unix的 LPD列印服務/列印服務。在安裝列印機之前，您將需要以下信息。   您從中共享列印機的Windows伺服器的主機名或IP地址。 您將要驗證的Windows域名。（工作組不需要） 用於連接和列印到設備的有效的Windows憑據。通常這些將是域憑據，但也可以是列印伺服器上的本地用戶。 Windows中列印機的共享名稱。 通過Windows列印機共享安裝列印機：   1.打開CUPS管理站點，然後選擇新增列印機   接下來，將提示您選擇列印類型。在這裡，您將需要通過SAMBA選擇Windows列印機。在某些情況下，您可能需要直接輸入設備URI。在這種情況下，請跳到步驟3。   3.現在，您需要輸入正確格式的*設備URI以連接到共享列印機。以下說明了SMB部分的每個部分   *設備IRL： 這是一個  ü niversal  ř esource  我 dentifier即用於指示協議，設備和使用CUPS當與列印機連接相關聯的其他設定一個字符串。   輸入到CUPS新增列印嚮導的最終字符串：   4.指定設備URI後，您需要為列印機命名。這是最終用戶如何在其列印機列表中看到此設備。   選擇驅動程式將是您的下一步。大多數列印機已經出了一段時間，提供了非常好的驅動程式選擇。如果您的Linux發行版似乎不包含您需要的設備的驅動程式，請查看標有“ 獲取Linux驅動程式”的部分，   以訪問適當的PPD（Postscript Printer Description）文件。   6.新增列印機後，應在應用程式中進行選擇。在Windows中查看隊列時，作業的所有者將以設備URI中指定的用戶身份列出，而不是用戶登錄的用戶名。   通過查看隊列中的兩個作業，可以看到使用LPD（作業1）和SAMBA（作業2）之間的區別。兩人都是以約翰·多伊（John Doe）的身份提交的，但第二個不能被正確地跟踪或記錄。   獲取Linux驅動程式 大多數Linux版本都包含豐富的驅動程式，特別是對於普通列印機，或者已經在市場上長時間使用的列印機。驅動程式以PPD文件的形式出現。以下是關於這些內容的幾個解釋以及在哪裡可以找到驅動程式。   什麼是PPD文件？ PPD文件或* PostScript列印機定義文件只是一個簡單的文本文件，用於調用要為PostScript列印作業啟用哪些功能。最初CUPS只支持可以理解PostScript列印語言的列印機。   今天可以通過增強的過濾器來支持各種各樣的列印機，使得列印作業可以被翻譯成許多其他語言，如PCL和ESCP / 2來命名。      Postcript  是一種語言，通常用於描述頁面上的內容，佈局，大小方向和項目的更多。它通常被分類為頁面描述語言。   列印機製造商： 如果您的列印機製造商提供了與CUPS兼容的產品，那麼這通常是最佳選擇，並為您的列印機提供最可靠的輸出。   CUPS： CUC網站www.cups.org擁有豐富的資源和鏈接，可為各種製造商和型號獲取支持的驅動程式。   其他來源： 有各種開源組，可以幫助創建大量支持CUPS的列印機驅動程式。幫助檢查支持的幾個例子是通過：   Linux基金會 - www.openprinting.org Gutenprint - http://gimp-print.sourceforge.net  ","categories": [],
        "tags": [],
        "url": "/liunx-use-smb-shared-printers-print-things/",
        "teaser": null
      },{
        "title": "[Rails] 10分鐘內使用HTML模板產生PDF",
        "excerpt":"[Rails] 10分鐘內使用HTML模板產生PDF      原文出處 How to Generate PDFs with HTML templates in 10 minutes with Rails    前言   為您的Web程式產生PDF並非你想像中的那麼困難。   有很多方法可以做到這一點，還有另一個好用gem，叫做Prawn，但是為了今天的教學，我將介紹另一個流行的gem，叫做wicked_pdf。   WickedPDF使用wkhtmltopdf，它允許您直接從HTML產生PDF，而不必遵守DSL。   此方式能夠更快速的達到想要的效果。   安裝步驟   Step 1: 安裝 wkhtmltopdf 和 wicked_pdf gem  # [path] gemfile gem 'wicked_pdf' gem 'wkhtmltopdf-binary'   Step 2: 執行 Generator  rails generate wicked_pdf   接下來，假設你不是透過Gemfile安裝wkhtmltopdf的binary檔案，你需要確保wicked_pdf知道在哪裡找到它們。   # [path] config/initializers/wicked_pdf.rb WickedPdf.config = {   #:wkhtmltopdf =&gt; '/usr/local/bin/wkhtmltopdf',   #:layout =&gt; \"pdf.html\",   #:exe_path =&gt; '/usr/local/bin/wkhtmltopdf' }   如果你沒有寫清楚，你可能會得到一個“Bad wkhtmltopdf’s path”的錯誤訊息。   OK你已經準備好了！現在有2個方式可以使用wicked_pdf。     從controller render。   從自建的library render。   &lt; I &gt; 從controller render   要使用它從controller呈現pdf，您需要做的是在controller方法中新增以下內容。   讓我們以發票應用為例，當用戶訪問/invoices/1時，您想產生一份pdf發票。   首先，將以下程式新增到invoices_controller.rb (或使用其他controller)   我會解釋一下每個參數是什麼意思，但請記住將它們替換為您自己的相關數據！   # [path] invoices_controller.rb   def show      @invoice = Invoice.find params[:id]      respond_to do |format|       format.pdf do         render pdf: \"file_name_of_your_choice\",                template: \"invoices/show.pdf.erb\",                locals: {:invoice =&gt; @invoice}       end     end   end     pdf: “file_name_of_your_choice” 這行表示即將輸出的pdf名稱     template: “invoices/show.pdf.erb” 這行表示使用views/invoices/show.pdf.erb當作模板     locals: {:invoice =&gt; @invoice} 這行表示將把@invoice傳入模板中    那麼什麼是invoices/show.pdf.erb？   &lt;!-- [path] show.pdf.erb --&gt; &lt;!-- app/views/invoices/show.pdf.erb --&gt;  &lt;h1&gt;&lt;%= invoice.title %&gt;&lt;/h1&gt; &lt;p&gt;&lt;%= invoice.description %&gt;&lt;/p&gt; &lt;p&gt;&lt;%= invoice.amount %&gt;&lt;/p&gt;   就像一般的htm.erb一樣，你可以使用pdf.erb，它會把它渲染到你的pdf。   如果您注意到上述程式碼，我們增加了本地參數。就像渲染部分一樣，這將允許您在view中使用您的變數。   這就是全部了。當用戶訪問/invoices/1時，就會產出一個pdf。   &lt; II &gt;從自建的library render   可能有些情況下您想要取得pdf代碼。你不一定要用它作為view的替代顯示。   在這種情況下，您將需要外部渲染您的pdf。   例如，讓我說我有一個外部庫將生成PDF，我想使用生成的PDF作為電子郵件附件。   我們該怎麼做？   首先，讓我們創建一個庫和一個類的方法。   # /lib/pdf_generator/bot.rb  module PdfGenerator   class Bot     def self.receipt(payment_details)     end   end end   好的，現在可以增加程式碼。   所以，如果你在前面的例子中注意到，我們正在使用  ActionController render PDF：…。   # invoices_controller.rb def show  ..    render pdf: \"file_name_of_your_choice\",  .. end   該PDF PARAMS是非常重要的。這告訴Rails應用程序使用WickedPDF的渲染方法來解析和創建PDF。   問題是，你不能調用ActionController外的渲染，那麼我們如何從外部的圖形庫渲染？   很簡單，我們把ActionController帶出來並使用render_to_string方法   # in bot.rb .. class Bot   def self.receipt(payment_details)     # 先宣告一個ActionController     ac = ActionController::Base.new      # 然後，我們可以複製之前的範例的輸出方式。     pdf = ac.render_to_string pdf: \"file_name_of_your_choice\",                template: \"invoices/show.pdf.erb\",                locals: {:myvariable =&gt; variable}   end end ..      進階說明 如果想要使用Application Helpers, 你可能會發現你的helpers無法在你的templates中使用。 解決方式，請以ApplicationController.new取代ActionController::Base.new。這樣就可以了！    但等等，這不是只是一個字串嗎？字串有多有用？   那麼現在你可以建立一個臨時文件來存儲pdf。   # in bot.rb ..     pdf = ac.render_to_string pdf: \"file_name_of_your_choice\",                template: \"invoices/show.pdf.erb\",                locals: {:myvariable =&gt; variable}          # lets create a Tempfile which we will use to generate an actual file to be     # attached to an e-mail     tempfile = Tempfile.new \"anynamehere.pdf\"     tempfile.binmode     tempfile.write pdf     tempfile.close     tempfile ..   所以現在PdfGenerator::Bot.receipt接收一個對象，將其解析成一個視圖，並返回產生一個漂亮的臨時文件PDF。   使用該tempfile，您可以附加到郵件程式中。   例如：   # example_mailer.rb def payment_details(details)   attachments[\"anyfilenametoo.pdf\"] = File.read(PdfGenerator::Bot.receipt(details).path)   mail(subject: .....) end   希望這可以幫助到大家！   參考          http://dchua.com/2014/10/30/generate-pdfs-with-html-templates-in-rails/     ","categories": [],
        "tags": [],
        "url": "/rails-within-10-minutes-using-a-html-template-pdf/",
        "teaser": null
      },{
        "title": "[Rails] Cocoon動態Nested Form使用方式",
        "excerpt":"前言  Cocoon可以方便快速建立動態Nested Form，避免手動寫一堆jQuery， 適合懶人、新手、不想用前端框架之人。   使用方式   # [path] gemfile gem \"cocoon\"   // [path] application.js //= require cocoon   基本用法   假設你有一個Project model：   rails g scaffold Project name:string description:string   而且這個 project 有很多 tasks:  rails g model Task description:string done:boolean project:belongs_to   你的模型是這樣關聯的：  class Project &lt; ActiveRecord::Base   has_many :tasks, inverse_of: :project   accepts_nested_attributes_for :tasks, reject_if: :all_blank, allow_destroy: true end  class Task &lt; ActiveRecord::Base   belongs_to :project end   現在我們需要一個可以動態新增和刪除任務的項目表單。   為此，我們需要一個新的或現有的 partial 取名為 _task_fields.html   params驗證部分需要加入  # [path] ProjectsController  def project_params     params.require(:project).permit(:name, :description, tasks_attributes: [:id, :description, :done, :_destroy])   end   範例   Cocoon預設要求使用link_to_add_association helper新增項目， 並將每個項目部份用partial包裝。下面的例子說明了簡單的佈局。   這邊使用SimpleForm舉例   &lt;!-- [path] projects/_form --&gt; &lt;%= simple_form_for @project do |f| %&gt;   &lt;%= f.input :name %&gt;   &lt;%= f.input :description %&gt;   &lt;h3&gt;Tasks&lt;/h3&gt;   &lt;div id=\"tasks\"&gt;     &lt;%= f.simple_fields_for :tasks do |task| %&gt;       &lt;%= render 'task_fields', f: task %&gt;     &lt;% end %&gt;     &lt;div class=\"links\"&gt;       &lt;%= link_to_add_association 'add task', f, :tasks %&gt;     &lt;/div&gt;   &lt;/div&gt;   &lt;%= f.submit %&gt; &lt;% end %&gt;   另外，我們需要新增 _task_fields 這個partial  &lt;div class=\"nested-fields\"&gt;   &lt;%= f.input :description %&gt;   &lt;%= f.input :done, as: :boolean %&gt;   &lt;%= link_to_remove_association \"remove task\", f %&gt; &lt;/div&gt;   可以參考此範例 cocoon_simple_form_demo   Helper使用方式   ###link_to_add_association                  參數       值       說明                       name       String                         f       from builder                         association       from builder       需要添加新實例的關聯（複數）的名稱（符號或字符串）                 html_options       額外的html選項（參見link_to)                         data-association-insertion-traversal       closest，next，children       jquery遍歷方法允許相對於鏈接的節點選擇。                 data-association-insertion-node       默認值：父節點       將節點的jquery選擇器作為字符串，或者以link_to_add_association節點為參數並返回節點的函數                 data-association-insertion-method       before，after，append，prepend，等默認值：before       插入新數據的jquery方法。                 partial       String       明確聲明將要使用的partial的名稱                 render_options       String       傳遞給表單構建器函數的選項（例如simple_fields_for，semantic_fields_for或fields_for）。如果它包含一個:locals包含哈希的選項，那麼它將被傳遞給部分。                 wrap_object       一個允許包裝對象的proc，特別是在使用裝飾器（例如draper）時很有用。見下面的例子。                   例如：指定partial和產生項目的地方     &lt;%= link_to_add_association ‘新增’, f, :barcodes,          partial: ‘stock/products/forms/barcode/form_barcode’,         ‘data-association-insertion-method’    =&gt; ‘before’,          ‘data-association-insertion-node’      =&gt; ‘.panel-items’,         ‘data-association-insertion-traversal’ =&gt; ‘closest’ %&gt;   link_to_remove_association                  參數       值       說明                       name       String                         f       from builder                         html_options       額外的html選項（參見link_to)                   例如： 可以使用wrapper_class指定刪除的部份（原本預設是nested-fields)  &lt;div class=\"barcode-fields\"&gt;   &lt;%= f.input :description %&gt;   &lt;%= f.input :done, as: :boolean %&gt;   &lt;%= link_to_remove_association \"remove task\", f, wrapper_class: 'barcode-fields' %&gt; &lt;/div&gt;     參考         cocoon     append item to designated position     delete not working     ","categories": [],
        "tags": [],
        "url": "/rails-dynamic-nested-cocoon-form-use/",
        "teaser": null
      },{
        "title": "[Rails] INSERT INTO 大批資料寫入資料庫",
        "excerpt":"使用方式   直接使用ActiveRecord執行SQL指令   values = users.map { |u| \"(#{mass_email.id},#{u.id})\" }.join(\",\") ActiveRecord::Base.connection.execute(\"INSERT INTO mass_email_users (mass_email_id, user_id) VALUES #{values}\")      參考         https://www.joinhandshake.com/engineering/2016/01/26/quickly-inserting-thousands-of-records-in-rails.html     ","categories": [],
        "tags": [],
        "url": "/2311749/",
        "teaser": null
      },{
        "title": "[fortige] 設定特殊的對外IP政策",
        "excerpt":"有時候你需要你的設備（比如一個SMTP服務器）擁有一個特定的出站公共IP，用於諸如反向DNS查詢之類的事情，以確保郵件的傳遞和信譽，或者你希望來自特定設備或策略的信息流出IP跟踪的手段。   在Fortigates中，如何做到這一點並不明顯，通常情況下，當你創建一個策略並通過它進行NAT通信時，Fortigate將使用它自己的公共IP分配的來源，如果你有一個靜態IP和使用您的ISP的無編號地址，那麼你可能是幸運的，你的R-DNS可能會匹配這個，但是，在大多數情況下，你將有一個單獨的虛擬IP為您的SMTP服務器是不同的，因此，你需要R-DNS查找與A-Record的匹配。   所以問題就變成了：“我如何從特定的政策獲得流量來源於我選擇的靜態公共IP？   Fortigates有一個概念叫IP Pools。   IP池是允許離開FortiGate防火牆的會話使用NAT的機制。IP池定義一個IP地址或一個IP地址範圍，作為會話持續時間的源地址。這些分配的地址將被用來代替分配給FortiGate接口的IP地址。   所以我們需要先創建一個IP Poolin Policy &amp; Objects -&gt; Objects -&gt; IP Pools：   點擊 Create New 設置 Name 將類型設置為Overload（允許多個後端設備使用這一個公共IP） 將其設置External IP Range為由ISP分配的塊中的單個地址 保存      接下來，我們需要轉到Policies該Policy &amp; Objects -&gt; Policy -&gt; IPv4部分，並從中選擇LAN -&gt; WAN包含我們的SMTP服務器的策略，然後編輯該Firewall/Network Options部分：   設置NAT為ON 選擇 Use Dynamic IP Pool 指定您之前創建的池名稱 保存      現在，通過此策略進入廣域網的任何流量都將通過IP Pool您指定的地址進行NAT ，因此，來自SMTP服務器的出站流量將來自與您的域A記錄的R-DNS查找相同的地址並導致郵件傳遞成功。  ","categories": [],
        "tags": [],
        "url": "/3481792/",
        "teaser": null
      },{
        "title": "[DigitalOcean] 如何為ram不足的空間建立swap",
        "excerpt":"   本文使用 Ubuntu 16.04 LTS    前言  提高server的回應速度和防止應用程序記憶體不足錯誤的最簡單方法之一，是加入一些swap。 在本文中，我們將介紹如何在Ubuntu 16.04中新增swap 請確認使用root登入，或使用sudo操作     警告 若server使用SSD硬碟，使用swap可能會導致硬體加速退化的問題， 因此建議在server儲存裝置hdd的情況再使用swap    加入swap      確認目前是否有建立swap     $ sudo swapon --show           確認目前空間     $ free -h            total        used        free      shared  buff/cache   available Mem:           488M         36M        104M        652K        348M        426M Swap:            0B          0B          0B           查看分區     $ df -h Filesystem      Size  Used Avail Use% Mounted on udev            238M     0  238M   0% /dev tmpfs            49M  624K   49M   2% /run /dev/vda1        20G  1.1G   18G   6% / tmpfs           245M     0  245M   0% /dev/shm tmpfs           5.0M     0  5.0M   0% /run/lock tmpfs           245M     0  245M   0% /sys/fs/cgroup tmpfs            49M     0   49M   0% /run/user/1001          /dev/vda1 就是目前主要分區，我們會從中切割一部分作為swap分區       建立分區     $ sudo fallocate -l 1G /swapfile          由於本範例中的server僅有512MB的RAM，因此我們建立一個1GB的swap。 (swap大小可依需求做調整)       驗證分區     $ ls -lh /swapfile -rw-r--r-- 1 root root 1.0G Apr 25 11:14 /swapfile           修改分區權限     $ sudo chmod 600 /swapfile $ ls -lh /swapfile -rw------- 1 root root 1.0G Apr 25 11:14 /swapfile           設定分區為swap     $ sudo mkswap /swapfile Setting up swapspace version 1, size = 1024 MiB (1073737728 bytes) no label, UUID=6e965805-2ab9-450f-aed6-577e74089dbf           啟用swap     $ sudo swapon /swapfile           驗證swap是否啟用     $ sudo swapon --show           設定自動啟用swap     備份fstab     $ sudo cp /etc/fstab /etc/fstab.bak           把swap加入fstab     $ echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab           優化設定     查詢目前Swappiness設定     $ cat /proc/sys/vm/swappiness 60                 對於desktop版本的linux，60的swappiness設置還不錯 但是對server版本來說，盡可能接近0是比較理想的            調整Swappiness設定     $ sudo sysctl vm.swappiness=10 vm.swappiness = 10           設定重開機時自動啟動     $ sudo nano /etc/sysctl.conf           在文件尾端加入      vm.swappiness=10          存檔       調整Cache Pressure設定     $ cat /proc/sys/vm/vfs_cache_pressure 100                 因為100會太快把索引的節點從系統cache刪除，保守一點則需要調低一些            調整Cache Pressure為50     $ sudo sysctl vm.vfs_cache_pressure=50 vm.vfs_cache_pressure = 50           設定開機時自動啟動     $ sudo nano /etc/sysctl.conf          在文件尾端加入      vm.vfs_cache_pressure=50          存檔          參考         How To Add Swap Space on Ubuntu 16.04     ","categories": [],
        "tags": [],
        "url": "/digitalocean-how-to-create-swap-for-space-with-low-ram/",
        "teaser": null
      },{
        "title": "[IRedMail] 如何建立自己的MailServer和WebClient端",
        "excerpt":"create dropets     3 GB Memory / 20 GB Disk / SGP1 - Ubuntu 16.04.3 x64   hostname: mail.yourdomain.com   with your ssh key   login with root by ssh key  $ ssh root@[your.ip]   update all  $ apt update; apt -y upgrade;   check hostname  $ nano /etc/hostname # mail  $ hostname # mail $ hostname -f # mail.yourdomain.com   setup hosts  make sure your domain is before localhost  $ nano /etc/hosts # 127.0.0.1   mail.yourdomain.com mail localhost localhost.localdomain     do not move other lines ex. “127.0.1.1 mail.yourdomain.com mail”    then we need to reboot once.  $ reboot   download iredmail and unzip it  $ sudo apt-get install bzip2 $ wget https://bitbucket.org/zhb/iredmail/downloads/iRedMail-0.9.7.tar.bz2 $ tar xjf iRedMail-0.9.7.tar.bz2 $ cd iRedMail-0.9.7  setup iredmail  $ bash iRedMail.sh # 1. &lt;yes&gt; # 2. where store? [/var/vmail] &lt;Next&gt; # 3. Which Http Serv.?[(*) Nginx] &lt;Next&gt; # 4. Which DB? [(*) MySQL] &lt;Next&gt; # 5. MySQL root password? [123456] &lt;Next&gt; # 6. default mail domain? [yourdomain.com] &lt;Next&gt; # 7. mail domain admin password? [123456] &lt;Next&gt; # 8. option component? [select all] &lt;Next&gt; # &lt; Question &gt; Continue? [y|N] y # ... # ...(long long waiting) # ...(we can go to next step while waiting) # ... # &lt; Question &gt; Would you like to use firewall rules provided by iRedMail? # &lt; Question &gt; File: /etc/default/iptables, with SSHD port: 22. [Y|n] n     we use ufw firewall setting for last step    after all we need to reboot  $ reboot   Setup DNS  @ 300 IN A 100.100.100.1 @ 300 IN MX 10 mail.yourdomain.com. @ 300 IN MX 20 mail.yourdomain.com. @ 300 IN TXT \"v=spf1 ip4:100.100.100.1 -all\" mail 300 IN A 100.100.100.1     DNS TEST  https://mxtoolbox.com    check our apps     Web admin panel (iRedAdmin): httpS://mail.mealbox.com.tw/iredadmin/   Roundcube webmail: httpS://mail.mealbox.com.tw/mail/   SOGo groupware: httpS://mail.mealbox.com.tw/SOGo/   * Username: postmaster@mealbox.com.tw * Password: 1234   mail sp test  https://www.mail-tester.com/   setup servername  $ sudo nano /etc/nginx/sites-conf.d/default/0-server_name.conf  server_name _;  to  server_name mail.yourdomain.com;   $ sudo nginx -t $ sudo service nginx restart   install certbot   $ sudo apt-get update $ sudo apt-get install software-properties-common $ sudo add-apt-repository ppa:certbot/certbot $ sudo apt-get update $ sudo apt-get install python-certbot-nginx  $ sudo certbot --nginx certonly  # Enter email address ? your@gmail.com  # Which names would you like to activate HTTPS for? # ------------------------------------------------------------------------------- # 1: mail.yourdomain.com # ------------------------------------------------------------------------------- # select 1   $ mv /etc/ssl/private/iRedMail.key /etc/ssl/private/iRedMail.key.bak $ mv /etc/ssl/certs/iRedMail.crt /etc/ssl/certs/iRedMail.crt.bak $ ln -s /etc/letsencrypt/live/mail.mealbox.com.tw/privkey.pem /etc/ssl/private/iRedMail.key $ ln -s /etc/letsencrypt/live/mail.mealbox.com.tw/fullchain.pem /etc/ssl/certs/iRedMail.crt   autorenew checkout  $ sudo certbot renew --dry-run   setup ufw firewall   $ sudo ufw default deny incoming $ sudo ufw default allow outgoing   $ sudo ufw allow ssh $ sudo ufw allow http $ sudo ufw allow https $ sudo ufw allow smtp $ sudo ufw allow submission $ sudo ufw allow pop3 $ sudo ufw allow pop3s $ sudo ufw allow imap $ sudo ufw allow imaps   Reference     Download the Latest iRedMail Release   Install Guide   certbot   mxtoolbox   easy let’s encrypt guide for ubuntu 16.04 iredmail server with nginx   Which network ports are open by iRedMail  ","categories": [],
        "tags": [],
        "url": "/iredmail-how-to-build-your-own-mailserver-and-webclient-end/",
        "teaser": null
      },{
        "title": "[Rails] API設計模式*",
        "excerpt":"設計模式                 Rails API                    原生預設的模式，使用原本的route控制           若是新系統，推薦使用                                       Grape API                    另外寫的模式           原有系統已經有一定規模，推薦使用，不會影響到既有系統                           1. Rails API 實作   rack-cors 設定  Access-Control-Allow-Origin 問題解決   gem 'rack-cors', require: 'rack/cors'   # config/application.rb module YourApp   class Application &lt; Rails::Application     config.middleware.insert_before 0, Rack::Cors do       allow do         origins '*'         resource '*', :headers =&gt; :any, :methods =&gt; [:get, :post, :options]       end     end \tend end   若是使用production也想要給develop使用的話需要加入此行  # production.rb config.serve_static_assets = true   還是不行的話 確認一下responce的header有可能需要設定在nginx.conf 加入Access-Control-Allow-Origin *  location @static_asset {         gzip_static on;         expires max;         add_header Cache-Control public;         add_header ETag \"\";         add_header Access-Control-Allow-Origin *;         add_header Access-Control-Request-Method *;     }   No Route 處理方式   ###   2. Grape API 實作      參考         https://github.com/cyu/rack-cors/issues/33     https://stackoverflow.com/questions/25945419/how-do-i-configure-access-control-allow-origin-with-rails-nginx-and-passenger     https://coderwall.com/p/vifllw/json-api-response-for-no-route-matches     ","categories": [],
        "tags": [],
        "url": "/4732212/",
        "teaser": null
      },{
        "title": "[Rails] Devise 多個 model 處理方式",
        "excerpt":"不同路徑  假設你已經建立好兩個model想指定他的路徑  devise_for :students, path: 's' devise_for :teachers, path: 't'  會顯示如下  http://localhost:3000/s/sign_up http://localhost:3000/t/sign_up   不同模板  如果想使用不同的template 請調整下列屬性  #config/initializers/devise.rb config.scoped_views = true  並產生對應的View  $ rails g devise:views students   自訂Controller  如果想自訂各自的controller 請使用以下指令  $ rails generate devise:controllers students  也可以自訂controller的位置  devise_for :students, path: 's', controllers: { sessions: \"students/sessions\" }      參考         https://stackoverflow.com/questions/37145991/using-devise-for-multiple-models     ","categories": [],
        "tags": [],
        "url": "/6414886/",
        "teaser": null
      },{
        "title": "[Linux] Set Up a Firewall with UFW on Ubuntu 16.04",
        "excerpt":"Install   $ sudo apt-get install ufw   Check Status   $ sudo ufw status verbose # Status: inactive # Status: active / with the rules   Normal Flow   1 . allow all ports incoming and reject all ports outgoing   $ sudo ufw default deny incoming $ sudo ufw default allow outgoing   2 . allow normal ports   $ sudo ufw allow ssh $ sudo ufw allow http $ sudo ufw allow https   3 . allow special ports (Optional)   $ sudo ufw allow 8080   4 . enable ufw firewall   $ sudo ufw enable   Other Instruction (Optional)   1 . allow ports section  $ sudo ufw allow 6000:6007/tcp $ sudo ufw allow 6000:6007/udp   2 . allow ip   $ sudo ufw allow from 15.15.15.51 $ sudo ufw allow from 15.15.15.51 to any port 22   3 . allow subnet   $ sudo ufw allow from 15.15.15.0/24 $ sudo ufw allow from 15.15.15.0/24 to any port 22   4 . allow eth   $ sudo ufw allow in on eth0 to any port 80 $ sudo ufw allow in on eth1 to any port 3306   use $ ip addr to check eths   5 . deny   sudo ufw deny http sudo ufw deny from 15.15.15.51   6 . delete rule  $ sudo ufw delete [Num]   use sudo ufw status numbered to check rule Num   7 . enable / disable / restart service  $ sudo ufw enable $ sudo ufw disable $ sudo ufw reset      reference         https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-14-04     ","categories": [],
        "tags": [],
        "url": "/linux-set-up-a-firewall-with-ufw-on-ubuntu-1604/",
        "teaser": null
      },{
        "title": "[Rails] 指令們",
        "excerpt":"Git  環境設定  $ git config --global user.name [YOUR_NAME] $ git config --global user.email [YOUR@EMAIL.COM] $ git config --global color.ui true  #=&gt;打開 Git 的 color 顏色設定，如 git status  $ git config --global core.editor \"code --wait\" #=&gt; 指定開啟的編輯器(ex.vscode)  常用指令     RVM  安裝  $ \\curl -sSL https://get.rvm.io | bash -s stable   指令  $ rvm list   \t\t\t\t\t\t\t\t #=&gt; 列出已安裝版本（=&gt; 現用， =* 現用和預設，* 預設） $ rvm use 2.1.0              #=&gt; 輸入版本來做切換 $ rvm use 2.1.0 --default    #=&gt; 切成預設版本 $ rvm list known\t\t\t\t\t\t #=&gt; 列出rvm目前所有可安裝的版本 $ rvm install 2.1.0   \t\t\t #=&gt; 安裝新版，如果有head標記可省略最後的\".0\" $ rvm reinstall 2.1.0 \t\t\t #=&gt; 重新安裝版本 $ rvm info             \t\t\t #=&gt; 目前使用的ruby的相關資料   #  ","categories": [],
        "tags": [],
        "url": "/rails-directives/",
        "teaser": null
      },{
        "title": "[Rails] 從string取得model",
        "excerpt":"狀況一     由 \"product\"產生 Product 去new一個instance   使用 constantize 把 string 轉換成 model   product_model = 'product'.camelize.constantize new_product = product_model.new #=&gt; #&lt;Product:0x007fd087727c20&gt;...   狀況二          由 \"product\" 產生 Admin::Product 去 new 一個 instance            要配合 const_get 使用       product_model = Admin.const_get('product'.camelize) new_product = product_model.new #=&gt; #&lt;AdminProduct:0x007fd087727c20&gt;...      參考         https://apidock.com/rails/String/constantize     https://stackoverflow.com/questions/14562553/how-to-inflection-a-string-to-a-model-name-in-rails     ","categories": [],
        "tags": [],
        "url": "/rails-form-a-string-to-remove-the-instance/",
        "teaser": null
      },{
        "title": "[Linux] Install Socks5 Proxy Server on Ubuntu 16.04",
        "excerpt":"Install Dante Server  $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install dante-server   Configuration   $ vim /etc/danted.conf   logoutput: /var/log/socks.log  internal: eth0 port = 1080 external: eth0  method: none user.privileged: root user.notprivileged: nobody  client pass {   from: 0.0.0.0/0 to: 0.0.0.0/0   log: error connect disconnect }  client block {   from: 0.0.0.0/0 to: 0.0.0.0/0   log: connect error }  pass {   from: 0.0.0.0/0 to: 0.0.0.0/0   log: error connect disconnect }  block {   from: 0.0.0.0/0 to: 0.0.0.0/0   log: connect error }   Server Start/Stop   $ sudo service danted stop $ sudo service danted start   Authentication   Simply change method: none to method: username then change.  In order to create user credentials I recommend you add a user with no ssh/shell access  via useradd - s /sbin/nologin Your-User-Name.   Chrome Proxy Plugin   Proxy SwitchyOmega   Reference     Ubuntu 17.10 Socks5 Proxy Server Setup Guide   How to set up danted (dante-server) SOCKS proxy on Linux/Debian with authentication   How to list, add, delete, modify users  ","categories": [],
        "tags": [],
        "url": "/7657405/",
        "teaser": null
      },{
        "title": "[Rails] 如何在 development 環境使用 https ",
        "excerpt":"1. 產生ssl證書   先將 ssl 證書 產生到指定的地方( 此例為 ~/.ssh ) 備用   $ openssl req -x509 -sha256 -nodes -newkey rsa:2048 -days 365 -keyout ~/.ssh/localhost.key -out ~/.ssh/localhost.crt   2. 使用相應的指令啟動 rails   這邊需要寫絕對路徑，請把YourName換成自己的名稱   $ rails s -b \"ssl://127.0.0.1:3000?key=/Users/YourName/.ssh/localhost.key&amp;cert=/Users/YourName/.ssh/localhost.crt\"   備註 1.  開放對外連線   如果要對外開放連線，可以把 127.0.0.1 改寫為 0.0.0.0  $ rails s -b \"ssl://0.0.0.0:3000?key=/Users/YourName/.ssh/localhost.key&amp;cert=/Users/YourName/.ssh/localhost.crt\"   備註 2.  懶得寫這麼長   可以把參數直接寫在 puma.rb 之中 (SSL_KEY_PATH、SSL_CERT_PATH 請寫到環境變數中)  if ENV.fetch(\"RAILS_ENV\") == 'development'   ssl_bind '127.0.0.1', '3000', {     key: ENV.fetch(\"SSL_KEY_PATH\"),     cert: ENV.fetch(\"SSL_CERT_PATH\"),     verify_mode: 'none'   } end   參考     https://www.devmynd.com/blog/rails-local-development-https-using-self-signed-ssl-certificate/   https://github.com/puma/puma/issues/1128   https://gist.github.com/tadast/9932075   https://ihower.tw/blog/archives/8861   TODO  https://github.com/jugyo/tunnels https://mozilla.github.io/server-side-tls/ssl-config-generator/  ","categories": [],
        "tags": [],
        "url": "/rails-how-to-use-https-on-the-local-side/",
        "teaser": null
      },{
        "title": "[Rails]  miniMagick 圖片處理筆記",
        "excerpt":"預安裝  須先安裝 ImageMagick 或是 GraphicsMagick command-line tool  (這邊以 ImageMagick 為例)   Linux  $ sudo apt-get install imagemagick     Mac  $ brew install imagemagick   確認是否安裝成功  $ convert -version Version: ImageMagick 6.8.9-7 Q16 x86_64 2014-09-11 http://www.imagemagick.org Copyright: Copyright (C) 1999-2014 ImageMagick Studio LLC Features: DPC Modules Delegates: bzlib fftw freetype jng jpeg lcms ltdl lzma png tiff xml zlib   安裝   gem \"mini_magick\"   直接抓網路上的圖片來處理   uri = open(\"http://your.path.com/yourpic.jpg\") img = MiniMagick::Image.new(uri.path)      衍伸問題:  如遇到 redirection 的問題，可安裝 open_uri_redirections 這個 gem 並把寫法改為 open(\"http://your.path.com/yourpic.jpg\", allow_redirections: :safe)    增加文字   img.combine_options do |c|   c.gravity 'NorthWest'   c.pointsize '14'   c.draw \"text 0,0 'hello world'\"   c.fill 'blue' end   疊加圖片   把 current_img 放到 background_img 的座標 20, 20 的位置   background_img = MiniMagick::Image.new(background_img_path) current_img = MiniMagick::Image.new(current_img_path)  background_img = background_img.composite(current_img) do |c|   c.compose \"Over\"   c.geometry \"+20+20\" #座標 end   參考     https://github.com/minimagick/minimagick   https://ruby-china.org/topics/3268   https://ruby-china.org/topics/5673   https://github.com/open-uri-redirections/open_uri_redirections   https://gist.github.com/seyhunak/6495608   https://gist.github.com/elvuel/4057324  ","categories": [],
        "tags": [],
        "url": "/7745119/",
        "teaser": null
      },{
        "title": "[Rails] API 相關處理",
        "excerpt":"Gem  gem ‘rack-cors’, ‘~&gt;1.0.2’, require: ‘rack/cors’ gem ‘grape-swagger-rails’, ‘~&gt; 0.3.0’ gem ‘swagger-docs’, ‘~&gt; 0.2.9’   CSRF 相關   只允許某個 controller 跳過 CSRF   skip_before_filter :verify_authenticity_token   只允許某個 action 跳過 CSRF   skip_before_filter :verify_authenticity_token, only: [:index]   只允許 .json 跳過 CSRF   skip_before_filter :verify_authenticity_token, if: :json_request?  或  protect_from_forgery unless: -&gt; { request.format.json? }   ","categories": [],
        "tags": [],
        "url": "/rails-the-api-is-open-only-json-does-not-need-csrf/",
        "teaser": null
      },{
        "title": "[Cordova] ios 測試部署",
        "excerpt":"步驟     依照 cordova 加入並建立 ios     $ cordova add platform ios $ cordova build ios          一開始建立一定是顯示失敗收場(沒有sign之類的錯誤訊息)            打開 xcode 加入 apple id 打開 Xcode，到 Preferences &gt; Accounts， 按下 + 鈕來加入帳號（一般的apple帳號即可）            使用 xcode 開啟專案   在專案底下 platforms/ios/.xcodeproj            相關設定 Identity - Bundle Identifier 不能跟別人重複 Signing - Team 要選擇，選完後會有ign Certificate Deployment Info - Deployment Target 要選擇手機的ios版本號(如找不到請看故障排除-3)       點左上角的執行即可 build 到手機   故障排除          出現『Device is passcode protected xcode』 要先開 xcode 再接上 iphone ，這時候 iphone 會問你是否信任裝置，要點信任            出現『A build only device cannot be used to run this target』 需要到『系統』『設定』『裝置管理』加入信任            出現『Could not locate device support files.』 方法一、更新 xcode 到最新版本即可(但是通常會伴隨系統也要升級才能裝) 方法二、安裝需要的 DeviceSupport 檔案，例如ios11.4版，只要去找到下載下來，然後到應用程式中找到 xcode ，按右鍵『顯示套件內容』，然後找到以下路徑Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport，把該版本號的資料夾丟進去，然後重開xcode即可。(下拉沒有的話直接輸入11.4即可)            APP開啟後，點所有按鈕都沒反應 Content Security Policy 的問題 index.html 需要設定 ```        ```      參考         官方ios平台指南     部署步驟     xcode-device-locked-when-iphone-is-unlocked     iOS-DeviceSupport說明     iOS-DeviceSupport     cordova-ios-javascript-not-working     ","categories": [],
        "tags": [],
        "url": "/cordova-ios-test-deployment/",
        "teaser": null
      },{
        "title": "[ElementaryOS] 新玩具試玩",
        "excerpt":"什麼是 elementary OS？   line   1.裝 chrome extension 版     到 chrome://flags/ 開啟 Desktop pwas   到 chrome://extensions/ 找到你的 Line extension id （以下提到的 ophjlpahpchlmihnnnihgmmeilfjmjjc 請以自己的 LINE extension ID 取代）   開啟 line 找到他真正的網頁路徑 例如: chrome-extension://ophjlpahpchlmihnnnihgmmeilfjmjjc/index.html   按「建立捷徑」建立PWA，並到 chrome://apps 在 LINE 按右鍵 按「在視窗中開啟」   可以編輯「~/.local/share/applications/chrome-pbpoojghcbigbheeamegjbdailkaeglf-Default.desktop」把 ICON 換掉      參考         https://ithelp.ithome.com.tw/articles/10191370     http://linuxbrew.sh/     https://elementaryos.stackexchange.com/questions/4205/how-can-i-get-a-minimize-button     https://github.com/elementary-tweaks/elementary-tweaks     https://medium.com/@alex285/how-to-try-elementary-os-5-0-juno-on-ubuntu-18-04-4539eb346f6f     https://askubuntu.com/questions/64222/how-can-i-create-launchers-on-my-desktop     ","categories": [],
        "tags": [],
        "url": "/elementaryos-new-toys-demo/",
        "teaser": null
      },{
        "title": "[Ngrok] 將內網 localhost 無痛分享至外網",
        "excerpt":"Ngrok  透過簡單的方式，將內網 localhost 讓外網可以連進來，順便連 SSL 都處理好了 對於開發 webhook 或是 SSL 的網頁時非常好用    安裝  建議直接把他裝到 global          先至官網註冊一帳號       下載並解壓縮出 ngrok 到你目前的目錄，按照官網說明輸入 token     $ ngrok authtoken [你的Token]          這時候會產生 ~/.ngrok2/ngrok.yml       將 ngrok 放到資料夾 ~/.ngrok2/bin 之下     $ mkdir ~/.ngrok2/bin $ mv ngrok ~/.ngrok2/bin           再把他加到 PATH 中     $ vim ~/.zshrc -# 加入 export PATH=\"$PATH:$HOME/.ngrok2/bin/\"           重開 terminal 後，就可以在任何地方使用 ngrok 這個指令了   使用 Rails 建立對外的開發環境  $ rails s -b 0.0.0.0 $ ngrox http 3000 -# Forwarding                    https://xxxxxxx.ngrok.io -&gt; localhost:3000    之後就可以使用 https://xxxxxxx.ngrok.io 進行測試   問題排除  Rails 會發現 webconsole 無法顯示  Cannot render console from 36.239.59.39! Allowed networks: 127.0.0.1, ::1, 127.0.0.0/127.255.255.255  可以到 development.rb  config.web_console.whiny_requests = false # 改為全開放 config.web_console.whitelisted_ips = '209.249.19.171'  # 或是針對對外IP設白名單 config.web_console.whitelisted_ips = '209.249.0.0/16'   # 或是網域遮罩的寫法   ngrox 的替代方案   localtunnel localtunnel的gem      參考         https://tenten.co/blog/how-to-use-ngrok-to-connect-your-localhost/     https://ngrok.com/download     https://rubyplus.com/articles/4191-How-to-Expose-Local-Rails-App-to-the-Public-Internet     ","categories": [],
        "tags": [],
        "url": "/ngrok-share-the-intranet-localhost-without-pain-to-the-extranet/",
        "teaser": null
      },{
        "title": "[Rails] 資料庫備份還原 yaml_db 使用方式",
        "excerpt":"Yaml_db  將 db 資料轉成 yaml 備份、還原   主要的指令如下  rake db:data:dump   -&gt;   匯出到 db/data.yml rake db:data:load   -&gt;   從 db/data.yml 還原到db     使用方式  情境：將 sqlite 轉到 mysql  專案做到一半才想起來，忘記用 mysql 了，想把 sqlite 裡面的資料無痛轉移到 mysql 去      安裝 yaml_db     gem 'yaml_db'          並執行 bundle install       將 db 匯出   rake db:data:dump   # 匯出到 db/data.yml      更改 database gemfile     # gem 'sqlite3' gem 'mysql2'          bundle       database.yml  default: &amp;default   adapter: mysql2   encoding: utf8   pool: &lt;%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %&gt;   username: root   password:    socket: /tmp/mysql.sock development:   &lt;&lt;: *default   database: xxx_development test:   &lt;&lt;: *default   database: xxx_test production:   &lt;&lt;: *default   database: xxx_production   username: xxx   password: &lt;%= ENV['XXX_DATABASE_PASSWORD'] %&gt;      建立 db   rake db:create rake db:schema:load      還原 db     rake db:data:load           類似解決方案     seed_dump - 將 db 資料轉成 seed (object的指令)   backup 強大的線上的備份方案      參考         https://github.com/yamldb/yaml_db     https://stackoverflow.com/questions/1670154/convert-a-ruby-on-rails-app-from-sqlite-to-mysql      ","categories": [],
        "tags": [],
        "url": "/rails-gem-yaml-db-how-to-use/",
        "teaser": null
      },{
        "title": "[Rails] 加入常用 column 到 migration",
        "excerpt":"情境  開發專案時常有通用的欄位要新增， 不只 created_at update_at， 還想要加入一些 created_user、updated_user、status、comment 之類的欄位 又不想要每次產生 migration 再重複寫一次   處理方式 - override原有程式碼  新增 schema_definitions.rb 到 initializers   module ActiveRecord   module ConnectionAdapters     class TableDefinition        def timestamps(**options)         options[:null] = false if options[:null].nil?          column(:status,  :integer, default: 1, null: false)         column(:comment, :text, options)         column(:created_user, :integer, options)         column(:created_at,   :datetime, options)         column(:updated_user, :integer, options)         column(:updated_at,   :datetime, options)       end     end   end end   如此在 migration 之中的 t.timestamps 就會自動產生 status、comment、created_user、created_at、updated_user、updated_at 這些欄位   補充說明  當然也可以自行增加 action  module ActiveRecord   module ConnectionAdapters     class TableDefinition       def commons(**options)         options[:null] = false if options[:null].nil?          column(:status,  :integer, default: 1, null: false)         column(:comment, :text, options)       end     end   end end   這樣在 Migration 中加入  class CreateHelloworlds &lt; ActiveRecord::Migration[5.2]   def change     create_table :helloworlds do |t|       t.string :column1       t.string :column2        t.commons       t.timestamps     end   end end  就相當於寫   class CreateHelloworlds &lt; ActiveRecord::Migration[5.2]   def change     create_table :helloworlds do |t|       t.string :column1       t.string :column2        t.integer :status, default: 1, null: false       t.text :comment       t.timestamps     end   end end   如果想要自動回寫 created_user update_user 可以參考 [Rails] model 中取得 current_user 這篇 並且加入以下程式碼   class ApplicationRecord &lt; ActiveRecord::Base   self.abstract_class = true   before_create :create_common_columns   before_update :update_common_columns      private    def create_common_columns     return if User.current.nil?     self.created_user = User.current.id if self.attributes.include?('created_user')     self.updated_user = User.current.id if self.attributes.include?('updated_user')   end    def update_common_columns     return if User.current.nil?     self.updated_user = User.current.id if self.attributes.include?('updated_user')   end  end       參考         https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb     ","categories": [],
        "tags": [],
        "url": "/rails-add-common-column-to-migration/",
        "teaser": null
      },{
        "title": "[Rails] model 中取得 current_user",
        "excerpt":"施作方式  1. 設定 User.current   user.rb  class User &lt; ApplicationRecord   def self.current     Thread.current[:user]   end      def self.current=(user)     Thread.current[:user] = user   end end   application_controller.rb  class ApplicationController &lt; ActionController::Base   before_action :set_current_user    def set_current_user     User.current = current_user    end end      參考         https://stackoverflow.com/questions/3742785/rails-3-devise-current-user-is-not-accessible-in-a-model#3742981     https://amitrmohanty.wordpress.com/2014/01/20/how-to-get-current_user-in-model-and-observer-rails/     ","categories": [],
        "tags": [],
        "url": "/get-current-user-in-rails-model/",
        "teaser": null
      },{
        "title": "[Rails] 修改預設的 scaffold 模板",
        "excerpt":"修改 model  app/lib/templates/active_record/model/model.rb 官方範例   修改 view  app/lib/templates/scaffold/_form.html.erb app/lib/templates/scaffold/edit.html.erb app/lib/templates/scaffold/index.html.erb app/lib/templates/scaffold/new.html.erb app/lib/templates/scaffold/show.html.erb 官方範例   修改 controller  app/lib/scaffold_controller/controller.rb 官方範例   修改 rspec  app/lib/templates/rspec/scaffold/controller_spec.rb 官方範例   寫法  &lt;%% %&gt; 代表可以產生rails語法 在裡面可以塞 &lt;% %&gt; 變數 語法   例如：  &lt;%%= link_to 'edit', edit_&lt;%= singular_table_name %&gt;_path(&lt;%= singular_table_name %&gt;) %&gt;  最後產生的 template 會是  &lt;%= link_to 'edit', edit_user_path(user) %&gt;   變數整理  假設 rails g scaffold System::ModelName attr1 attr2   application_name:       my_app attributes_names:       [\"attr1\", \"attr2\"] class_path:             [\"system\"] regular_class_path:     [\"system\"]  singular_name:          model_name plural_name:            model_names human_name:             Model name plural_file_name:       model_names fixture_file_name:      model_names  class_name:             System::ModelName file_path:              system/model_name i18n_scope:             system.model_name model_resource_name:    system_model_name singular_route_name:    system_model_name singular_table_name:    system_model_name plural_route_name:      system_model_names plural_table_name:      system_model_names table_name:             system_model_names redirect_resource_name: @system_model_name route_url:              /system/model_names  url_helper_prefix:      system_model_name index_helper:           system_model_names new_helper:             new_system_model_name_url edit_helper:            edit_system_model_name_url(@system_model_name) show_helper:            system_model_name_url(@system_model_name)   故障排除   Q1. 調整後產生scaffold，但是模板沒變 Ans.: 須先執行 spring stop 再產生scaffold      參考         https://api.rubyonrails.org/classes/Rails/Generators/NamedBase.html#method-i-application_name     ","categories": [],
        "tags": [],
        "url": "/rails-modifies-the-default-scaffold-template/",
        "teaser": null
      },{
        "title": "[Rails] cookie overflow 問題處理",
        "excerpt":"錯誤訊息  ActionDispatch::Cookies::CookieOverflow in UsersController#create   解決方式  使用 active_record_store 或是 mem_record_store 把 cookie 內容另外存起來   本文使用 active_record_store 處理   解決步驟   安裝 gem  gem 'activerecord-session_store'   產生需要用到的 migration  rake db:sessions:create rake db:migrate   config/initializers/session_store.rb 中，將原有的 :cookie_store 改為 :active_record_store  Application.config.session_store :cookie_store, :key =&gt; '_my_app_session' to Application.config.session_store :active_record_store, :key =&gt; '_my_app_session'   加入定時刪除排程  官方建議 prodcution 環境需要建立排程定時清理 db，避免資料一直增長 程式參考  rake db:sessions:clear  --&gt; 清空 session rake db:sessions:trim   --&gt; 清理 30 天以前的 session   可以在 sidekiq 塞一個 job 執行  cutoff_period = (ENV['SESSION_DAYS_TRIM_THRESHOLD'] || 30).to_i.days.ago ActiveRecord::SessionStore::Session.       where(\"updated_at &lt; ?\", cutoff_period).       delete_all      參考         https://github.com/rails/activerecord-session_store     https://stackoverflow.com/questions/9473808/cookie-overflow-in-rails-application     http://railscasts.com/episodes/127-rake-in-background     ","categories": [],
        "tags": [],
        "url": "/rails-cookie-overflow-problem-handling/",
        "teaser": null
      },{
        "title": "[Postal] 自建大量寄送信件伺服器",
        "excerpt":"Postal   1. 開一台 Ubuntu 16.04 LTS  2. 執行快速安裝指令   $ curl https://raw.githubusercontent.com/atech/postal/master/script/install/ubuntu1604.sh | sh\t   3. 開新帳號   $ postal make-user  # E-Mail Address      : xxx@gmail.com # First Name          : xxx # Last Name           : xxx # Initial Password:   : ********** # User has been created with e-mail address xxx@gmail.com   4. 修改mysql密碼  mysqladmin -u root password  5. 修改RabbitMQ密碼  p0stalpassw0rd      mysql 的 root 密碼預設是空的，要自己補 mysql 和 rabitMQ 的 postal帳號的密碼要一樣才行 (不動也沒差，反正會加防火牆)    6. 把 nginx 設定裡面兩個domain name都改掉   /etc/nginx/sites-enabled/default   domain_name postal.yourdomain.com   $ nginx -t $ service nginx restart   7. 安裝 certbot 並啟用ssl   $ sudo apt-get update $ sudo apt-get install software-properties-common $ sudo add-apt-repository ppa:certbot/certbot $ sudo apt-get update $ sudo apt-get install python-certbot-nginx    啟用certbot   $sudo certbot --nginx # 選 1 不自動轉(原本已經寫好了)   設定自動啟用   $ sudo certbot renew --dry-run   8. DNS設定   ;; A Records (IPv4 addresses) yourdomain.com.\t1\tIN\tA\t123.123.123.123 postal.yourdomain.com.\t1\tIN\tA\t123.123.123.123 rp.mail.yourdomain.com.\t1\tIN\tA\t123.123.123.123 spf.postal.yourdomain.com.\t1\tIN\tA\t123.123.123.123 www.yourdomain.com.\t1\tIN\tA\t123.123.123.123 ;; MX Records psrp.yourdomain.com.\t1\tIN\tMX\t10\tmx.postal.yourdomain.com. psrp.mail.yourdomain.com.\t1\tIN\tMX\t10\tmx.postal.yourdomain.com. ;; CNAME Records psrp.yourdomain.com.\t1\tIN\tCNAME\trp.postal.yourdomain.com. psrp.mail.yourdomain.com.\t1\tIN\tCNAME\trp.postal.yourdomain.com. ;; TXT Records yourdomain.com.\t1\tIN\tTXT\t\"v=spf1 a mx include:spf.postal.yourdomain.com ~all\" mail.yourdomain.com.\t1\tIN\tTXT\t\"v=spf1 a mx include:spf.postal.yourdomain.com ~all\" psrp.yourdomain.com.\t1\tIN\tTXT\t\"v=spf1 a mx ip4:123.123.123.123 ~all\" psrp.mail.yourdomain.com.\t1\tIN\tTXT\t\"v=spf1 a mx ip4:123.123.123.123 ~all\" postal-bfyfsk._domainkey.yourdomain.com.\t1\tIN\tTXT\t\"v=DKIM1; t=s; h=sha256; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsEfl9HlDLTG9G4LVkVPh/mnCkb+XiJpeaGaVR/+TLHvdLv2EaVY9QlXnJl3CsOz+ift8W0cAQFfSRjHF4LHyGFxe0UfDOhMR67p4/KiCF3uq/bnSMnVXKLXp45YWGz9JT2HIlu497zZ1m7zIXtiSChU2qR39kTqai7CK8VHEOJQIDAQAB;\" postal-gmqito._domainkey.mail.yourdomain.com.\t1\tIN\tTXT\t\"v=DKIM1; t=s; h=sha256; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCiduT7ecGnhzz/qgNQXYFmdIZ2tWyjg34z4GJJZxf6JNewYb9Ag776Ogcanux2s78G0JDYMo1M/HPekq1REEL3wPHU8yYsBG9xLcLSfr1wIMVqrZ7oLKsC3I8HsJOnARu3reQrpBIOq//4wei8mzUyNwhAfPrEvbVzgBhAcOe74wIDAQAB;\" postal-nofjiu._domainkey.mail.yourdomain.com.\t1\tIN\tTXT\t\"v=DKIM1; t=s; h=sha256; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3ebXd1f8b8yXxWZegbMW/Pn7wppOslFxkDft4tCpY5QMlhiOkvBU4zy3BlpA+m930MDPyqeiIhFBHpLhEelwT50H3I7yMtI+fQb4+PVMwog9czLTN9wYWWomHNGI4bUo1GWPWbnjgPSyjEOM5mKIwk3Fvqgdyo6goNnjEjh4wWQIDAQAB;\" _dmarc.yourdomain.com.\t1\tIN\tTXT\t\"v=DMARC1; p=none\"   9. smtp 設定轉 port   ``` $ sudo apt-get install ufw # 所有port 允許送出，拒絕進入 $ sudo ufw default deny incoming $ sudo ufw default allow outgoing # 開啟服務 $ sudo ufw allow ssh (務必加入，否則無法遠端) $ sudo ufw allow http $ sudo ufw allow https $ sudo ufw allow 587/tcp ```   設定 port forwarding   # /etc/ufw/sysctl.conf net/ipv4/ip_forward=1 #把註解取消   把以下文字加到 /etc/ufw/before.rules 最上方   # /etc/ufw/before.rules  *nat :PREROUTING ACCEPT [0:0] -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 COMMIT   $ sudo ufw disable  $ sudo ufw enable       參考         https://serverfault.com/questions/238563/can-i-use-ufw-to-setup-a-port-forward      ","categories": [],
        "tags": [],
        "url": "/postal-self-built-a-large-number-of-mail-sent-to-the-server/",
        "teaser": null
      },{
        "title": "[Linux] 查詢佔用 port 的 pid",
        "excerpt":"查詢佔用 port 的 pid   $ netstat -nlp|grep 8080   查詢 pid 佔用哪些 port   $ netstat -pl | grep 6152  ","categories": [],
        "tags": [],
        "url": "/linux-query-uses-the-pid-of-port/",
        "teaser": null
      },{
        "title": "Jekyll 使用 private repo 建立 gh-pages",
        "excerpt":"免費版的 github 建立 gh-pages 必須公開 repository。 如果想省錢又不想把 markdown 直接公諸於世該怎麼辦？   目標   本文使用 jekyll ， 透過一個 private repository (原始碼)， 搭配一個 public repository (產出的 html)， 來達到目標。   graph LR   subgraph client     A[source code]   end   A[source code] --&gt;|git push| B(private repo)   subgraph github     B --&gt;|\"deploy(by action)\"| D[public repo]   end   步驟      先到 github 上建立好兩個 repo 。例如：myblog_private, myblog_public,   加入 github action，並 push 到 myblog_private      # .github/workflows/jekyll.yml  name: Deploy Jekyll site to Pages  on:    push:      branches: [\"main\"]    workflow_dispatch:  permissions:    contents: read    pages: write    id-token: write  concurrency:    group: \"pages\"    cancel-in-progress: true  jobs:    deploy:      runs-on: ubuntu-latest      steps:        - name: Checkout          uses: actions/checkout@v3        - name: Setup Ruby          uses: ruby/setup-ruby@v1          with:            ruby-version: '3.0'            bundler-cache: true            cache-version: 0 # Increment this number if you need to re-download cached gems        - name: Build with Jekyll          run: bundle exec jekyll build          env:            JEKYLL_ENV: production        - name: Upload artifact          uses: actions/upload-pages-artifact@v1        - name: Deploy to GitHub Pages 🚀          uses: peaceiris/actions-gh-pages@v3          with:            deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}            external_repository: mygithub/myblog_public            publish_branch: main            publish_dir: ./_site           產生一組 gh-pages 專用的 public key 和 private key       ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f gh-pages -N \"\"                 public key: gh-pages.pub       private key: gh-pages           把 private key 加到 private repo 的 secerts 中，並取名為 ACTIONS_DEPLOY_KEY   把 public key 加到 public repo 的 deploy keys 中   參考     deploy-to-external-repository   create-ssh-deploy-key  ","categories": ["Jekyll"],
        "tags": ["jekyll","github","gh-pages"],
        "url": "/jekyll/private-repo-with-gh-pages/",
        "teaser": "/assets/images/logo-jekyll.jpg"
      },{
        "title": "Jekyll 使用 mermaid 繪製流程圖",
        "excerpt":"mermaid 是使用 JavaScript 開發的圖表工具。 他受到 Markdown 啟發，使用簡易的文字定義，即可動態建立圖表。 本文介紹如何將其嵌入 Jekyll 之中。   目標   將 mermaid 套件加入 jekyll，使用 Markdown 的程式區塊，快速的撰寫並建立圖表   安裝   在頁面上插入   &lt;script type=\"module\"&gt;   import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs'   mermaid.init({noteMargin: 10}, \".language-mermaid\") &lt;/script&gt;    使用方式   這邊舉出一些範例，詳細用法可至 mermaid 官網查詢   另外也有 mermaid live edit 可以線上預覽產生的圖       範例： 使用 mermaid 將語法寫在程式區塊中   ```mermaid   flowchart LR      A –&gt; B   ```   flowchart LR   A --&gt; B     流程圖   flowchart LR   A[Start] --&gt; B{Is it?}   B -- Yes --&gt; C[OK]   C --&gt; D[Rethink]   D -.-&gt; B   B -- No ----&gt; E[End]  flowchart LR   A[Start] --&gt; B{Is it?}   B -- Yes --&gt; C[OK]   C --&gt; D[Rethink]   D -.-&gt; B   B -- No ----&gt; E[End]   flowchart TD     c1--&gt;a2     subgraph one     a1--&gt;a2     end     subgraph two     b1--&gt;b2     end     subgraph three     c1--&gt;c2     end   flowchart TD     c1--&gt;a2     subgraph one     a1--&gt;a2     end     subgraph two     b1--&gt;b2     end     subgraph three     c1--&gt;c2     end   序列圖   sequenceDiagram     Alice-&gt;&gt;John: Hello John, how are you?     John--&gt;&gt;Alice: Great!     Alice-)John: See you later!  sequenceDiagram     Alice-&gt;&gt;John: Hello John, how are you?     John--&gt;&gt;Alice: Great!     Alice-)John: See you later!   實體關係圖(ERD)   --- title: Order example --- erDiagram     CUSTOMER ||--o{ ORDER : places     ORDER ||--|{ LINE-ITEM : contains     CUSTOMER }|..|{ DELIVERY-ADDRESS : uses  --- title: Order example --- erDiagram     CUSTOMER ||--o{ ORDER : places     ORDER ||--|{ LINE-ITEM : contains     CUSTOMER }|..|{ DELIVERY-ADDRESS : uses   erDiagram     CUSTOMER ||--o{ ORDER : places     CUSTOMER {         string name         string custNumber         string sector     }     ORDER ||--|{ LINE-ITEM : contains     ORDER {         int orderNumber         string deliveryAddress     }     LINE-ITEM {         string productCode         int quantity         float pricePerUnit     }  erDiagram     CUSTOMER ||--o{ ORDER : places     CUSTOMER {         string name         string custNumber         string sector     }     ORDER ||--|{ LINE-ITEM : contains     ORDER {         int orderNumber         string deliveryAddress     }     LINE-ITEM {         string productCode         int quantity         float pricePerUnit     }   甘特圖   gantt     title A Gantt Diagram     dateFormat  YYYY-MM-DD     section Section     A task           :a1, 2023-01-01, 30d     Another task     :after a1  , 20d     section Another     Task in sec      :2023-01-12  , 12d     another task      : 24d  gantt     title A Gantt Diagram     dateFormat  YYYY-MM-DD     section Section     A task           :a1, 2023-01-01, 30d     Another task     :after a1  , 20d     section Another     Task in sec      :2023-01-12  , 12d     another task      : 24d  圓餅圖   pie showData     title Key elements in Product X     \"Calcium\" : 42.96     \"Potassium\" : 50.05     \"Magnesium\" : 10.01     \"Iron\" :  5  pie showData     title Key elements in Product X     \"Calcium\" : 42.96     \"Potassium\" : 50.05     \"Magnesium\" : 10.01     \"Iron\" :  5   Git 圖   --- title: Example Git diagram --- gitGraph    commit    commit    branch develop    checkout develop    commit    commit    checkout main    merge develop    commit id: \"Normal\" tag: \"v1.0.0\"    commit id: \"Reverse\" type: REVERSE tag: \"RC_1\"    commit id: \"Highlight\" type: HIGHLIGHT tag: \"8.8.4\"  --- title: Example Git diagram --- gitGraph    commit    commit    branch develop    checkout develop    commit    commit    checkout main    merge develop    commit id: \"Normal\" tag: \"v1.0.0\"    commit id: \"Reverse\" type: REVERSE tag: \"RC_1\"    commit id: \"Highlight\" type: HIGHLIGHT tag: \"8.8.4\"   參考      mermaid   mermaid online playground  ","categories": ["Jekyll"],
        "tags": ["jekyll","mermaid"],
        "url": "/jekyll/drawing-flowcharts-with-mermaid-in-jekyll/",
        "teaser": "/assets/images/logo-jekyll.jpg"
      },{
        "title": "Ubuntu 如何使用排程 crontab",
        "excerpt":"ubuntu 如何使用排程 crontab   目標   介紹 crontab 基本用法   安裝   sudo apt update sudo apt install cron   服務   sudo service cron status sudo service cron start sudo service cron restart sudo service cron stop   提示: 安裝完服務會自動啟動，文件設定完也不用重啟，所以這幾行其實很少用。   使用方式   以下兩種方式:   user   crontab -l #列出 crontab -r #刪除 crontab -e #編輯   root   sudo vim /etc/crontab   # 分 時 日 月 星期 指令 0 0,12 1 * * /usr/bin/certbot renew # 每個月1號的0點和12點執行 certbot renew       提示:  個人是習慣直接編輯/etc/crontab，如不熟悉可至工具網頁 crontab.guru 試試是否正確     參考      技術研究 Ubuntu CronTab - DavidKross   crontab.guru  ","categories": ["Ubuntu"],
        "tags": ["crontab","ubuntu"],
        "url": "/ubuntu/how-to-use-crontab-in-ubuntu/",
        "teaser": "/assets/images/logo-ubuntu.jpg"
      },{
        "title": "Ubuntu 如何 mount windows 的分享資料夾",
        "excerpt":"ubuntu 如何連接 windows 的分享資料夾   目標   ubuntu 連接 windows 的分享資料夾   安裝   安裝 CIFS   $ sudo apt-get install cifs-utils   On older systems:   $ sudo apt-get install smbfs   步驟      確保您有以下訊息：            用於分享資料夾的 Windows 名稱和密碼       分享資料夾連結（例如 //server/share）或 IP 位置       Linux 上的 root 權限           以 root 登錄 Linux（或使用 su 或 sudo）   建立所需的掛載點：       $ mkdir -p /mnt/YOUR_PATH           開始掛載       $ mount -t cifs //YOUR_SERVER/SHARE_FORDER -o username=YOUR_NAME,password=YOUR_PASSWORD /mnt/YOUR_PATH           範例      先把要 mount 位置的資料夾建好       $ mkdir -p /mnt/my-server           將 //192.168.1.100/d$/download 這個分享資料夾 mount 到 /mnt/my-server (帳密是administrator/pwd123)       $ sudo mount -t cifs //192.168.1.100/d$/download -o username=administrator,password=pwd123 /mnt/my-server           可以查看 monut 是否正確       $ ls /mnt/my-server           開機自動掛載   設定開機自動掛載   需以 root 權限編輯 /etc/fstab   # device   MountPoint  filesystem  parameters   dump   fsck # 範例1. 無帳密登入/可寫入: //192.168.1.200/storage /mnt/share-server cifs guest,iocharset=utf8,file_mode=0777,dir_mode=0777 # 範例2. 帳密登入/只讀: //192.168.1.100/d$/download /mnt/my-server cifs username=administrator,password=pwd123,iocharset=utf8 # 範例3. 密碼需要隱藏: # 另外建立 /home/ivan/.smbcredentials 並且使用 chmod 600 #  第一行 username=administrator  #  第二行 password=pwd123 //192.168.1.100/d$/download /mnt/my-server cifs credentials=/home/ivan/.smbcredentials,iocharset=utf8   驗證可使用以下指令全部掛載   mount -a   取消掛載   指定某個   umount /mnt/my-server   全部   umount -a   參考     stackexchange.com - Copy file from Windows shared folder to Unix   cyberciti.biz - How to mount remote windows partition (windows share) under Linux   wiki.ubuntu.com - Mount Windows Shares Permanently  ","categories": ["Ubuntu"],
        "tags": ["mount","ubuntu"],
        "url": "/ubuntu/how-to-mount-windows-share-folder-in-ubuntu-copy/",
        "teaser": "/assets/images/logo-ubuntu.jpg"
      },{
        "title": "如何使用自定義的 iso 建立 Linode",
        "excerpt":"如何使用自定義的 iso 建立 Linode   目標   使用 proxmox iso 來舉例，建立一個 Linode   步驟      建立 linode 時，把 images 先按 x 掉   接下來進入 linode 設定，進到 storage 頁面，手動建立一個(label:Installer/type:raw/size:3000mb)   按右上角的…，選擇 rescue 使用安全模式開啟(/dev/sda 選擇剛剛建立的 Installer)   開啟 LISH Console 執行以下指令將 ISO 直接寫入到 Installer 中       $ wget https://enterprise.proxmox.com/iso/proxmox-ve_7.3-1.iso   $ dd if=proxmox-ve_7.3-1.iso of=/dev/sda          or        $ curl https://enterprise.proxmox.com/iso/proxmox-ve_7.3-1.iso | dd of=/dev/sda           安裝完成後，切到 storage 頁面，再另外建一個硬碟(label:System/type:ext4/size:20000mb)   在 storage 使用 Installer 開機   開啟  LISH Console 切到 GLISH 即可看到安裝畫面   接下來就照正常安裝方式安裝   安裝完後就可以把 installer 刪除了   參考     linode.com docs - Install a Custom Linux Distribution on a Compute Instance   cyberciti.biz - Configuring Static IP on Debian 10 or 11   haiyun.me - Proxmox网桥通过SLAAC配置公网ipv6地址   sakurabakiyoka.com - Proxmox 开IPV4 NAT+IPV6 SLAAC机   wnark.com - 单IPv4独服利用ProxmoxVE建立IPv4-NAT和IPv6虚拟机（小鸡   jkgtw’s blog - 虛擬機跑起來！RouterOS CHR 軟路由效能輕鬆突破 1000M！   ","categories": ["Ubuntu"],
        "tags": ["ubuntu","linode","pve"],
        "url": "/ubuntu/how-to-create-linodes-with-custom-iso/",
        "teaser": "/assets/images/logo-linode.jpg"
      }]
